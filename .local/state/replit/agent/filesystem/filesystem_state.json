{"file_contents":{"README.md":{"content":"# FXBOT - Professional Forex Investment Platform\n\nA modern, fully responsive React application for a forex investment platform featuring investment packages, ROI calculators, and professional design.\n\n## 🚀 Features\n\n- **Responsive Design** - Fully responsive across all devices\n- **Professional Theme** - Dark theme with gold/blue colors matching the FXBOT brand\n- **Investment Packages** - Display of various investment plans and returns\n- **ROI Calculator** - Interactive calculator for investment returns\n- **Affiliate Income Calculator** - Calculate potential affiliate earnings\n- **Contact Forms** - Professional contact and newsletter signup forms\n- **FAQ Section** - Comprehensive frequently asked questions\n- **Legal Pages** - Terms of service and privacy policy\n\n## 🛠 Technology Stack\n\n- **Frontend**: React 18, JavaScript (ES6+), Vite\n- **Backend**: Node.js, Express.js\n- **Styling**: Tailwind CSS with custom design system\n- **Icons**: Lucide React\n- **Routing**: Wouter\n- **State Management**: TanStack Query (React Query)\n- **Forms**: React Hook Form with Zod validation\n\n## 📁 Project Structure\n\n```\n├── client/\n│   ├── src/\n│   │   ├── components/     # React components\n│   │   ├── pages/         # Page components\n│   │   ├── hooks/         # Custom React hooks\n│   │   ├── lib/          # Utility functions\n│   │   ├── App.jsx       # Main app component\n│   │   └── main.jsx      # App entry point\n│   └── index.html        # HTML template\n├── server/\n│   ├── index.js          # Express server\n│   ├── routes.js         # API routes\n│   ├── storage.js        # Data storage layer\n│   └── vite.js          # Vite development server\n├── shared/\n│   └── schema.js         # Shared validation schemas\n├── attached_assets/      # Logo and asset files\n├── vite.config.js        # Vite configuration\n├── tailwind.config.js    # Tailwind CSS configuration\n└── start.js             # JavaScript server startup script\n```\n\n## 🚀 Getting Started\n\n### Prerequisites\n\n- Node.js (v18 or higher)\n- npm or yarn\n\n### Installation\n\n1. Clone the repository:\n```bash\ngit clone <repository-url>\ncd fxbot\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Start the development server:\n```bash\nnpm run dev\n```\n\nOr manually start the JavaScript server:\n```bash\nnode start.js\n```\n\nThe application will be available at `http://localhost:5000`\n\n### Production Build\n\n1. Build the application:\n```bash\nnpm run build\n```\n\n2. Start the production server:\n```bash\nnpm start\n```\n\n## 🎨 Design System\n\nThe application uses a custom design system with:\n- **Primary Colors**: Gold (#F59E0B) and Blue (#3B82F6)\n- **Typography**: Inter font family\n- **Dark Theme**: Professional dark background with golden accents\n- **Components**: Custom UI components built with Tailwind CSS\n\n## 📱 Responsive Features\n\n- Mobile-first design approach\n- Touch-friendly navigation\n- Responsive grid layouts\n- Optimized images and assets\n- Progressive enhancement\n\n## 🔧 Development\n\n### Available Scripts\n\n- `npm run dev` - Start development server (currently uses TypeScript, use `node start.js` for JavaScript)\n- `npm run build` - Build for production\n- `npm start` - Start production server\n- `node start.js` - Start JavaScript development server\n\n### Project Conversion\n\nThis project has been converted from TypeScript to pure JavaScript:\n- All `.ts` and `.tsx` files have been removed\n- JavaScript equivalents created for all components\n- Server runs on pure Node.js without TypeScript compilation\n- Maintained all functionality and features\n\n## 🌐 Deployment\n\nThe project is ready for deployment on any Node.js hosting platform:\n\n1. **Replit**: Ready to deploy using Replit's deployment system\n2. **Vercel**: Configure build commands in `vercel.json`\n3. **Netlify**: Set up build and start commands\n4. **Heroku**: Add `Procfile` with `web: node server/index.js`\n\n## 📄 License\n\nThis project is licensed under the MIT License.\n\n## 🤝 Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Commit your changes\n4. Push to the branch\n5. Create a Pull Request\n\n## 📞 Support\n\nFor support and questions, please use the contact form on the website or reach out through the provided channels.","size_bytes":4358},"postcss.config.js":{"content":"export default {\n  plugins: {\n    '@tailwindcss/postcss': {},\n    autoprefixer: {},\n  },\n}","size_bytes":90},"replit.md":{"content":"# FXBOT - Professional Forex Investment Platform\n\n## Overview\n\nFXBOT is a modern full-stack web application for a Forex investment platform. The system provides a professional interface for users to view investment packages, track returns, and engage with Forex investment services. Built with React/JavaScript on the frontend and Express.js on the backend, it offers a comprehensive solution for Forex investment management with real-time data capabilities. \n\n## Recent Changes\n\n- ✅ **Complete TypeScript to JavaScript conversion** - All components and server files converted\n- ✅ **Complete Tailwind CSS to regular CSS conversion** - All styling converted to custom CSS classes\n- ✅ **Fixed server configuration** - Application now properly runs on port 5000\n- ✅ **Git-ready project structure** - Project prepared for version control and deployment\n- ✅ **Backend foundation** - Storage interface and API routes ready for database integration\n- ✅ **Registration system with referral structure** - Users get unique sponsor IDs and parent-child relationships\n- ✅ **User dashboard** - Shows own sponsor ID, referral count, and referred users list\n- ✅ **MongoDB Atlas integration** - Live database with user authentication and referral tracking\n- ✅ **Multi-level referral tracking** - 5-tier system with parent-child relationships up to 5 levels deep\n- ✅ **Reward distribution system** - Automated percentage-based rewards (1.5%, 1.0%, 0.75%, 0.50%, 0.25%)\n- ✅ **Enhanced dashboard UI** - Modern card-based interface showing multi-level stats and earnings\n- ✅ **Investment simulation** - Testing tool for reward distribution validation\n- ✅ **Sidebar navigation system** - Dark modern sidebar matching screenshot design with Profile, Fund, Referral Tree, Deposit, Withdrawal, Logout options\n- ✅ **Fixed sponsor ID copy functionality** - Resolved \"undefined\" issue when copying sponsor ID\n- ✅ **Complete sidebar pages** - All navigation pages (Profile, Fund, ReferralTree, Deposit, Withdrawal) implemented with proper layouts\n- ✅ **Dashboard redesign to match reference** - Created clean dashboard layout exactly matching the reference screenshot with correct FXBOT branding\n- ✅ **Fixed branding throughout application** - Corrected from \"FCX Trade\" to \"FXBOT\" in all components and pages\n- ✅ **Modern dashboard with Tailwind CSS** - Implemented complete redesign with professional sidebar, gradient cards, and perfect alignment\n- ✅ **Enhanced UI features** - Added gradient backgrounds, hover animations, glassmorphism effects, professional SVG icons, and interactive elements\n- ✅ **Investment simulation and commission calculator** - Real-time calculations for referral earnings across 5-tier system\n- ✅ **Professional trading accounts table** - Enhanced with gradient headers, animated status indicators, and comprehensive account information\n- ✅ **Complete admin dashboard system** - Full 6-tab navigation with User List, KYC Status, Deposit Requests, Withdrawal Requests, Investments, and Engagement\n- ✅ **Admin authentication fixed** - Proper `isAdmin` field recognition and routing from login to admin dashboard\n- ✅ **Engagement analytics tab** - User search by email/mobile with complete history display including FS Income, Smart Line Income, DRI Income, DAS status and investment volume\n- ✅ **Email integration system** - SendGrid-powered welcome email service with professional HTML templates, automatic sending on registration, and admin testing interface\n- ✅ **Password reset system** - Complete forgot/reset password functionality with secure token generation, email notifications, and comprehensive frontend pages\n- ✅ **Professional UI redesign** - Complete conversion to clean, professional styling with slate color palette, responsive grids, and refined component design across all pages\n- ✅ **CSS compilation fixes** - Resolved all Tailwind CSS v4 configuration issues, PostCSS plugin conflicts, and CSS parsing errors for proper styling implementation\n- ✅ **Complete KYC document management system** - Full integration with MongoDB Atlas for KYC submissions, admin review workflow, document viewing, and approval/rejection functionality\n- ✅ **Object storage integration** - KYC documents properly stored and retrieved from Replit object storage with secure admin-only access\n- ✅ **Admin dashboard enhancements** - Fixed user data display issues, added proper null checks, and implemented complete KYC management interface\n- ✅ **Complete withdrawal management system** - Full 3-step withdrawal process with $15 minimum, 5% service charge, OTP email verification, and comprehensive admin approval workflow\n- ✅ **Admin withdrawal dashboard** - Professional interface showing all withdrawal requests with user details, financial breakdown, payment methods, status tracking, and approve/reject functionality with notes\n- ✅ **Withdrawal email notifications** - Automated SendGrid emails for OTP verification, admin approval, and rejection notifications with professional HTML templates\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\nPreferred language: JavaScript/JSX (not TypeScript) - all components and server files converted to JavaScript.\nPreferred styling: Regular CSS (not Tailwind CSS) - all components converted to use custom CSS classes and inline styles.\nDeveloper level: Beginner - needs detailed step-by-step instructions for local setup and Git workflow.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with JavaScript (ES6+) and Vite for fast development and hot module replacement\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **UI Framework**: Custom components with regular CSS classes and inline styles\n- **Styling**: Regular CSS with custom CSS variables for theming, responsive design, and Inter font\n- **Form Handling**: React Hook Form with Zod validation for forms and API requests\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: JavaScript with ES modules (converted from TypeScript)\n- **Build System**: ESBuild for production bundling, Node.js for development\n- **Development Server**: Custom Vite integration with middleware mode for SSR-style development\n- **Storage Interface**: Abstracted storage layer with in-memory implementation, designed for easy database integration\n- **Error Handling**: Centralized error middleware with proper HTTP status codes\n\n### Data Layer\n- **Storage**: In-memory storage implementation for development (ready for database integration)\n- **Schema Management**: Centralized schema definitions in shared directory with Zod validation\n- **Data Validation**: Zod schemas for runtime validation and API request/response handling\n- **API Design**: RESTful API endpoints for contact forms, newsletter, and investment data\n\n### Authentication & Security\n- **Session Management**: Connect-pg-simple for PostgreSQL session storage\n- **CORS**: Configured for cross-origin requests with credentials support\n- **Environment Variables**: Secure configuration management for database URLs and API keys\n\n### Development Environment\n- **Replit Integration**: Custom Vite plugin for Replit-specific development features\n- **Hot Reload**: Full-stack hot reloading with Vite middleware integration\n- **JavaScript**: ES6+ modules with path aliases for clean imports\n- **Code Organization**: Monorepo structure with shared schemas and utilities\n- **Git Ready**: All TypeScript files removed, project ready for Git deployment\n\n## External Dependencies\n\n### Database & Storage\n- **Neon Database**: PostgreSQL-compatible serverless database with @neondatabase/serverless driver\n- **Connect-pg-Simple**: PostgreSQL session store for Express sessions\n\n### UI & Styling\n- **Custom CSS**: Regular CSS classes with CSS variables for consistent theming\n- **Lucide React**: Modern icon library for React components\n- **Responsive Design**: Mobile-first approach with media queries\n- **CSS Grid & Flexbox**: Modern layout techniques for responsive design\n\n### Development Tools\n- **Vite**: Next-generation frontend build tool with plugin ecosystem\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **Drizzle Kit**: Database migration and introspection toolkit\n\n### Data & Forms\n- **TanStack Query**: Server state management with caching and synchronization\n- **React Hook Form**: Performant forms with minimal re-renders\n- **Zod**: TypeScript-first schema validation library\n- **Date-fns**: Modern JavaScript date utility library\n\n### Utilities\n- **Class Variance Authority**: Utility for creating variant-based component APIs\n- **CLSX**: Conditional className utility for dynamic styling\n- **Nanoid**: Secure URL-friendly unique string ID generator","size_bytes":8876},"start.js":{"content":"#!/usr/bin/env node\n\n// Simple JavaScript start script\nprocess.env.NODE_ENV = process.env.NODE_ENV || 'development';\n\n// Start the server\nimport('./server/index.js');","size_bytes":166},"tailwind.config.js":{"content":"/** @type {import('tailwindcss').Config} */\nexport default {\n  content: [\n    \"./client/index.html\",\n    \"./client/src/**/*.{js,ts,jsx,tsx}\",\n  ],\n  theme: {\n    extend: {\n      fontFamily: {\n        sans: ['Inter', 'system-ui', 'sans-serif'],\n      },\n    },\n  },\n  plugins: [],\n}","size_bytes":281},"vite.config.js":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n  assetsInclude: [\"**/*.PNG\", \"**/*.jpg\", \"**/*.jpeg\", \"**/*.gif\", \"**/*.svg\"]\n});","size_bytes":815},"server/index.js":{"content":"import express from \"express\";\nimport { registerRoutes } from \"./routes.js\";\nimport { setupVite, serveStatic, log } from \"./vite.js\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err, _req, res, _next) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();","size_bytes":1958},"server/routes.js":{"content":"import { createServer } from \"http\";\nimport { z } from \"zod\";\nimport { getStorage } from \"./storage.js\";\nimport { generateToken, authenticateToken, requireAdmin } from \"./auth.js\";\nimport { DasService } from \"./dasService.js\";\nimport { ObjectStorageService, ObjectNotFoundError } from \"./objectStorage.js\";\nimport { InvestmentService } from \"./investmentService.js\";\n\n// User registration validation schema\nconst userRegistrationSchema = z.object({\n  sponsorId: z.string().min(1, \"Sponsor ID is required\"),\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  mobile: z.string().min(10, \"Valid mobile number is required\"),\n  email: z.string().email(\"Valid email is required\"),\n  password: z.string().min(8, \"Password must be at least 8 characters\")\n});\n\nexport async function registerRoutes(app) {\n  const storage = getStorage();\n  const server = createServer(app);\n\n  // API Routes\n  app.get(\"/api/health\", (req, res) => {\n    res.json({ status: \"ok\", message: \"FXBOT API is running\" });\n  });\n\n  // Investment packages endpoint\n  app.get(\"/api/packages\", async (req, res) => {\n    try {\n      const packages = [\n        {\n          id: 1,\n          name: \"FS Income (FixSix)\",\n          type: \"fixed\",\n          return: \"6% Monthly until 2x\",\n          minimum: 250,\n          duration: \"~17 months\"\n        },\n        {\n          id: 2,\n          name: \"SmartLine Income\",\n          type: \"affiliate\",\n          levels: 5,\n          commission: \"1.5% to 0.25%\"\n        },\n        {\n          id: 3,\n          name: \"DRI Income\",\n          type: \"direct\",\n          commission: \"6%\",\n          frequency: \"Per Investment\"\n        },\n        {\n          id: 4,\n          name: \"DAS Income\",\n          type: \"salary\",\n          tiers: 3,\n          rewards: \"$300 to 2% CTO\"\n        }\n      ];\n      res.json(packages);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch packages\" });\n    }\n  });\n\n  // Contact form endpoint\n  app.post(\"/api/contact\", async (req, res) => {\n    try {\n      const { firstName, lastName, email, subject, message } = req.body;\n      \n      if (!firstName || !lastName || !email || !message) {\n        return res.status(400).json({ error: \"All fields are required\" });\n      }\n\n      // In a real application, you would save this to a database\n      console.log(\"Contact form submission:\", { firstName, lastName, email, subject, message });\n      \n      res.json({ success: true, message: \"Thank you for your message! We will get back to you soon.\" });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to send message\" });\n    }\n  });\n\n  // Newsletter subscription endpoint\n  app.post(\"/api/newsletter\", async (req, res) => {\n    try {\n      const { email } = req.body;\n      \n      if (!email) {\n        return res.status(400).json({ error: \"Email is required\" });\n      }\n\n      await storage.createSubscriber(email);\n      \n      res.json({ success: true, message: \"Successfully subscribed to newsletter!\" });\n    } catch (error) {\n      if (error.code === 11000) {\n        res.status(400).json({ error: \"Email already subscribed\" });\n      } else {\n        res.status(500).json({ error: \"Failed to subscribe\" });\n      }\n    }\n  });\n\n  // Authentication endpoints\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const result = userRegistrationSchema.safeParse(req.body);\n      if (!result.success) {\n        const errorMessage = result.error.errors?.[0]?.message || 'Validation failed';\n        return res.status(400).json({ error: errorMessage });\n      }\n\n      const { sponsorId, firstName, lastName, mobile, email, password } = result.data;\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ error: \"User with this email already exists\" });\n      }\n\n      // Validate sponsor ID format (FX + 6 digits)\n      const sponsorIdPattern = /^FX\\d{6}$/;\n      if (!sponsorIdPattern.test(sponsorId)) {\n        return res.status(400).json({ error: \"Sponsor ID must be in format FX123456 (FX followed by 6 digits)\" });\n      }\n\n      // Verify sponsor ID exists in the system\n      const sponsor = await storage.findSponsor(sponsorId);\n      if (!sponsor) {\n        return res.status(400).json({ error: \"Invalid sponsor ID. Please check the sponsor ID and try again.\" });\n      }\n\n      // Create new user\n      const userData = {\n        sponsorId,\n        firstName,\n        lastName,\n        mobile,\n        email,\n        password,\n        role: 'user'\n      };\n\n      const newUser = await storage.createUser(userData);\n      \n      // Send welcome email\n      try {\n        const { emailService } = await import('./emailService.js');\n        await emailService.sendWelcomeEmail(newUser.email, {\n          firstName: newUser.firstName,\n          lastName: newUser.lastName,\n          email: newUser.email,\n          mobile: newUser.mobile,\n          ownSponsorId: newUser.ownSponsorId,\n          sponsorId: sponsorId\n        });\n        console.log('Welcome email sent to:', newUser.email);\n      } catch (emailError) {\n        console.error('Failed to send welcome email:', emailError);\n        // Don't fail registration if email fails\n      }\n      \n      res.status(201).json({ \n        success: true, \n        message: \"Account created successfully! Please check your email for welcome message and login to continue.\",\n        user: newUser\n      });\n    } catch (error) {\n      console.error('Registration error:', error);\n      if (error.code === 11000) {\n        if (error.message.includes('email')) {\n          res.status(400).json({ error: \"Email already exists\" });\n        } else {\n          res.status(400).json({ error: \"Registration failed - duplicate entry\" });\n        }\n      } else {\n        res.status(500).json({ error: \"Registration failed\" });\n      }\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = req.body;\n      \n      // Basic validation\n      if (!email || !password) {\n        return res.status(400).json({ error: \"Email and password are required\" });\n      }\n      const user = await storage.getUserByEmail(email);\n      \n      if (!user) {\n        return res.status(401).json({ error: \"Invalid email or password\" });\n      }\n\n      const isValidPassword = await storage.verifyPassword(password, user.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ error: \"Invalid email or password\" });\n      }\n\n      if (!user.isActive) {\n        return res.status(401).json({ error: \"Account is disabled\" });\n      }\n\n      const token = generateToken(user._id);\n      const { password: _, ...userWithoutPassword } = user.toObject();\n      \n      res.json({ \n        success: true, \n        token, \n        user: userWithoutPassword,\n        message: \"Login successful\" \n      });\n    } catch (error) {\n      console.error('Login error:', error);\n      res.status(500).json({ error: \"Login failed\" });\n    }\n  });\n\n  // Get current user\n  app.get(\"/api/auth/me\", authenticateToken, async (req, res) => {\n    try {\n      const user = await storage.getUserById(req.userId);\n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to get user data\" });\n    }\n  });\n\n  // Get user referral information\n  app.get(\"/api/user/referrals\", authenticateToken, async (req, res) => {\n    try {\n      const user = await storage.getUserById(req.userId);\n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n\n      // Get children (referred users)\n      const children = await storage.getUserReferrals(req.userId);\n      \n      // Get detailed referral statistics\n      const { referralService } = await import('./referralService.js');\n      const referralStats = await referralService.getReferralStats(req.userId);\n      \n      res.json({\n        ownSponsorId: user.ownSponsorId,\n        referralCount: user.referralCount || 0,\n        children: children.map(child => ({\n          id: child._id,\n          name: `${child.firstName} ${child.lastName}`,\n          email: child.email,\n          registeredAt: child.createdAt\n        })),\n        stats: referralStats\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to get referral information\" });\n    }\n  });\n\n  // Get referral tree\n  app.get(\"/api/user/referral-tree\", authenticateToken, async (req, res) => {\n    try {\n      const { referralService } = await import('./referralService.js');\n      const tree = await referralService.getReferralTree(req.userId);\n      res.json(tree);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to get referral tree\" });\n    }\n  });\n\n  // User investment summary endpoint\n  app.get(\"/api/user/investment-summary\", authenticateToken, async (req, res) => {\n    try {\n      const summary = await InvestmentService.getUserInvestmentSummary(req.userId);\n      res.json(summary);\n    } catch (error) {\n      console.error(\"Error fetching investment summary:\", error);\n      res.status(500).json({ error: \"Failed to fetch investment summary\" });\n    }\n  });\n\n  // User transaction history endpoint\n  app.get(\"/api/user/transactions\", authenticateToken, async (req, res) => {\n    try {\n      const page = parseInt(req.query.page) || 1;\n      const limit = parseInt(req.query.limit) || 50;\n      const filter = req.query.filter || 'all';\n      \n      // Use storage interface for transaction history\n      const history = await storage.getUserTransactions(req.userId, page, limit);\n      res.json(history);\n    } catch (error) {\n      console.error(\"Error fetching transaction history:\", error);\n      res.status(500).json({ error: \"Failed to fetch transaction history\" });\n    }\n  });\n\n  // Simulate investment for testing rewards (remove in production)\n  app.post(\"/api/user/simulate-investment\", authenticateToken, async (req, res) => {\n    try {\n      const { amount } = req.body;\n      if (!amount || amount <= 0) {\n        return res.status(400).json({ error: \"Invalid investment amount\" });\n      }\n\n      const { referralService } = await import('./referralService.js');\n      const rewards = await referralService.distributeRewards(req.userId, amount);\n      \n      res.json({\n        message: \"Investment processed and rewards distributed\",\n        amount: amount,\n        rewards: rewards\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to process investment\" });\n    }\n  });\n\n\n\n  // Deposit endpoint\n  // Get deposit screenshot upload URL\n  app.post(\"/api/deposit/upload-url\", authenticateToken, async (req, res) => {\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const uploadURL = await objectStorageService.getDepositScreenshotUploadURL();\n      res.json({ uploadURL });\n    } catch (error) {\n      console.error('Error generating upload URL:', error);\n      res.status(500).json({ error: \"Failed to generate upload URL\" });\n    }\n  });\n\n  // Submit deposit request with screenshot\n  app.post(\"/api/deposit\", authenticateToken, async (req, res) => {\n    try {\n      const { amount, walletType, walletAddress, screenshotUrl } = req.body;\n      const userId = req.userId;\n\n      // Basic validation\n      if (!amount || amount < 250 || amount % 250 !== 0) {\n        return res.status(400).json({ error: \"Invalid deposit amount. Minimum $250 in multiples of $250.\" });\n      }\n\n      if (!screenshotUrl) {\n        return res.status(400).json({ error: \"Payment screenshot is required.\" });\n      }\n\n      // Normalize screenshot path\n      const objectStorageService = new ObjectStorageService();\n      const screenshotPath = objectStorageService.normalizeDepositScreenshotPath(screenshotUrl);\n\n      // Create deposit record\n      const depositData = {\n        userId,\n        amount: parseInt(amount),\n        walletType,\n        walletAddress,\n        paymentMethod: 'USDT TRC-20',\n        screenshotUrl,\n        screenshotPath,\n        status: 'pending'\n      };\n\n      // Store deposit request\n      const deposit = await storage.createDeposit(depositData);\n      \n      // Send admin notification email\n      try {\n        const user = await storage.getUserById(userId);\n        const { emailService } = await import('./emailService.js');\n        await emailService.sendDepositNotificationEmail(deposit, user);\n      } catch (emailError) {\n        console.error('Error sending admin notification:', emailError);\n        // Continue even if email fails\n      }\n      \n      res.json({\n        success: true,\n        message: \"Deposit request submitted successfully! Admin will review your transaction and update your account within 24 hours.\",\n        depositId: deposit._id\n      });\n    } catch (error) {\n      console.error(\"Deposit submission error:\", error);\n      res.status(500).json({ error: \"Failed to submit deposit request\" });\n    }\n  });\n\n  // Get deposit screenshot for admin viewing\n  app.get(\"/deposits/screenshot/:objectPath(*)\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const objectStorageService = new ObjectStorageService();\n      // Don't add /deposits/ prefix since it's already in the objectPath\n      const objectPath = `/${req.params.objectPath}`;\n      const objectFile = await objectStorageService.getDepositScreenshotFile(objectPath);\n      await objectStorageService.downloadObject(objectFile, res);\n    } catch (error) {\n      console.error(\"Error serving deposit screenshot:\", error);\n      if (error instanceof ObjectNotFoundError) {\n        return res.sendStatus(404);\n      }\n      return res.sendStatus(500);\n    }\n  });\n\n  // Admin deposit approval/rejection\n  app.post(\"/api/admin/deposits/:depositId/action\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const { depositId } = req.params;\n      const { action, notes } = req.body;\n      const adminUserId = req.userId;\n\n      if (!action || !['approve', 'reject'].includes(action)) {\n        return res.status(400).json({ error: \"Valid action (approve/reject) is required\" });\n      }\n\n      // Get deposit details\n      const deposit = await storage.getDepositById(depositId);\n      if (!deposit) {\n        return res.status(404).json({ error: \"Deposit not found\" });\n      }\n\n      if (deposit.status !== 'pending') {\n        return res.status(400).json({ error: \"Deposit is not pending approval\" });\n      }\n\n      // Get user details\n      const user = await storage.getUserById(deposit.userId);\n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n\n      const status = action === 'approve' ? 'confirmed' : 'rejected';\n\n      // Update deposit status\n      const updatedDeposit = await storage.updateDepositStatus(depositId, {\n        status,\n        adminNotes: notes?.trim() || '',\n        adminActionAt: new Date(),\n        adminActionBy: adminUserId\n      });\n\n      if (action === 'approve') {\n        // Create investment and transaction records using storage interface\n        try {\n          // Update user's total investment amount\n          await storage.updateUser(deposit.userId, {\n            $inc: { totalInvestmentAmount: deposit.amount }\n          });\n          \n          // Create transaction record\n          await storage.createTransaction({\n            userId: deposit.userId,\n            type: 'deposit',\n            amount: deposit.amount,\n            description: `Deposit confirmed - Investment activated ($${deposit.amount})`,\n            status: 'completed'\n          });\n          \n          console.log(`Investment processed: $${deposit.amount} for user ${deposit.userId}`);\n        } catch (investmentError) {\n          console.error('Error during investment processing:', investmentError);\n        }\n\n        // Send approval email\n        try {\n          const emailService = await import('./emailService.js');\n          const emailInstance = new emailService.default();\n          await emailInstance.sendDepositApprovalEmail(\n            user.email,\n            updatedDeposit,\n            `${user.firstName} ${user.lastName}`\n          );\n        } catch (emailError) {\n          console.error('Error sending approval email:', emailError);\n        }\n      } else {\n        // Send rejection email\n        try {\n          const emailService = await import('./emailService.js');\n          const emailInstance = new emailService.default();\n          await emailInstance.sendDepositRejectionEmail(\n            user.email,\n            updatedDeposit,\n            `${user.firstName} ${user.lastName}`\n          );\n        } catch (emailError) {\n          console.error('Error sending rejection email:', emailError);\n        }\n      }\n\n      res.json({\n        success: true,\n        message: `Deposit ${action}d successfully`,\n        deposit: updatedDeposit\n      });\n    } catch (error) {\n      console.error(\"Deposit error:\", error);\n      res.status(500).json({ error: \"Failed to submit deposit request\" });\n    }\n  });\n\n  // Submit withdrawal request (Step 1 - Initial request)\n  app.post(\"/api/withdrawal\", authenticateToken, async (req, res) => {\n    try {\n      const { amount, method, walletAddress } = req.body;\n      const { Withdrawal, User, OTP } = await import('./database.js');\n      const { emailService } = await import('./emailService.js');\n      \n      // Validation\n      if (!amount || amount < 15) {\n        return res.status(400).json({ error: \"Minimum withdrawal amount is $15\" });\n      }\n\n      if (!method || !walletAddress) {\n        return res.status(400).json({ error: \"Method and wallet address are required\" });\n      }\n\n      const userId = req.userId;\n      const user = await User.findById(userId);\n      \n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n\n      // Get user's available balance from investment summary\n      const { InvestmentService } = await import('./investmentService.js');\n      const summary = await InvestmentService.getUserInvestmentSummary(userId);\n      const availableBalance = summary.walletBalance || 0;\n\n      if (availableBalance < amount) {\n        return res.status(400).json({ error: `Insufficient balance. Available: $${availableBalance.toFixed(2)}` });\n      }\n\n      // Calculate service charge (5%)\n      const serviceCharge = amount * 0.05;\n      const netAmount = amount - serviceCharge;\n\n      // Create withdrawal request\n      const withdrawal = new Withdrawal({\n        userId: userId,\n        requestedAmount: amount,\n        serviceCharge: serviceCharge,\n        amount: netAmount, // Amount after service charge\n        method,\n        walletAddress,\n        status: 'pending_otp'\n      });\n\n      await withdrawal.save();\n\n      // Generate 6-digit OTP\n      const otp = Math.floor(100000 + Math.random() * 900000).toString();\n      const expiresAt = new Date(Date.now() + 10 * 60 * 1000); // 10 minutes\n\n      // Save OTP\n      const otpRecord = new OTP({\n        userId: userId,\n        withdrawalId: withdrawal._id,\n        otp: otp,\n        purpose: 'withdrawal',\n        expiresAt: expiresAt\n      });\n\n      await otpRecord.save();\n\n      // Send OTP via email\n      const emailSent = await emailService.sendEmail(user.email, 'FXBOT - Withdrawal Verification OTP',\n        `\n          <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n            <h2 style=\"color: #1f2937; text-align: center;\">Withdrawal Verification</h2>\n            <p>Dear ${user.firstName} ${user.lastName},</p>\n            <p>You have requested a withdrawal of <strong>$${amount.toFixed(2)}</strong> from your FXBOT account.</p>\n            \n            <div style=\"background: #f3f4f6; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n              <h3 style=\"color: #374151; margin-top: 0;\">Withdrawal Details:</h3>\n              <p><strong>Requested Amount:</strong> $${amount.toFixed(2)}</p>\n              <p><strong>Service Charge (5%):</strong> $${serviceCharge.toFixed(2)}</p>\n              <p><strong>Net Amount:</strong> $${netAmount.toFixed(2)}</p>\n              <p><strong>Method:</strong> ${method}</p>\n              <p><strong>Wallet Address:</strong> ${walletAddress}</p>\n            </div>\n            \n            <div style=\"background: #dbeafe; padding: 20px; border-radius: 8px; text-align: center; margin: 20px 0;\">\n              <h3 style=\"color: #1e40af; margin-top: 0;\">Your OTP Code</h3>\n              <div style=\"font-size: 32px; font-weight: bold; color: #1e40af; letter-spacing: 4px;\">${otp}</div>\n              <p style=\"color: #374151; margin-bottom: 0;\">This OTP is valid for 10 minutes only.</p>\n            </div>\n            \n            <p style=\"color: #6b7280; font-size: 14px;\">\n              If you did not request this withdrawal, please contact our support team immediately.\n            </p>\n            \n            <div style=\"border-top: 1px solid #e5e7eb; padding-top: 20px; margin-top: 30px; text-align: center; color: #6b7280; font-size: 12px;\">\n              <p>FXBOT - Professional Forex Investment Platform</p>\n            </div>\n          </div>\n        `);\n\n      if (!emailSent.success) {\n        // Clean up if email failed\n        await Withdrawal.findByIdAndDelete(withdrawal._id);\n        await OTP.findByIdAndDelete(otpRecord._id);\n        return res.status(500).json({ error: \"Failed to send OTP email. Please try again.\" });\n      }\n\n      res.json({\n        success: true,\n        withdrawalId: withdrawal._id,\n        message: `Withdrawal request created. OTP sent to ${user.email}. Please verify within 10 minutes.`,\n        withdrawalDetails: {\n          requestedAmount: amount,\n          serviceCharge: serviceCharge,\n          netAmount: netAmount,\n          method: method,\n          walletAddress: walletAddress\n        }\n      });\n    } catch (error) {\n      console.error(\"Withdrawal error:\", error);\n      res.status(500).json({ error: \"Failed to submit withdrawal request\" });\n    }\n  });\n\n  // Verify withdrawal OTP (Step 2 - OTP verification)\n  app.post(\"/api/withdrawal/verify-otp\", authenticateToken, async (req, res) => {\n    try {\n      const { withdrawalId, otp } = req.body;\n      const { Withdrawal, User, OTP } = await import('./database.js');\n      \n      if (!withdrawalId || !otp) {\n        return res.status(400).json({ error: \"Withdrawal ID and OTP are required\" });\n      }\n\n      // Find the withdrawal request\n      const withdrawal = await Withdrawal.findById(withdrawalId);\n      if (!withdrawal || withdrawal.userId.toString() !== req.userId) {\n        return res.status(404).json({ error: \"Withdrawal request not found\" });\n      }\n\n      if (withdrawal.status !== 'pending_otp') {\n        return res.status(400).json({ error: \"This withdrawal request is no longer pending OTP verification\" });\n      }\n\n      // Find and verify OTP\n      const otpRecord = await OTP.findOne({\n        withdrawalId: withdrawalId,\n        otp: otp,\n        isUsed: false,\n        expiresAt: { $gt: new Date() }\n      });\n\n      if (!otpRecord) {\n        return res.status(400).json({ error: \"Invalid or expired OTP\" });\n      }\n\n      // Mark OTP as used and update withdrawal status\n      otpRecord.isUsed = true;\n      await otpRecord.save();\n\n      withdrawal.status = 'pending_admin';\n      withdrawal.otpVerified = true;\n      withdrawal.otpVerifiedAt = new Date();\n      withdrawal.updatedAt = new Date();\n      await withdrawal.save();\n\n      res.json({\n        success: true,\n        message: \"OTP verified successfully. Your withdrawal request has been forwarded to admin for approval.\"\n      });\n    } catch (error) {\n      console.error(\"OTP verification error:\", error);\n      res.status(500).json({ error: \"Failed to verify OTP\" });\n    }\n  });\n\n  // Get user withdrawals\n  app.get(\"/api/withdrawals\", authenticateToken, async (req, res) => {\n    try {\n      // For demo, return empty array\n      // In real app, fetch from withdrawals collection\n      res.json([]);\n    } catch (error) {\n      console.error(\"Get withdrawals error:\", error);\n      res.status(500).json({ error: \"Failed to fetch withdrawals\" });\n    }\n  });\n\n  // Admin endpoints\n  app.get(\"/api/admin/users\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const users = await storage.getUsers();\n      res.json(users);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to get users\" });\n    }\n  });\n\n  app.get(\"/api/admin/deposits\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const deposits = await storage.getAllDeposits();\n      res.json(deposits);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to get deposits\" });\n    }\n  });\n\n  app.post(\"/api/admin/deposits/:id/approve\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const deposit = await storage.updateDepositStatus(req.params.id, 'confirmed');\n      res.json({ success: true, deposit });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to approve deposit\" });\n    }\n  });\n\n  app.post(\"/api/admin/deposits/:id/reject\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const deposit = await storage.updateDepositStatus(req.params.id, 'rejected');\n      res.json({ success: true, deposit });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to reject deposit\" });\n    }\n  });\n\n  app.get(\"/api/admin/user-history/:searchTerm\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const { searchTerm } = req.params;\n      \n      // Search by email or mobile number\n      let user = await storage.getUserByEmail(searchTerm);\n      if (!user) {\n        user = await storage.getUserByMobile(searchTerm);\n      }\n      \n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n\n      // Add mock income data for now (to be replaced with real data later)\n      const userHistory = {\n        ...user.toObject(),\n        fsIncome: 0, // Will be calculated from actual FS income system\n        smartLineIncome: 0, // Will be calculated from smart line system\n        driIncome: 0 // Will be calculated from DRI system\n      };\n\n      res.json(userHistory);\n    } catch (error) {\n      console.error('Error fetching user history:', error);\n      res.status(500).json({ error: \"Failed to fetch user history\" });\n    }\n  });\n\n  app.get(\"/api/admin/contacts\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const contacts = await storage.getContacts();\n      res.json(contacts);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to get contacts\" });\n    }\n  });\n\n  app.get(\"/api/admin/subscribers\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const subscribers = await storage.getSubscribers();\n      res.json(subscribers);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to get subscribers\" });\n    }\n  });\n\n  // Admin endpoint to get withdrawal requests\n  app.get(\"/api/admin/withdrawals\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const { Withdrawal, User } = await import('./database.js');\n      \n      const withdrawals = await Withdrawal.find({ status: { $in: ['pending_admin', 'approved', 'rejected'] } })\n        .populate('userId', 'firstName lastName email ownSponsorId')\n        .populate('adminActionBy', 'firstName lastName email')\n        .sort({ createdAt: -1 });\n\n      const formattedWithdrawals = withdrawals.map(withdrawal => ({\n        _id: withdrawal._id,\n        user: {\n          name: `${withdrawal.userId.firstName} ${withdrawal.userId.lastName}`,\n          email: withdrawal.userId.email,\n          sponsorId: withdrawal.userId.ownSponsorId\n        },\n        requestedAmount: withdrawal.requestedAmount,\n        serviceCharge: withdrawal.serviceCharge,\n        netAmount: withdrawal.amount,\n        method: withdrawal.method,\n        walletAddress: withdrawal.walletAddress,\n        status: withdrawal.status,\n        otpVerified: withdrawal.otpVerified,\n        otpVerifiedAt: withdrawal.otpVerifiedAt,\n        createdAt: withdrawal.createdAt,\n        updatedAt: withdrawal.updatedAt,\n        adminNotes: withdrawal.adminNotes,\n        adminActionAt: withdrawal.adminActionAt,\n        adminActionBy: withdrawal.adminActionBy ? {\n          name: `${withdrawal.adminActionBy.firstName} ${withdrawal.adminActionBy.lastName}`,\n          email: withdrawal.adminActionBy.email\n        } : null\n      }));\n\n      res.json(formattedWithdrawals);\n    } catch (error) {\n      console.error(\"Error fetching withdrawals:\", error);\n      res.status(500).json({ error: \"Failed to fetch withdrawal requests\" });\n    }\n  });\n\n  // Admin endpoint to approve/reject withdrawal\n  app.post(\"/api/admin/withdrawals/:id/action\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const { action, notes } = req.body; // action: 'approve' or 'reject'\n      const withdrawalId = req.params.id;\n      const { Withdrawal, User } = await import('./database.js');\n      const { emailService } = await import('./emailService.js');\n      \n      if (!['approve', 'reject'].includes(action)) {\n        return res.status(400).json({ error: \"Action must be 'approve' or 'reject'\" });\n      }\n\n      const withdrawal = await Withdrawal.findById(withdrawalId).populate('userId');\n      if (!withdrawal) {\n        return res.status(404).json({ error: \"Withdrawal request not found\" });\n      }\n\n      if (withdrawal.status !== 'pending_admin') {\n        return res.status(400).json({ error: \"This withdrawal request is not pending admin approval\" });\n      }\n\n      // Update withdrawal status\n      const newStatus = action === 'approve' ? 'approved' : 'rejected';\n      withdrawal.status = newStatus;\n      withdrawal.adminNotes = notes || '';\n      withdrawal.adminActionAt = new Date();\n      withdrawal.adminActionBy = req.userId;\n      withdrawal.updatedAt = new Date();\n\n      await withdrawal.save();\n\n      // Send notification email to user\n      const user = withdrawal.userId;\n      const emailSubject = action === 'approve' \n        ? 'FXBOT - Withdrawal Request Approved'\n        : 'FXBOT - Withdrawal Request Rejected';\n\n      const emailContent = action === 'approve' \n        ? `\n          <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n            <h2 style=\"color: #10b981; text-align: center;\">Withdrawal Approved</h2>\n            <p>Dear ${user.firstName} ${user.lastName},</p>\n            <p>Great news! Your withdrawal request has been <strong style=\"color: #10b981;\">APPROVED</strong>.</p>\n            \n            <div style=\"background: #f3f4f6; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n              <h3 style=\"color: #374151; margin-top: 0;\">Withdrawal Details:</h3>\n              <p><strong>Requested Amount:</strong> $${withdrawal.requestedAmount.toFixed(2)}</p>\n              <p><strong>Service Charge (5%):</strong> $${withdrawal.serviceCharge.toFixed(2)}</p>\n              <p><strong>Net Amount to be Sent:</strong> $${withdrawal.amount.toFixed(2)}</p>\n              <p><strong>Method:</strong> ${withdrawal.method}</p>\n              <p><strong>Wallet Address:</strong> ${withdrawal.walletAddress}</p>\n              <p><strong>Approval Date:</strong> ${new Date().toLocaleDateString()}</p>\n            </div>\n            \n            ${notes ? `\n            <div style=\"background: #dbeafe; padding: 15px; border-radius: 8px; margin: 20px 0;\">\n              <h4 style=\"color: #1e40af; margin-top: 0;\">Admin Notes:</h4>\n              <p style=\"margin-bottom: 0;\">${notes}</p>\n            </div>\n            ` : ''}\n            \n            <p style=\"color: #10b981; font-weight: 600;\">\n              Your funds will be processed within 24-48 hours.\n            </p>\n            \n            <div style=\"border-top: 1px solid #e5e7eb; padding-top: 20px; margin-top: 30px; text-align: center; color: #6b7280; font-size: 12px;\">\n              <p>FXBOT - Professional Forex Investment Platform</p>\n            </div>\n          </div>\n        `\n        : `\n          <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n            <h2 style=\"color: #ef4444; text-align: center;\">Withdrawal Request Rejected</h2>\n            <p>Dear ${user.firstName} ${user.lastName},</p>\n            <p>We regret to inform you that your withdrawal request has been <strong style=\"color: #ef4444;\">REJECTED</strong>.</p>\n            \n            <div style=\"background: #f3f4f6; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n              <h3 style=\"color: #374151; margin-top: 0;\">Withdrawal Details:</h3>\n              <p><strong>Requested Amount:</strong> $${withdrawal.requestedAmount.toFixed(2)}</p>\n              <p><strong>Method:</strong> ${withdrawal.method}</p>\n              <p><strong>Wallet Address:</strong> ${withdrawal.walletAddress}</p>\n              <p><strong>Rejection Date:</strong> ${new Date().toLocaleDateString()}</p>\n            </div>\n            \n            ${notes ? `\n            <div style=\"background: #fee2e2; padding: 15px; border-radius: 8px; margin: 20px 0;\">\n              <h4 style=\"color: #dc2626; margin-top: 0;\">Reason for Rejection:</h4>\n              <p style=\"margin-bottom: 0;\">${notes}</p>\n            </div>\n            ` : ''}\n            \n            <p style=\"color: #6b7280;\">\n              If you have any questions about this decision, please contact our support team.\n            </p>\n            \n            <div style=\"border-top: 1px solid #e5e7eb; padding-top: 20px; margin-top: 30px; text-align: center; color: #6b7280; font-size: 12px;\">\n              <p>FXBOT - Professional Forex Investment Platform</p>\n            </div>\n          </div>\n        `;\n\n      await emailService.sendEmail(user.email, emailSubject, emailContent);\n\n      res.json({\n        success: true,\n        message: `Withdrawal request ${action}d successfully`,\n        withdrawal: {\n          _id: withdrawal._id,\n          status: withdrawal.status,\n          adminNotes: withdrawal.adminNotes,\n          adminActionAt: withdrawal.adminActionAt\n        }\n      });\n    } catch (error) {\n      console.error(\"Error processing withdrawal action:\", error);\n      res.status(500).json({ error: \"Failed to process withdrawal action\" });\n    }\n  });\n\n  // Email testing endpoint for admin\n  app.post(\"/api/admin/test-email\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const { email } = req.body;\n      \n      if (!email) {\n        return res.status(400).json({ error: \"Email address is required\" });\n      }\n\n      const { emailService } = await import('./emailService.js');\n      const result = await emailService.sendTestEmail(email);\n      \n      if (result.success) {\n        res.json({ \n          success: true, \n          message: \"Test email sent successfully\",\n          messageId: result.messageId \n        });\n      } else {\n        res.status(500).json({ \n          success: false, \n          error: \"Failed to send test email: \" + result.error \n        });\n      }\n    } catch (error) {\n      console.error('Email test error:', error);\n      res.status(500).json({ error: \"Email test failed\" });\n    }\n  });\n\n  // Password Reset Routes\n  app.post(\"/api/auth/forgot-password\", async (req, res) => {\n    try {\n      const { email } = req.body;\n      \n      if (!email) {\n        return res.status(400).json({ error: \"Email is required\" });\n      }\n\n      // Check if user exists\n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        // Don't reveal if user exists or not for security\n        return res.json({ \n          success: true, \n          message: \"If an account with that email exists, a password reset link has been sent.\" \n        });\n      }\n\n      // Generate reset token\n      const resetToken = await storage.generateResetToken();\n      \n      // Save token to user\n      await storage.setResetToken(email, resetToken);\n\n      // Send password reset email\n      try {\n        const { emailService } = await import('./emailService.js');\n        await emailService.sendPasswordResetEmail(\n          user.email, \n          resetToken, \n          `${user.firstName} ${user.lastName}`\n        );\n        console.log('Password reset email sent to:', user.email);\n      } catch (emailError) {\n        console.error('Failed to send password reset email:', emailError);\n        // Don't fail the request if email fails\n      }\n\n      res.json({ \n        success: true, \n        message: \"If an account with that email exists, a password reset link has been sent to your email address.\" \n      });\n    } catch (error) {\n      console.error('Forgot password error:', error);\n      res.status(500).json({ error: \"Password reset failed\" });\n    }\n  });\n\n  app.post(\"/api/auth/reset-password\", async (req, res) => {\n    try {\n      const { token, newPassword } = req.body;\n      \n      if (!token || !newPassword) {\n        return res.status(400).json({ error: \"Token and new password are required\" });\n      }\n\n      if (newPassword.length < 8) {\n        return res.status(400).json({ error: \"Password must be at least 8 characters long\" });\n      }\n\n      // Verify reset token\n      const user = await storage.getUserByResetToken(token);\n      if (!user) {\n        return res.status(400).json({ error: \"Invalid or expired reset token\" });\n      }\n\n      // Update password and clear reset token\n      await storage.updatePassword(user._id, newPassword);\n\n      res.json({ \n        success: true, \n        message: \"Password has been successfully reset. You can now login with your new password.\" \n      });\n    } catch (error) {\n      console.error('Reset password error:', error);\n      res.status(500).json({ error: \"Password reset failed\" });\n    }\n  });\n\n  // DAS Program API Routes\n  app.post(\"/api/das/enroll\", authenticateToken, async (req, res) => {\n    try {\n      const { userId } = req.body;\n      const result = await DasService.enrollUserInDas(userId);\n      \n      if (result) {\n        res.json({ success: true, message: \"Successfully enrolled in DAS program\" });\n      } else {\n        res.status(400).json({ error: \"Failed to enroll in DAS program\" });\n      }\n    } catch (error) {\n      console.error(\"DAS enrollment error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/das/countdown/:userId\", authenticateToken, async (req, res) => {\n    try {\n      const { userId } = req.params;\n      \n      // Check if the authenticated user is requesting their own data or is admin\n      if (req.userId !== userId && req.user?.role !== 'admin') {\n        return res.status(403).json({ error: \"Access denied\" });\n      }\n      \n      const countdownData = await DasService.getDasCountdown(userId);\n      res.json(countdownData);\n    } catch (error) {\n      console.error(\"DAS countdown error:\", error);\n      res.status(500).json({ error: \"Failed to fetch countdown data\" });\n    }\n  });\n\n  app.post(\"/api/das/complete-task\", authenticateToken, async (req, res) => {\n    try {\n      const { userId, taskNumber } = req.body;\n      const result = await DasService.updateTaskCompletion(userId, taskNumber);\n      \n      if (result) {\n        res.json({ success: true, message: `Task ${taskNumber} completed successfully` });\n      } else {\n        res.status(400).json({ error: \"Task requirements not met or already completed\" });\n      }\n    } catch (error) {\n      console.error(\"DAS task completion error:\", error);\n      res.status(500).json({ error: \"Failed to complete task\" });\n    }\n  });\n\n  app.post(\"/api/das/add-investment\", authenticateToken, async (req, res) => {\n    try {\n      const { userId, amount, packageType } = req.body;\n      const result = await DasService.addInvestment(userId, amount, packageType);\n      \n      if (result) {\n        res.json({ success: true, message: \"Investment added successfully\" });\n      } else {\n        res.status(400).json({ error: \"Failed to add investment\" });\n      }\n    } catch (error) {\n      console.error(\"DAS investment error:\", error);\n      res.status(500).json({ error: \"Failed to add investment\" });\n    }\n  });\n\n  // KYC Document Upload Routes\n  app.post('/api/kyc/upload-url', authenticateToken, async (req, res) => {\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n      res.json({ uploadURL });\n    } catch (error) {\n      console.error('Error getting KYC upload URL:', error);\n      res.status(500).json({ error: 'Failed to get upload URL' });\n    }\n  });\n\n  app.post('/api/kyc/submit', authenticateToken, async (req, res) => {\n    try {\n      const { documentUrl, fileName, fileType } = req.body;\n      const userId = req.userId;\n\n      if (!documentUrl || !fileName) {\n        return res.status(400).json({ error: 'Document URL and file name are required' });\n      }\n\n      const objectStorageService = new ObjectStorageService();\n      const normalizedPath = objectStorageService.normalizeObjectEntityPath(documentUrl);\n\n      // Submit KYC document using storage method\n      const updatedUser = await storage.submitKycDocument(userId, normalizedPath, fileName, fileType);\n      \n      if (!updatedUser) {\n        return res.status(404).json({ error: 'User not found' });\n      }\n\n      res.json({ \n        message: 'KYC document submitted successfully',\n        status: 'pending',\n        submittedAt: updatedUser.kycSubmittedAt\n      });\n    } catch (error) {\n      console.error('Error submitting KYC document:', error);\n      res.status(500).json({ error: 'Failed to submit KYC document' });\n    }\n  });\n\n  // KYC Document Download Route (for admin viewing)\n  app.get('/api/kyc/document/:userId', authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const user = await storage.getUserById(userId);\n      \n      if (!user || !user.kycDocumentUrl) {\n        return res.status(404).json({ error: 'KYC document not found' });\n      }\n\n      const objectStorageService = new ObjectStorageService();\n      const objectFile = await objectStorageService.getObjectEntityFile(user.kycDocumentUrl);\n      await objectStorageService.downloadObject(objectFile, res);\n    } catch (error) {\n      console.error('Error downloading KYC document:', error);\n      if (error instanceof ObjectNotFoundError) {\n        return res.status(404).json({ error: 'KYC document not found' });\n      }\n      res.status(500).json({ error: 'Failed to download KYC document' });\n    }\n  });\n\n  // Get all KYC submissions for admin\n  app.get('/api/admin/kyc', authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const kycSubmissions = await storage.getKycSubmissions();\n      res.json(kycSubmissions);\n    } catch (error) {\n      console.error('Error fetching KYC submissions:', error);\n      res.status(500).json({ error: 'Failed to fetch KYC submissions' });\n    }\n  });\n\n  // KYC Document Approval/Rejection Routes\n  app.post('/api/admin/kyc/:userId/approve', authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const { userId } = req.params;\n      await storage.updateKycStatus(userId, 'approved', req.userId);\n      res.json({ message: 'KYC document approved successfully' });\n    } catch (error) {\n      console.error('Error approving KYC document:', error);\n      res.status(500).json({ error: 'Failed to approve KYC document' });\n    }\n  });\n\n  app.post('/api/admin/kyc/:userId/reject', authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const { reason } = req.body;\n      \n      await storage.updateKycStatus(userId, 'rejected', req.userId, reason || 'Document not acceptable');\n      res.json({ message: 'KYC document rejected successfully' });\n    } catch (error) {\n      console.error('Error rejecting KYC document:', error);\n      res.status(500).json({ error: 'Failed to reject KYC document' });\n    }\n  });\n\n  return server;\n}","size_bytes":44232},"server/storage.js":{"content":"import connectDB, { User, Contact, Newsletter, Deposit } from './database.js';\nimport bcrypt from 'bcryptjs';\n\n// MongoDB Storage implementation\nclass MongoStorage {\n  constructor() {\n    // Initialize database connection\n    connectDB();\n  }\n\n  // Contact form submissions\n  async createContact(contactData) {\n    const contact = new Contact(contactData);\n    await contact.save();\n    return contact;\n  }\n\n  async getContacts() {\n    return await Contact.find().sort({ createdAt: -1 });\n  }\n\n  // Newsletter subscriptions\n  async createSubscriber(email) {\n    const subscriber = new Newsletter({ email });\n    await subscriber.save();\n    return subscriber;\n  }\n\n  async getSubscribers() {\n    return await Newsletter.find().sort({ createdAt: -1 });\n  }\n\n  // Generate unique sponsor ID\n  async generateUniqueSponsorId() {\n    let sponsorId;\n    let isUnique = false;\n    \n    while (!isUnique) {\n      // Generate 6-digit random number\n      const randomNumber = Math.floor(100000 + Math.random() * 900000);\n      sponsorId = `FX${randomNumber}`;\n      \n      // Check if this ID already exists\n      const existing = await User.findOne({ ownSponsorId: sponsorId });\n      if (!existing) {\n        isUnique = true;\n      }\n    }\n    \n    return sponsorId;\n  }\n\n  // Find sponsor by their sponsor ID\n  async findSponsor(sponsorId) {\n    return await User.findOne({ ownSponsorId: sponsorId });\n  }\n\n  // User management\n  async createUser(userData) {\n    // Hash password before saving\n    const saltRounds = 10;\n    const hashedPassword = await bcrypt.hash(userData.password, saltRounds);\n    \n    // Generate unique sponsor ID for this user\n    const ownSponsorId = await this.generateUniqueSponsorId();\n    \n    // Find the sponsor (parent) if sponsorId is provided\n    let parent = null;\n    if (userData.sponsorId) {\n      parent = await this.findSponsor(userData.sponsorId);\n    }\n    \n    const user = new User({\n      ...userData,\n      password: hashedPassword,\n      ownSponsorId,\n      parent: parent ? parent._id : null\n    });\n    \n    await user.save();\n    \n    // Update parent's children array and referral count\n    if (parent) {\n      await User.findByIdAndUpdate(parent._id, {\n        $push: { children: user._id },\n        $inc: { referralCount: 1 }\n      });\n    }\n\n    // Update multi-level referral counts\n    const { referralService } = await import('./referralService.js');\n    await referralService.updateReferralCounts(user._id);\n    \n    // Return user without password\n    const { password, ...userWithoutPassword } = user.toObject();\n    return userWithoutPassword;\n  }\n\n  async getUserByEmail(email) {\n    return await User.findOne({ email: email.toLowerCase() });\n  }\n\n  async getUserByMobile(mobile) {\n    return await User.findOne({ mobile: mobile });\n  }\n\n  async getUserById(id) {\n    return await User.findById(id).select('-password');\n  }\n\n  async updateUser(userId, updates) {\n    return await User.findByIdAndUpdate(userId, { ...updates, updatedAt: new Date() }, { new: true });\n  }\n\n  async getUsers() {\n    return await User.find().select('-password').sort({ createdAt: -1 });\n  }\n\n\n\n  async verifyPassword(plainPassword, hashedPassword) {\n    return await bcrypt.compare(plainPassword, hashedPassword);\n  }\n\n  async getUserReferrals(userId) {\n    const user = await User.findById(userId).populate('children', 'firstName lastName email createdAt');\n    return user ? user.children : [];\n  }\n\n  // Deposit methods\n  async createDeposit(depositData) {\n    try {\n      const deposit = new Deposit(depositData);\n      await deposit.save();\n      return deposit;\n    } catch (error) {\n      console.error('Error creating deposit:', error);\n      throw error;\n    }\n  }\n\n  async getDepositsByUserId(userId) {\n    try {\n      return await Deposit.find({ userId }).sort({ createdAt: -1 });\n    } catch (error) {\n      console.error('Error fetching deposits:', error);\n      throw error;\n    }\n  }\n\n  async getAllDeposits() {\n    try {\n      return await Deposit.find().populate('userId', 'email firstName lastName').sort({ createdAt: -1 });\n    } catch (error) {\n      console.error('Error fetching all deposits:', error);\n      throw error;\n    }\n  }\n\n  async getDepositById(depositId) {\n    try {\n      return await Deposit.findById(depositId).populate('userId', 'email firstName lastName');\n    } catch (error) {\n      console.error('Error fetching deposit by ID:', error);\n      throw error;\n    }\n  }\n\n  async updateDepositStatus(depositId, updates) {\n    try {\n      return await Deposit.findByIdAndUpdate(depositId, { ...updates, updatedAt: new Date() }, { new: true });\n    } catch (error) {\n      console.error('Error updating deposit status:', error);\n      throw error;\n    }\n  }\n\n  // Password Reset Functions\n  async generateResetToken() {\n    // Generate secure random token\n    const crypto = await import('crypto');\n    return crypto.default.randomBytes(32).toString('hex');\n  }\n\n  async setResetToken(email, token) {\n    const expiry = new Date(Date.now() + 60 * 60 * 1000); // 1 hour from now\n    return await User.findOneAndUpdate(\n      { email: email.toLowerCase() },\n      {\n        resetToken: token,\n        resetTokenExpiry: expiry\n      },\n      { new: true }\n    );\n  }\n\n  async getUserByResetToken(token) {\n    return await User.findOne({\n      resetToken: token,\n      resetTokenExpiry: { $gt: new Date() } // Token not expired\n    });\n  }\n\n  async clearResetToken(userId) {\n    return await User.findByIdAndUpdate(userId, {\n      resetToken: null,\n      resetTokenExpiry: null\n    });\n  }\n\n  async updatePassword(userId, newPassword) {\n    const saltRounds = 10;\n    const hashedPassword = await bcrypt.hash(newPassword, saltRounds);\n    \n    return await User.findByIdAndUpdate(userId, {\n      password: hashedPassword,\n      resetToken: null,\n      resetTokenExpiry: null\n    });\n  }\n\n  // KYC Management Functions\n  async submitKycDocument(userId, documentUrl, fileName, fileType) {\n    try {\n      return await User.findByIdAndUpdate(userId, {\n        kycStatus: 'pending',\n        kycDocumentUrl: documentUrl,\n        kycFileName: fileName,\n        kycFileType: fileType,\n        kycSubmittedAt: new Date()\n      }, { new: true });\n    } catch (error) {\n      console.error('Error submitting KYC document:', error);\n      throw error;\n    }\n  }\n\n  async getKycSubmissions() {\n    try {\n      return await User.find({\n        kycStatus: { $exists: true, $ne: null }\n      }).select('firstName lastName email kycStatus kycDocumentUrl kycFileName kycSubmittedAt kycApprovedAt kycRejectedAt').sort({ kycSubmittedAt: -1 });\n    } catch (error) {\n      console.error('Error fetching KYC submissions:', error);\n      throw error;\n    }\n  }\n\n  async updateKycStatus(userId, status, adminId, rejectionReason = null) {\n    try {\n      const updateData = {\n        kycStatus: status\n      };\n\n      if (status === 'approved') {\n        updateData.kycApprovedAt = new Date();\n        updateData.kycApprovedBy = adminId;\n      } else if (status === 'rejected') {\n        updateData.kycRejectedAt = new Date();\n        updateData.kycRejectedBy = adminId;\n        if (rejectionReason) {\n          updateData.kycRejectionReason = rejectionReason;\n        }\n      }\n\n      return await User.findByIdAndUpdate(userId, updateData, { new: true });\n    } catch (error) {\n      console.error('Error updating KYC status:', error);\n      throw error;\n    }\n  }\n\n  // Transaction Management Functions\n  async createTransaction(transactionData) {\n    try {\n      const { Transaction } = await import('./database.js');\n      const transaction = new Transaction(transactionData);\n      await transaction.save();\n      return transaction;\n    } catch (error) {\n      console.error('Error creating transaction:', error);\n      throw error;\n    }\n  }\n\n  async getUserTransactions(userId, page = 1, limit = 50) {\n    try {\n      const { Transaction } = await import('./database.js');\n      const skip = (page - 1) * limit;\n      \n      const transactions = await Transaction.find({ userId })\n        .sort({ createdAt: -1 })\n        .skip(skip)\n        .limit(limit)\n        .lean();\n\n      const total = await Transaction.countDocuments({ userId });\n\n      return {\n        transactions,\n        total,\n        page,\n        totalPages: Math.ceil(total / limit)\n      };\n    } catch (error) {\n      console.error('Error fetching user transactions:', error);\n      throw error;\n    }\n  }\n}\n\nlet storage = null;\n\nexport function getStorage() {\n  if (!storage) {\n    storage = new MongoStorage();\n  }\n  return storage;\n}","size_bytes":8557},"server/vite.js":{"content":"import express from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { nanoid } from \"nanoid\";\nimport viteConfig from \"../vite.config.js\";\n\nconst viteLogger = createLogger();\n\nexport function log(message, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app, server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        path.dirname(new URL(import.meta.url).pathname),\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.jsx\"`,\n        `src=\"/src/main.jsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app) {\n  const distPath = path.resolve(path.dirname(new URL(import.meta.url).pathname), \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}","size_bytes":2215},"shared/schema.js":{"content":"import { z } from \"zod\";\n\n// Contact form schema\nexport const contactSchema = z.object({\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  email: z.string().email(\"Valid email is required\"),\n  subject: z.string().min(1, \"Subject is required\"),\n  message: z.string().min(10, \"Message must be at least 10 characters\")\n});\n\n// Newsletter subscription schema\nexport const newsletterSchema = z.object({\n  email: z.string().email(\"Valid email is required\")\n});\n\n// User login schema\nexport const loginSchema = z.object({\n  email: z.string().email(\"Valid email is required\"),\n  password: z.string().min(1, \"Password is required\")\n});\n\n// User registration schema (for server validation)\nexport const userRegistrationSchema = z.object({\n  sponsorId: z.string().min(1, \"Sponsor ID is required\"),\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  mobile: z.string().regex(/^\\d{10}$/, \"Mobile number must be exactly 10 digits\"),\n  email: z.string().email(\"Valid email is required\"),\n  password: z.string().min(8, \"Password must be at least 8 characters\")\n});\n\n// Forgot password schema\nexport const forgotPasswordSchema = z.object({\n  email: z.string().email(\"Valid email is required\")\n});\n\n// Investment package schema\nexport const investmentPackageSchema = z.object({\n  id: z.number(),\n  name: z.string(),\n  type: z.enum(['fixed', 'affiliate', 'direct', 'salary']),\n  minimum: z.number().optional(),\n  return: z.string().optional(),\n  commission: z.string().optional(),\n  duration: z.string().optional()\n});","size_bytes":1630},"client/src/App.jsx":{"content":"import { Switch, Route } from \"wouter\";\nimport Home from \"./pages/Home\";\nimport Login from \"./pages/Login\";\nimport Register from \"./pages/Register\";\nimport ForgotPassword from \"./pages/ForgotPassword\";\nimport ResetPassword from \"./pages/ResetPassword\";\nimport ModernDashboard from \"./pages/ModernDashboard\";\nimport Profile from \"./pages/Profile\";\nimport Fund from \"./pages/Fund\";\nimport ReferralTree from \"./pages/ReferralTree\";\nimport Deposit from \"./pages/Deposit\";\nimport Withdrawal from \"./pages/Withdrawal\";\nimport AdminDashboard from \"./pages/AdminDashboard\";\nimport TransactionHistory from \"./pages/TransactionHistory\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Switch>\n        <Route path=\"/\" component={Home} />\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/register\" component={Register} />\n        <Route path=\"/forgot-password\" component={ForgotPassword} />\n        <Route path=\"/reset-password\" component={ResetPassword} />\n        <Route path=\"/dashboard\" component={ModernDashboard} />\n        <Route path=\"/profile\" component={Profile} />\n        <Route path=\"/fund\" component={Fund} />\n        <Route path=\"/referral-tree\" component={ReferralTree} />\n        <Route path=\"/deposit\" component={Deposit} />\n        <Route path=\"/withdrawal\" component={Withdrawal} />\n        <Route path=\"/transactions\" component={TransactionHistory} />\n        <Route path=\"/admin\" component={AdminDashboard} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","size_bytes":1512},"client/src/index.css":{"content":"@import \"tailwindcss\";\n@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n\n:root {\n  --color-dark-bg: #0a0a0a;\n  --color-dark-card: #1a1a1a;\n  --color-gold: #ffd700;\n  --color-gold-light: #ffed4a;\n  --color-gray-50: #f9fafb;\n  --color-gray-100: #f3f4f6;\n  --color-gray-200: #e5e7eb;\n  --color-gray-300: #d1d5db;\n  --color-gray-400: #9ca3af;\n  --color-gray-500: #6b7280;\n  --color-gray-600: #4b5563;\n  --color-gray-700: #374151;\n  --color-gray-800: #1f2937;\n  --color-gray-900: #111827;\n  --color-slate-50: #f8fafc;\n  --color-slate-100: #f1f5f9;\n  --color-slate-200: #e2e8f0;\n  --color-slate-300: #cbd5e1;\n  --color-slate-400: #94a3b8;\n  --color-slate-500: #64748b;\n  --color-slate-600: #475569;\n  --color-slate-700: #334155;\n  --color-slate-800: #1e293b;\n  --color-slate-900: #0f172a;\n  --color-blue-50: #eff6ff;\n  --color-blue-100: #dbeafe;\n  --color-blue-200: #bfdbfe;\n  --color-blue-300: #93c5fd;\n  --color-blue-400: #60a5fa;\n  --color-blue-500: #3b82f6;\n  --color-blue-600: #2563eb;\n  --color-blue-700: #1d4ed8;\n  --color-blue-800: #1e40af;\n  --color-blue-900: #1e3a8a;\n  --color-green-50: #f0fdf4;\n  --color-green-100: #dcfce7;\n  --color-green-200: #bbf7d0;\n  --color-green-300: #86efac;\n  --color-green-400: #4ade80;\n  --color-green-500: #22c55e;\n  --color-green-600: #16a34a;\n  --color-green-700: #15803d;\n  --color-green-800: #166534;\n  --color-green-900: #14532d;\n  --color-emerald-50: #ecfdf5;\n  --color-emerald-100: #d1fae5;\n  --color-emerald-200: #a7f3d0;\n  --color-emerald-300: #6ee7b7;\n  --color-emerald-400: #34d399;\n  --color-emerald-500: #10b981;\n  --color-emerald-600: #059669;\n  --color-emerald-700: #047857;\n  --color-emerald-800: #065f46;\n  --color-emerald-900: #064e3b;\n  --color-red-50: #fef2f2;\n  --color-red-100: #fee2e2;\n  --color-red-200: #fecaca;\n  --color-red-300: #fca5a5;\n  --color-red-400: #f87171;\n  --color-red-500: #ef4444;\n  --color-red-600: #dc2626;\n  --color-red-700: #b91c1c;\n  --color-red-800: #991b1b;\n  --color-red-900: #7f1d1d;\n  --color-yellow-50: #fefce8;\n  --color-yellow-100: #fef3c7;\n  --color-yellow-200: #fde68a;\n  --color-yellow-300: #fcd34d;\n  --color-yellow-400: #fbbf24;\n  --color-yellow-500: #f59e0b;\n  --color-yellow-600: #d97706;\n  --color-yellow-700: #b45309;\n  --color-yellow-800: #92400e;\n  --color-yellow-900: #78350f;\n  --color-purple-50: #faf5ff;\n  --color-purple-100: #f3e8ff;\n  --color-purple-200: #e9d5ff;\n  --color-purple-300: #d8b4fe;\n  --color-purple-400: #c084fc;\n  --color-purple-500: #a855f7;\n  --color-purple-600: #9333ea;\n  --color-purple-700: #7c3aed;\n  --color-purple-800: #6b21a8;\n  --color-purple-900: #581c87;\n}\n\nbody {\n  font-family: 'Inter', sans-serif;\n  margin: 0;\n  padding: 0;\n  background-color: var(--color-dark-bg);\n  color: white;\n}\n\n* {\n  box-sizing: border-box;\n}\n\n/* Custom utility classes */\n.bg-dark-bg { background-color: var(--color-dark-bg); }\n.bg-dark-card { background-color: var(--color-dark-card); }\n.text-gold { color: var(--color-gold); }\n.text-gold-light { color: var(--color-gold-light); }\n.border-gold { border-color: var(--color-gold); }\n.font-inter { font-family: 'Inter', sans-serif; }\n\n/* Layout Utilities */\n.container {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 0 1rem;\n}\n\n.section {\n  padding: 80px 0;\n}\n\n.grid {\n  display: grid;\n}\n\n.flex {\n  display: flex;\n}\n\n.items-center {\n  align-items: center;\n}\n\n.justify-center {\n  justify-content: center;\n}\n\n.justify-between {\n  justify-content: space-between;\n}\n\n.text-center {\n  text-align: center;\n}\n\n.relative {\n  position: relative;\n}\n\n.absolute {\n  position: absolute;\n}\n\n.fixed {\n  position: fixed;\n}\n\n.w-full {\n  width: 100%;\n}\n\n.h-full {\n  height: 100%;\n}\n\n.min-h-screen {\n  min-height: 100vh;\n}\n\n.overflow-hidden {\n  overflow: hidden;\n}\n\n.z-50 {\n  z-index: 50;\n}\n\n/* Color Utilities */\n.text-primary {\n  color: white;\n}\n\n.text-secondary {\n  color: #d1d5db;\n}\n\n.bg-dark {\n  background-color: var(--color-dark-bg);\n}\n\n.bg-card {\n  background-color: var(--color-dark-card);\n}\n\n.border-b {\n  border-bottom: 1px solid rgba(255, 215, 0, 0.2);\n}\n\n.border-t {\n  border-top: 1px solid rgba(255, 215, 0, 0.2);\n}\n\n/* Typography */\n.text-xl {\n  font-size: 1.25rem;\n  line-height: 1.75rem;\n}\n\n.text-5xl {\n  font-size: 3rem;\n  line-height: 1;\n}\n\n.font-bold {\n  font-weight: 700;\n}\n\n.font-semibold {\n  font-weight: 600;\n}\n\n/* Spacing */\n.mb-4 {\n  margin-bottom: 1rem;\n}\n\n.mb-6 {\n  margin-bottom: 1.5rem;\n}\n\n.mb-8 {\n  margin-bottom: 2rem;\n}\n\n.px-2 {\n  padding-left: 0.5rem;\n  padding-right: 0.5rem;\n}\n\n.py-4 {\n  padding-top: 1rem;\n  padding-bottom: 1rem;\n}\n\n.gap-4 {\n  gap: 1rem;\n}\n\n.gap-8 {\n  gap: 2rem;\n}\n\n/* Buttons */\n.btn {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0.75rem 1.5rem;\n  font-size: 0.875rem;\n  font-weight: 600;\n  text-decoration: none;\n  border-radius: 0.5rem;\n  transition: all 0.2s ease;\n  border: none;\n  cursor: pointer;\n}\n\n.btn-primary {\n  background: linear-gradient(135deg, var(--color-gold), #ffa000);\n  color: #000;\n  border: 1px solid var(--color-gold);\n}\n\n.btn-primary:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 10px 25px rgba(255, 215, 0, 0.3);\n}\n\n.btn-secondary {\n  background: transparent;\n  color: var(--color-gold);\n  border: 1px solid var(--color-gold);\n}\n\n.btn-secondary:hover {\n  background: var(--color-gold);\n  color: #000;\n}\n\n.view-plans-btn:hover {\n  background: var(--color-gold) !important;\n  color: #000 !important;\n}\n\n.btn-lg {\n  padding: 1rem 2rem;\n  font-size: 1rem;\n}\n\n.gradient-gold {\n  background: linear-gradient(135deg, var(--color-gold), #ffa000);\n}\n\n/* Navigation */\n.nav-link {\n  background: none;\n  border: none;\n  color: #d1d5db;\n  cursor: pointer;\n  padding: 0.5rem 0;\n  text-decoration: none;\n}\n\n.nav-link:hover {\n  color: var(--color-gold);\n}\n\n/* Hero Section */\n.hero-grid {\n  grid-template-columns: 1fr;\n  gap: 3rem;\n}\n\n.hero-title {\n  font-size: 3rem;\n  line-height: 1.1;\n  margin-bottom: 1.5rem;\n}\n\n.hero-subtitle {\n  font-size: 1.25rem;\n  color: #d1d5db;\n  margin-bottom: 2rem;\n  max-width: 600px;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.hero-buttons {\n  display: flex;\n  flex-direction: row;\n  gap: 1rem;\n  align-items: center;\n  justify-content: center;\n  flex-wrap: wrap;\n}\n\n/* Animations */\n.animate-fadeIn {\n  animation: fadeIn 1s ease-out;\n}\n\n.animate-slideIn {\n  animation: slideIn 1s ease-out;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(30px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes slideIn {\n  from {\n    opacity: 0;\n    transform: translateX(30px);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n/* Responsive Grid */\n.grid-cols-1 {\n  grid-template-columns: repeat(1, minmax(0, 1fr));\n}\n\n.grid-cols-2 {\n  grid-template-columns: repeat(2, minmax(0, 1fr));\n}\n\n.grid-cols-3 {\n  grid-template-columns: repeat(3, minmax(0, 1fr));\n}\n\n/* Responsive Design */\n@media (min-width: 768px) {\n  .desktop-nav {\n    display: flex !important;\n  }\n  \n  .mobile-menu-btn {\n    display: none;\n  }\n  \n  .auth-buttons {\n    display: flex !important;\n  }\n  \n  .hero-grid {\n    grid-template-columns: 1fr 1fr;\n    align-items: center;\n  }\n  \n  .hero-buttons {\n    flex-direction: row;\n    justify-content: center;\n    flex-wrap: nowrap;\n  }\n  \n  .hero-title {\n    font-size: 4rem;\n  }\n  \n  .md\\\\:grid-cols-2 {\n    grid-template-columns: repeat(2, minmax(0, 1fr));\n  }\n  \n  .md\\\\:grid-cols-3 {\n    grid-template-columns: repeat(3, minmax(0, 1fr));\n  }\n}\n\n@media (max-width: 767px) {\n  .desktop-nav {\n    display: none;\n  }\n  \n  .auth-buttons {\n    display: none;\n  }\n  \n  .mobile-menu-btn {\n    display: block;\n  }\n  \n  .mobile-menu {\n    padding: 1rem;\n    background-color: var(--color-dark-card);\n    border-top: 1px solid rgba(255, 215, 0, 0.2);\n  }\n  \n  .hero-title {\n    font-size: 2.5rem;\n  }\n  \n  .hero-subtitle {\n    font-size: 1.1rem;\n  }\n}\n\n@media (min-width: 1024px) {\n  .hero-title {\n    font-size: 5rem;\n  }\n  \n  .lg\\\\:grid-cols-3 {\n    grid-template-columns: repeat(3, minmax(0, 1fr));\n  }\n  \n  .lg\\\\:grid-cols-4 {\n    grid-template-columns: repeat(4, minmax(0, 1fr));\n  }\n}\n\n/* Additional Component Styles */\n.bg-secondary {\n  background-color: #1a1a1a;\n}\n\n.text-4xl {\n  font-size: 2.25rem;\n  line-height: 2.5rem;\n}\n\n.mb-12 {\n  margin-bottom: 3rem;\n}\n\n.mb-16 {\n  margin-bottom: 4rem;\n}\n\n.block {\n  display: block;\n}\n\n.flex-col {\n  flex-direction: column;\n}\n\n.transition-colors {\n  transition-property: color;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 150ms;\n}\n\n.transition {\n  transition-property: all;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 150ms;\n}\n\n/* Card Components */\n.card {\n  background-color: var(--color-dark-card);\n  border: 1px solid rgba(255, 215, 0, 0.1);\n  border-radius: 1rem;\n  padding: 2rem;\n  transition: all 0.3s ease;\n}\n\n.card:hover {\n  border-color: rgba(255, 215, 0, 0.3);\n  transform: translateY(-5px);\n}\n\n.hover-lift:hover {\n  transform: translateY(-5px);\n}\n\n/* Benefits Section */\n.benefits-grid {\n  grid-template-columns: 1fr;\n}\n\n@media (min-width: 768px) {\n  .benefits-grid {\n    grid-template-columns: repeat(3, 1fr);\n  }\n}\n\n/* Package Components */\n.package-card {\n  background-color: var(--color-dark-card);\n  border: 2px solid rgba(255, 215, 0, 0.2);\n  border-radius: 1.5rem;\n  padding: 2rem;\n  transition: all 0.3s ease;\n}\n\n.package-card:hover {\n  border-color: rgba(255, 215, 0, 0.5);\n  transform: translateY(-8px);\n  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);\n}\n\n.package-grid {\n  grid-template-columns: 1fr;\n}\n\n@media (min-width: 768px) {\n  .package-grid {\n    grid-template-columns: repeat(2, 1fr);\n  }\n}\n\n@media (min-width: 1024px) {\n  .package-grid {\n    grid-template-columns: repeat(2, 1fr);\n  }\n}\n\n/* Additional Typography */\n.text-2xl {\n  font-size: 1.5rem;\n  line-height: 2rem;\n}\n\n.text-3xl {\n  font-size: 1.875rem;\n  line-height: 2.25rem;\n}\n\n.text-lg {\n  font-size: 1.125rem;\n  line-height: 1.75rem;\n}\n\n.text-sm {\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n}\n\n.text-xs {\n  font-size: 0.75rem;\n  line-height: 1rem;\n}\n\n/* Additional Spacing */\n.p-4 {\n  padding: 1rem;\n}\n\n.p-6 {\n  padding: 1.5rem;\n}\n\n.p-8 {\n  padding: 2rem;\n}\n\n.m-4 {\n  margin: 1rem;\n}\n\n.mx-auto {\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.max-w-4xl {\n  max-width: 56rem;\n}\n\n/* Additional Layout */\n.rounded-xl {\n  border-radius: 0.75rem;\n}\n\n.rounded-lg {\n  border-radius: 0.5rem;\n}\n\n.shadow-sm {\n  box-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05);\n}\n\n.border {\n  border-width: 1px;\n}\n\n/* Icons and Visual Elements */\n.fas {\n  font-family: 'Font Awesome 5 Free';\n  font-weight: 900;\n}\n\n/* Fix color references */\n:root {\n  --primary-gold: var(--color-gold);\n  --hover-gold: #ffa000;\n  --dark-bg: var(--color-dark-bg);\n}\n\n/* Additional width utilities */\n.w-full {\n  width: 100%;\n}","size_bytes":10799},"client/src/main.jsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport App from \"./App\";\nimport queryClient from \"./lib/queryClient\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")).render(\n  <QueryClientProvider client={queryClient}>\n    <App />\n  </QueryClientProvider>\n);\n","size_bytes":338},"client/src/components/AboutSection.jsx":{"content":"export default function AboutSection() {\n  const teamMembers = [\n    {\n      name: \"Michael Marcus\",\n      position: \"Founder & CEO\",\n      description: \"With over 10 years in the Forex trading and investment management industry, Michael brings deep expertise in high-frequency trading, portfolio structuring, and global financial compliance.\",\n      image: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=400&h=400\"\n    },\n    {\n      name: \"Lucy Baldwin\",\n      position: \"Chief Operations Officer\",\n      description: \"An operations specialist with extensive experience in financial services administration, KYC compliance, and client relations. She oversees daily business processes.\",\n      image: \"https://images.unsplash.com/photo-1573496359142-b8d87734a5a2?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=400&h=400\"\n    },\n    {\n      name: \"Richards Dennis\",\n      position: \"Head of Trading & Risk Management\",\n      description: \"Leads the trading team, specialising in market analytics, algorithmic strategy design, and risk control protocols, ensuring capital protection objectives.\",\n      image: \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=400&h=400\"\n    }\n  ];\n\n  const tradingApproach = [\n    \"Multi-strategy portfolios combining technical analysis, fundamental insights, and AI-driven algorithmic systems.\",\n    \"Strict capital preservation principles, limiting exposure per trade to a small percentage of total managed funds.\",\n    \"Diversified currency pair selection, reducing concentration risk and enhancing ROI potential.\",\n    \"Automated stop loss and take profit mechanisms to protect client capital in volatile market conditions.\",\n    \"Daily and weekly risk assessments conducted by our trading and compliance team to adapt strategies proactively.\"\n  ];\n\n  return (\n    <section id=\"about\" className=\"section bg-secondary\">\n      <div className=\"container\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-4xl font-bold mb-4\">About <span className=\"text-gold\">FXBOT</span></h2>\n          <p className=\"text-xl text-secondary\">Professional Forex Investment Solutions Provider</p>\n        </div>\n\n        {/* Company Introduction */}\n        <div className=\"grid grid-cols-1 gap-8 items-center mb-16 about-intro\">\n          <div className=\"animate-slideIn\">\n            <h3 className=\"text-3xl font-bold mb-6\">Company Introduction</h3>\n            <p className=\"text-secondary mb-6\" style={{ lineHeight: '1.6' }}>\n              FXBOT is a globally oriented Forex investment and trading solutions provider, dedicated to delivering consistent returns to clients through professionally managed strategies. We combine advanced market analytics, automated algorithmic systems, and experienced fund management to achieve superior risk-adjusted returns in the Forex markets.\n            </p>\n            <p className=\"text-secondary\" style={{ lineHeight: '1.6' }}>\n              Established with the vision to simplify Forex investing for individuals and institutions alike, we prioritise transparency, professional execution, and robust risk management in every trade and investment decision.\n            </p>\n          </div>\n          <div className=\"animate-fadeIn\">\n            <img \n              src=\"https://images.unsplash.com/photo-1497366216548-37526070297c?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=80\" \n              alt=\"Modern professional office environment\" \n              className=\"rounded shadow-lg w-full\"\n            />\n          </div>\n        </div>\n\n        {/* Mission & Vision */}\n        <div className=\"grid md:grid-cols-2 gap-8 mb-20\">\n          <div className=\"bg-dark-card p-8 rounded-2xl border border-gold/20 animate-fadeIn\">\n            <h3 className=\"text-2xl font-bold text-gold mb-4\">Our Mission</h3>\n            <p className=\"text-gray-300 leading-relaxed\">\n              To empower investors globally by providing secure, innovative, and performance-driven Forex investment solutions while upholding the highest standards of transparency and client trust.\n            </p>\n          </div>\n          <div className=\"bg-dark-card p-8 rounded-2xl border border-blue-custom/20 animate-fadeIn\" style={{ animationDelay: '0.2s' }}>\n            <h3 className=\"text-2xl font-bold text-blue-custom mb-4\">Our Vision</h3>\n            <p className=\"text-gray-300 leading-relaxed\">\n              To be recognised as a leading trusted Forex investment management company, known for consistent results, ethical practices, and technological excellence in global financial markets.\n            </p>\n          </div>\n        </div>\n\n        {/* Trading Approach */}\n        <div className=\"bg-dark-card p-8 rounded-2xl border border-gold/20 mb-20 animate-fadeIn\">\n          <h3 className=\"text-3xl font-bold text-gold mb-6\">Trading & Risk Management Approach</h3>\n          <div className=\"grid md:grid-cols-2 gap-8\">\n            <div className=\"space-y-4\">\n              {tradingApproach.slice(0, 3).map((approach, index) => (\n                <div key={index} className=\"flex items-start space-x-3\">\n                  <div className=\"w-2 h-2 bg-gold rounded-full mt-2 flex-shrink-0\"></div>\n                  <p className=\"text-gray-300\">{approach}</p>\n                </div>\n              ))}\n            </div>\n            <div className=\"space-y-4\">\n              {tradingApproach.slice(3).map((approach, index) => (\n                <div key={index} className=\"flex items-start space-x-3\">\n                  <div className=\"w-2 h-2 bg-gold rounded-full mt-2 flex-shrink-0\"></div>\n                  <p className=\"text-gray-300\">{approach}</p>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* Leadership Team */}\n        <div>\n          <h3 className=\"text-3xl font-bold text-center mb-12\">Leadership <span className=\"text-gold\">Team</span></h3>\n          <div className=\"grid lg:grid-cols-3 gap-8\">\n            {teamMembers.map((member, index) => (\n              <div \n                key={index}\n                className=\"bg-dark-card p-8 rounded-2xl border border-gold/10 hover:border-gold/30 transition-colors text-center animate-fadeIn\"\n                style={{ animationDelay: `${index * 0.2}s` }}\n              >\n                <img \n                  src={member.image} \n                  alt={`${member.name} - ${member.position}`} \n                  className=\"w-32 h-32 rounded-full mx-auto mb-6 object-cover\"\n                />\n                <h4 className=\"text-xl font-bold mb-2\">{member.name}</h4>\n                <p className=\"text-gold font-semibold mb-4\">{member.position}</p>\n                <p className=\"text-gray-300 text-sm leading-relaxed\">{member.description}</p>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Licensing */}\n        <div className=\"mt-20 bg-dark-card p-8 rounded-2xl border border-gold/20 text-center animate-fadeIn\">\n          <h3 className=\"text-2xl font-bold text-gold mb-4\">Licensing & Registration</h3>\n          <p className=\"text-gray-300 leading-relaxed\">\n            FXBOT is incorporated under St. Vincent & the Grenadines, with registration number HE-543752. We operate as an international investment solutions provider, complying with local and international business regulations, anti-money laundering standards, and KYC policies to maintain client security and operational integrity.\n          </p>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":7800},"client/src/components/AffiliateCalculator.jsx":{"content":"import { useState, useEffect } from 'react';\n\nexport default function AffiliateCalculator() {\n  const [referralCount, setReferralCount] = useState(10);\n  const [averageInvestment, setAverageInvestment] = useState(1000);\n  const [commissionType, setCommissionType] = useState('dri');\n  const [projectedCommission, setProjectedCommission] = useState(600);\n\n  const commissionTypes = {\n    dri: { name: \"DRI Income (6%)\", rate: 0.06 },\n    level1: { name: \"SmartLine Level 1 (1.5%)\", rate: 0.015 },\n    level2: { name: \"SmartLine Level 2 (1.0%)\", rate: 0.01 },\n    level3: { name: \"SmartLine Level 3 (0.75%)\", rate: 0.0075 },\n    level4: { name: \"SmartLine Level 4 (0.50%)\", rate: 0.005 },\n    level5: { name: \"SmartLine Level 5 (0.25%)\", rate: 0.0025 }\n  };\n\n  const calculateCommission = () => {\n    const selectedType = commissionTypes[commissionType];\n    if (selectedType) {\n      const commission = referralCount * averageInvestment * selectedType.rate;\n      setProjectedCommission(commission);\n    }\n  };\n\n  useEffect(() => {\n    calculateCommission();\n  }, [referralCount, averageInvestment, commissionType]);\n\n  return (\n    <div className=\"card p-8\" style={{ borderColor: 'rgba(255, 215, 0, 0.2)' }}>\n      <h3 className=\"text-2xl font-bold text-gold mb-6 text-center\">Affiliate Income Calculator</h3>\n      <div className=\"grid grid-cols-1 gap-8 affiliate-grid\">\n        <div className=\"form-section\" style={{ display: 'flex', flexDirection: 'column', gap: '1rem' }}>\n          <div>\n            <label className=\"form-label\">Number of Direct Referrals</label>\n            <input \n              type=\"number\" \n              value={referralCount}\n              onChange={(e) => setReferralCount(Number(e.target.value) || 0)}\n              className=\"form-input\"\n            />\n          </div>\n          <div>\n            <label className=\"form-label\">Average Investment Amount ($)</label>\n            <input \n              type=\"number\" \n              value={averageInvestment}\n              onChange={(e) => setAverageInvestment(Number(e.target.value) || 0)}\n              className=\"form-input\"\n            />\n          </div>\n          <div>\n            <label className=\"form-label\">Commission Type</label>\n            <select \n              value={commissionType}\n              onChange={(e) => setCommissionType(e.target.value)}\n              className=\"form-input\"\n            >\n              {Object.entries(commissionTypes).map(([key, type]) => (\n                <option key={key} value={key}>\n                  {type.name}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n        <div className=\"flex items-center justify-center\">\n          <div className=\"card p-6 text-center\" style={{ \n            backgroundColor: 'var(--card-secondary)',\n            borderColor: 'rgba(255, 215, 0, 0.2)'\n          }}>\n            <div className=\"text-sm text-secondary mb-2\">Projected Commission</div>\n            <div className=\"text-4xl font-bold text-gold mb-2\">\n              ${projectedCommission.toFixed(2)}\n            </div>\n            <div className=\"text-sm text-secondary mb-4\">\n              Based on {referralCount} referrals × ${averageInvestment} × {(commissionTypes[commissionType].rate * 100).toFixed(2)}%\n            </div>\n            <button \n              onClick={calculateCommission}\n              className=\"btn\"\n              style={{\n                padding: '0.5rem 1.5rem',\n                background: 'linear-gradient(135deg, var(--primary-gold), var(--hover-gold))',\n                color: 'var(--dark-bg)'\n              }}\n            >\n              Calculate\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3737},"client/src/components/BenefitsSection.jsx":{"content":"import { Shield, TrendingUp, Users } from 'lucide-react';\n\nexport default function BenefitsSection() {\n  const benefits = [\n    {\n      icon: Shield,\n      title: \"Safe & Transparent\",\n      description: \"All investments backed by professional trading strategies with full transparency and regular reporting.\"\n    },\n    {\n      icon: TrendingUp,\n      title: \"Daily Profit Tracking\",\n      description: \"Real-time monitoring of your investments with detailed analytics and performance metrics.\"\n    },\n    {\n      icon: Users,\n      title: \"Professional Team\",\n      description: \"Experienced trading professionals with over 10 years of forex market expertise.\"\n    }\n  ];\n\n  return (\n    <section className=\"section bg-secondary\">\n      <div className=\"container\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-4xl font-bold mb-4\">Why Choose <span className=\"text-gold\">FXBOT</span>?</h2>\n          <p className=\"text-xl text-secondary\">Professional trading solutions with complete transparency</p>\n        </div>\n        \n        <div className=\"grid grid-cols-1 gap-8 benefits-grid\">\n          {benefits.map((benefit, index) => {\n            const IconComponent = benefit.icon;\n            return (\n              <div \n                key={index}\n                className=\"card text-center p-8 animate-fadeIn hover-lift\"\n                style={{ animationDelay: `${index * 0.2}s` }}\n              >\n                <div className=\"benefit-icon\" style={{\n                  width: '4rem',\n                  height: '4rem',\n                  backgroundColor: 'rgba(255, 215, 0, 0.1)',\n                  borderRadius: '50%',\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  margin: '0 auto 1.5rem'\n                }}>\n                  <IconComponent style={{ width: '2rem', height: '2rem', color: 'var(--primary-gold)' }} />\n                </div>\n                <h3 className=\"text-xl font-bold mb-4\">{benefit.title}</h3>\n                <p className=\"text-secondary\">{benefit.description}</p>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2214},"client/src/components/ContactSection.jsx":{"content":"import { useState } from 'react';\nimport { Mail, Phone, Clock, MapPin } from 'lucide-react';\n\nexport default function ContactSection() {\n  const [formData, setFormData] = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    subject: 'General Inquiry',\n    message: ''\n  });\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // Handle form submission here\n    console.log('Form submitted:', formData);\n    alert('Thank you for your message! We will get back to you soon.');\n    setFormData({\n      firstName: '',\n      lastName: '',\n      email: '',\n      subject: 'General Inquiry',\n      message: ''\n    });\n  };\n\n  const contactInfo = [\n    {\n      icon: Mail,\n      title: \"Email\",\n      details: \"support@fxbot.co.in\"\n    },\n    //{\n     // icon: Phone,\n     // title: \"Phone\",\n     // details: \"+1 (555) 123-4567\"\n   // },\n    {\n      icon: Clock,\n      title: \"Business Hours\",\n      details: \"Mon - Fri: 9:00 AM - 6:00 PM IST\"\n    },\n    {\n      icon: MapPin,\n      title: \"Address\",\n      details: \"Bay View Tower, Business Bay, Dubai, UAE\"\n    }\n  ];\n\n  return (\n    <section id=\"contact\" className=\"section bg-secondary\">\n      <div className=\"container\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-4xl font-bold mb-4\">Contact <span className=\"text-gold\">Us</span></h2>\n          <p className=\"text-xl text-secondary\">Get in touch with our team for any inquiries</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 gap-8 contact-grid\">\n          <div className=\"animate-slideIn\">\n            <h3 className=\"text-2xl font-bold mb-8\">Get In Touch</h3>\n            <div className=\"contact-info\" style={{ display: 'flex', flexDirection: 'column', gap: '1.5rem' }}>\n              {contactInfo.map((info, index) => {\n                const IconComponent = info.icon;\n                return (\n                  <div key={index} className=\"flex items-center\" style={{ gap: '1rem' }}>\n                    <div className=\"contact-icon-wrapper\" style={{\n                      width: '3rem',\n                      height: '3rem',\n                      backgroundColor: 'rgba(255, 215, 0, 0.1)',\n                      borderRadius: 'var(--border-radius)',\n                      display: 'flex',\n                      alignItems: 'center',\n                      justifyContent: 'center'\n                    }}>\n                      <IconComponent style={{ width: '1.5rem', height: '1.5rem', color: 'var(--primary-gold)' }} />\n                    </div>\n                    <div>\n                      <h4 className=\"font-semibold\">{info.title}</h4>\n                      <p className=\"text-secondary\">{info.details}</p>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n\n          <div className=\"card p-8 animate-fadeIn\" style={{ borderColor: 'rgba(255, 215, 0, 0.2)' }}>\n            <form onSubmit={handleSubmit} className=\"contact-form\" style={{ display: 'flex', flexDirection: 'column', gap: '1.5rem' }}>\n              <div className=\"grid grid-cols-1 gap-6 form-row\">\n                <div>\n                  <label className=\"form-label\">First Name</label>\n                  <input \n                    type=\"text\" \n                    name=\"firstName\"\n                    value={formData.firstName}\n                    onChange={handleInputChange}\n                    required\n                    className=\"form-input\"\n                  />\n                </div>\n                <div>\n                  <label className=\"form-label\">Last Name</label>\n                  <input \n                    type=\"text\" \n                    name=\"lastName\"\n                    value={formData.lastName}\n                    onChange={handleInputChange}\n                    required\n                    className=\"form-input\"\n                  />\n                </div>\n              </div>\n              <div>\n                <label className=\"form-label\">Email</label>\n                <input \n                  type=\"email\" \n                  name=\"email\"\n                  value={formData.email}\n                  onChange={handleInputChange}\n                  required\n                  className=\"form-input\"\n                />\n              </div>\n              <div>\n                <label className=\"form-label\">Subject</label>\n                <select \n                  name=\"subject\"\n                  value={formData.subject}\n                  onChange={handleInputChange}\n                  className=\"form-input\"\n                >\n                  <option value=\"General Inquiry\">General Inquiry</option>\n                  <option value=\"Investment Support\">Investment Support</option>\n                  <option value=\"Technical Support\">Technical Support</option>\n                  <option value=\"Partnership\">Partnership</option>\n                </select>\n              </div>\n              <div>\n                <label className=\"form-label\">Message</label>\n                <textarea \n                  rows=\"4\" \n                  name=\"message\"\n                  value={formData.message}\n                  onChange={handleInputChange}\n                  required\n                  className=\"form-input\"\n                  style={{ resize: 'vertical' }}\n                ></textarea>\n              </div>\n              <button \n                type=\"submit\" \n                className=\"btn w-full font-semibold\"\n                style={{\n                  background: 'linear-gradient(135deg, var(--primary-gold), var(--hover-gold))',\n                  color: 'var(--dark-bg)'\n                }}\n              >\n                Send Message\n              </button>\n            </form>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":5947},"client/src/components/FAQSection.jsx":{"content":"import { useState } from 'react';\nimport { ChevronDown, ChevronUp } from 'lucide-react';\n\nexport default function FAQSection() {\n  const [openFAQ, setOpenFAQ] = useState(null);\n\n  const faqs = [\n    {\n      question: \"How are returns generated?\",\n      answer: \"Returns are generated through Forex trading activities managed by our professional trading team using a combination of technical analysis, market strategies, and algorithmic systems to achieve consistent performance.\"\n    },\n    {\n      question: \"Is my capital guaranteed?\",\n      answer: \"While certain plans offer fixed returns backed by company reserves and trading profits, all investments carry some level of market risk. Please read each plan's terms and disclaimers carefully before investing.\"\n    },\n    {\n      question: \"How do withdrawals work?\",\n      answer: \"Withdrawals can be requested directly through your dashboard. Depending on your chosen plan, profits are either paid out monthly or as a lumpsum at maturity. Processing time is generally within 24-48 business hours.\"\n    },\n    {\n      question: \"What are the risks involved?\",\n      answer: \"Forex trading involves market risks including partial or total loss of capital in high-risk plans. Even fixed-return plans carry operational and execution risks. We recommend investing amounts within your risk tolerance and understanding each plan's structure fully.\"\n    },\n    {\n      question: \"What is the re-top-up rule after 2x completion?\",\n      answer: \"When a user's investment package reaches 2x returns (full payout completed), they must re-top-up their account with a minimum of $250 to continue receiving future ROI payouts and stay eligible for referral rewards and level income.\"\n    },\n    {\n      question: \"Are packages locked for a minimum period?\",\n      answer: \"Yes, all investment packages are locked for a minimum period of 6 months to ensure optimal trading strategies and consistent returns for our investors.\"\n    }\n  ];\n\n  const toggleFAQ = (index) => {\n    setOpenFAQ(openFAQ === index ? null : index);\n  };\n\n  return (\n    <section id=\"faq\" className=\"section\">\n      <div className=\"container\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-4xl font-bold mb-4\">Frequently Asked <span className=\"text-gold\">Questions</span></h2>\n          <p className=\"text-xl text-secondary\">Get answers to common questions about FXBOT</p>\n        </div>\n\n        <div className=\"faq-container\" style={{ maxWidth: '64rem', margin: '0 auto', display: 'flex', flexDirection: 'column', gap: '1rem' }}>\n          {faqs.map((faq, index) => (\n            <div \n              key={index}\n              className=\"card border animate-fadeIn\"\n              style={{ \n                animationDelay: `${index * 0.1}s`,\n                borderColor: 'rgba(255, 215, 0, 0.1)' \n              }}\n            >\n              <button \n                className=\"faq-button w-full p-6 text-left flex justify-between items-center transition-colors\"\n                onClick={() => toggleFAQ(index)}\n                style={{\n                  background: 'none',\n                  border: 'none',\n                  color: 'inherit'\n                }}\n              >\n                <h3 className=\"text-lg font-semibold\">{faq.question}</h3>\n                {openFAQ === index ? (\n                  <ChevronUp style={{ width: '1.25rem', height: '1.25rem', color: 'var(--primary-gold)' }} />\n                ) : (\n                  <ChevronDown style={{ width: '1.25rem', height: '1.25rem', color: 'var(--primary-gold)' }} />\n                )}\n              </button>\n              {openFAQ === index && (\n                <div className=\"p-6 pt-0 border-t\" style={{ borderTopColor: '#555' }}>\n                  <p className=\"text-secondary\">{faq.answer}</p>\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3933},"client/src/components/Footer.jsx":{"content":"import { Facebook, Twitter, Linkedin, Send } from 'lucide-react';\n\nexport default function Footer() {\n  const scrollToSection = (sectionId) => {\n    const element = document.getElementById(sectionId);\n    if (element) {\n      element.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  const quickLinks = [\n    { name: \"Home\", section: \"home\" },\n    { name: \"About Us\", section: \"about\" },\n    { name: \"Investment Packages\", section: \"packages\" },\n    { name: \"How It Works\", section: \"how-it-works\" },\n    { name: \"FAQs\", section: \"faq\" },\n    { name: \"Contact\", section: \"contact\" }\n  ];\n\n  const legalLinks = [\n    { name: \"Terms & Conditions\", href: \"#terms\" },\n    { name: \"Privacy Policy\", href: \"#privacy\" },\n    { name: \"Risk Disclaimer\", href: \"#risk\" },\n    { name: \"AML & KYC Policy\", href: \"#aml\" },\n    { name: \"Refund Policy\", href: \"#refund\" }\n  ];\n\n  const socialLinks = [\n    { icon: Facebook, href: \"#\" },\n    { icon: Twitter, href: \"#\" },\n    { icon: Linkedin, href: \"#\" },\n    { icon: Send, href: \"#\" }\n  ];\n\n  return (\n    <footer className=\"bg-dark border-t py-16\" style={{ borderTopColor: 'rgba(255, 215, 0, 0.2)' }}>\n      <div className=\"container\">\n        <div className=\"grid grid-cols-1 gap-8 footer-grid\">\n          <div className=\"footer-main\">\n            <div className=\"flex items-center mb-6\">\n              <img src=\"/logo.png\" alt=\"FXBOT Logo\" style={{ height: '2rem', width: 'auto', marginRight: '0.75rem' }} />\n              <span className=\"text-2xl font-bold text-gold\">FXBOT</span>\n            </div>\n            <p className=\"text-secondary mb-6\" style={{ lineHeight: '1.6' }}>\n              Professional Forex investment solutions provider dedicated to delivering consistent returns through advanced market analytics and experienced fund management.\n            </p>\n            <div className=\"flex\" style={{ gap: '1rem' }}>\n              {socialLinks.map((social, index) => {\n                const IconComponent = social.icon;\n                return (\n                  <a \n                    key={index}\n                    href={social.href} \n                    className=\"social-link rounded transition-colors\"\n                    style={{\n                      width: '2.5rem',\n                      height: '2.5rem',\n                      backgroundColor: 'rgba(255, 215, 0, 0.1)',\n                      display: 'flex',\n                      alignItems: 'center',\n                      justifyContent: 'center',\n                      color: 'var(--primary-gold)'\n                    }}\n                  >\n                    <IconComponent className=\"w-5 h-5\" />\n                  </a>\n                );\n              })}\n            </div>\n          </div>\n\n          <div>\n            <h3 className=\"text-lg font-bold mb-6\">Quick Links</h3>\n            <ul className=\"space-y-3\">\n              {quickLinks.map((link, index) => (\n                <li key={index}>\n                  <button \n                    onClick={() => scrollToSection(link.section)}\n                    className=\"text-gray-300 hover:text-gold transition-colors\"\n                  >\n                    {link.name}\n                  </button>\n                </li>\n              ))}\n            </ul>\n          </div>\n\n          <div>\n            <h3 className=\"text-lg font-bold mb-6\">Legal</h3>\n            <ul className=\"space-y-3\">\n              {legalLinks.map((link, index) => (\n                <li key={index}>\n                  <a \n                    href={link.href} \n                    className=\"text-gray-300 hover:text-gold transition-colors\"\n                  >\n                    {link.name}\n                  </a>\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n\n        <div className=\"border-t border-gray-600 mt-12 pt-8 text-center\">\n          <p className=\"text-gray-400\">\n            © 2024 FXBOT. All rights reserved. | Registered in St. Vincent & the Grenadines (HE-543752)\n          </p>\n          <p className=\"text-sm text-gray-500 mt-2\">\n            Risk Warning: Trading Forex involves substantial risk and may not be suitable for all investors.\n          </p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":4216},"client/src/components/HeroSection.jsx":{"content":"import ROICalculator from './ROICalculator';\n\nexport default function HeroSection() {\n  const scrollToPackages = () => {\n    const element = document.getElementById('packages');\n    if (element) {\n      element.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  return (\n    <section id=\"home\" className=\"section min-h-screen flex items-center relative overflow-hidden\" style={{ paddingTop: '4rem' }}>\n      {/* Background Image */}\n      <div className=\"absolute\" style={{ \n        top: 0, left: 0, right: 0, bottom: 0, \n        opacity: 0.2, zIndex: 1 \n      }}>\n        <img \n          src=\"https://images.unsplash.com/photo-1611974789855-9c2a0a7236a3?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=80\" \n          alt=\"Financial charts and trading screens\" \n          className=\"w-full h-full\"\n          style={{ width: '100%', height: '100%', objectFit: 'cover' }}\n        />\n      </div>\n      \n      <div className=\"container relative\" style={{ zIndex: 10 }}>\n        <div className=\"grid grid-cols-1 gap-8 items-center hero-grid\">\n          <div className=\"text-center hero-text animate-fadeIn\">\n            <h1 className=\"text-5xl font-bold mb-6 hero-title\">\n              <span className=\"text-primary\">Grow Your</span>\n              <span className=\"text-gold block\">Wealth</span>\n              <span className=\"text-primary\">Not Just Your Hopes</span>\n            </h1>\n            <p className=\"text-xl text-secondary mb-8 hero-subtitle\">\n              Choose a Forex Package with <span className=\"text-gold font-semibold\">FXBOT</span> That Works While You Sleep — With Full Transparency & Weekly Profits.\n            </p>\n            <div className=\"hero-buttons\">\n              <button \n                onClick={scrollToPackages}\n                className=\"btn btn-primary btn-lg gradient-gold font-semibold\"\n              >\n                Start Investing\n              </button>\n              <button \n                onClick={scrollToPackages}\n                className=\"btn btn-secondary btn-lg font-semibold view-plans-btn\"\n                style={{ borderColor: 'var(--primary-gold)', color: 'var(--primary-gold)' }}\n              >\n                View Plans\n              </button>\n            </div>\n          </div>\n          \n          <div className=\"flex justify-center animate-slideIn\">\n            <ROICalculator />\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2472},"client/src/components/HowItWorks.jsx":{"content":"export default function HowItWorks() {\n  const steps = [\n    {\n      number: 1,\n      title: \"Register & KYC\",\n      description: \"Sign up on our platform and complete your KYC verification to activate your account securely.\"\n    },\n    {\n      number: 2,\n      title: \"Choose Plan\",\n      description: \"Select from our range of tailored Forex investment packages based on your goals and risk profile.\"\n    },\n    {\n      number: 3,\n      title: \"Fund Account\",\n      description: \"Deposit your investment amount using our secure payment gateways with multiple options.\"\n    },\n    {\n      number: 4,\n      title: \"Receive ROI\",\n      description: \"Start earning returns as per your chosen plan with fixed ROI or profit sharing distributions.\"\n    },\n    {\n      number: 5,\n      title: \"Withdraw\",\n      description: \"Withdraw your profits or matured funds directly to your bank account as per your plan's policy.\"\n    }\n  ];\n\n  return (\n    <section id=\"how-it-works\" className=\"section\">\n      <div className=\"container\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-4xl font-bold mb-4\">How It <span className=\"text-gold\">Works</span></h2>\n          <p className=\"text-xl text-secondary\">Simple steps to start your Forex investment journey</p>\n        </div>\n        \n        <div className=\"grid grid-cols-1 gap-8 how-it-works-grid\">\n          {steps.map((step, index) => (\n            <div \n              key={index}\n              className=\"text-center relative animate-fadeIn step-card\"\n              style={{ animationDelay: `${index * 0.2}s` }}\n            >\n              <div className=\"step-number gradient-gold rounded-full flex items-center justify-center mx-auto mb-6 text-2xl font-bold\" style={{\n                width: '5rem',\n                height: '5rem',\n                color: 'var(--dark-bg)'\n              }}>\n                {step.number}\n              </div>\n              <h3 className=\"text-xl font-bold mb-4\">{step.title}</h3>\n              <p className=\"text-secondary\">{step.description}</p>\n              \n              {/* Connector line (hidden on mobile, shown on desktop except for last step) */}\n              {index < steps.length - 1 && (\n                <div className=\"step-connector\" style={{\n                  display: 'none',\n                  position: 'absolute',\n                  top: '2.5rem',\n                  right: '-1rem',\n                  width: '2rem',\n                  height: '2px',\n                  backgroundColor: 'var(--primary-gold)',\n                  transform: 'translateX(100%)'\n                }}></div>\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2703},"client/src/components/InvestmentPackages.jsx":{"content":"import AffiliateCalculator from './AffiliateCalculator';\n\nexport default function InvestmentPackages() {\n  const packages = [\n    {\n      name: \"FS Income (FixSix)\",\n      badge: \"6% Monthly\",\n      color: \"gold\",\n      details: {\n        minimum: \"$250\",\n        return: \"6% Monthly until 2x\",\n        duration: \"~17 months\",\n        payout: \"Monthly\"\n      },\n      description: \"Earn a fixed 6% monthly return on your invested capital until your investment doubles (2x). Backed by company reserves and trading profits.\",\n      buttonClass: \"btn btn-primary gradient-gold\"\n    },\n    {\n      name: \"SmartLine Income\",\n      badge: \"5 Levels\",\n      color: \"blue-custom\",\n      levels: [\n        { level: 1, percentage: \"1.5%\" },\n        { level: 2, percentage: \"1.0%\" },\n        { level: 3, percentage: \"0.75%\" },\n        { level: 4, percentage: \"0.50%\" },\n        { level: 5, percentage: \"0.25%\" }\n      ],\n      description: \"Multi-level affiliate income distribution plan to reward partners for expanding our investor community across 5 levels.\",\n      buttonClass: \"btn btn-primary\"\n    },\n    {\n      name: \"DRI Income\",\n      badge: \"6% Direct\",\n      color: \"green-400\",\n      details: {\n        commission: \"6% Direct Referral\",\n        frequency: \"Every Investment\",\n        cap: \"Unlimited\"\n      },\n      example: \"$1,000 referral = $60 commission\",\n      description: \"Earn 6% commission on every investment made by your direct referrals. Commission credited for each new investment, no limit on referrals.\",\n      buttonClass: \"btn btn-primary\"\n    },\n    {\n      name: \"DAS Income\",\n      badge: \"Monthly Salary\",\n      color: \"purple-400\",\n      tiers: [\n        { name: \"Tier 1\", amount: \"$100/month\", requirements: \"5 referrals, $10K volume, 30 days\" },\n        { name: \"Tier 2\", amount: \"$300/month\", requirements: \"10 referrals, $20K volume, 60 days\" },\n        { name: \"Tier 3\", amount: \"$1000/month\", requirements: \"15 referrals, $50K volume, 90 days\" }\n      ],\n      description: \"Monthly salary income based on direct referral performance and business generation. Fixed rewards for committed promoters.\",\n      buttonClass: \"btn btn-primary\"\n    }\n  ];\n\n  return (\n    <section id=\"packages\" className=\"section\">\n      <div className=\"container\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-4xl font-bold mb-4\">Investment <span className=\"text-gold\">Packages</span></h2>\n          <p className=\"text-xl text-secondary\">Diversified Forex investment plans tailored to different risk profiles</p>\n        </div>\n        \n        {/* Package Grid */}\n        <div className=\"grid grid-cols-1 gap-8 mb-16 package-grid\">\n          {packages.map((pkg, index) => (\n            <div \n              key={index}\n              className=\"package-card animate-fadeIn\"\n              style={{ \n                animationDelay: `${index * 0.1}s`,\n                borderColor: pkg.color === 'gold' ? 'rgba(255, 215, 0, 0.2)' : \n                            pkg.color === 'blue-custom' ? 'rgba(59, 130, 246, 0.2)' :\n                            pkg.color === 'green-400' ? 'rgba(34, 197, 94, 0.2)' :\n                            'rgba(168, 85, 247, 0.2)'\n              }}\n            >\n              <div className=\"flex items-center justify-between mb-6\">\n                <h3 className=\"text-2xl font-bold\" style={{\n                  color: pkg.color === 'gold' ? 'var(--primary-gold)' : \n                        pkg.color === 'blue-custom' ? '#3b82f6' :\n                        pkg.color === 'green-400' ? '#22c55e' :\n                        '#a855f7'\n                }}>{pkg.name}</h3>\n                <span className=\"px-3 py-1 rounded-full text-sm font-semibold\" style={{\n                  backgroundColor: pkg.color === 'gold' ? 'rgba(255, 215, 0, 0.1)' : \n                                  pkg.color === 'blue-custom' ? 'rgba(59, 130, 246, 0.1)' :\n                                  pkg.color === 'green-400' ? 'rgba(34, 197, 94, 0.1)' :\n                                  'rgba(168, 85, 247, 0.1)',\n                  color: pkg.color === 'gold' ? 'var(--primary-gold)' : \n                        pkg.color === 'blue-custom' ? '#3b82f6' :\n                        pkg.color === 'green-400' ? '#22c55e' :\n                        '#a855f7'\n                }}>\n                  {pkg.badge}\n                </span>\n              </div>\n              \n              <div className=\"package-details mb-6\" style={{ display: 'flex', flexDirection: 'column', gap: '1rem' }}>\n                {pkg.details && Object.entries(pkg.details).map(([key, value]) => (\n                  <div key={key} className=\"flex justify-between\">\n                    <span className=\"text-secondary capitalize\">{key.replace(/([A-Z])/g, ' $1')}:</span>\n                    <span className=\"font-semibold\" style={{\n                      color: key === 'return' && pkg.color === 'gold' ? 'var(--primary-gold)' : 'inherit'\n                    }}>{value}</span>\n                  </div>\n                ))}\n                \n                {pkg.levels && pkg.levels.map((level) => (\n                  <div key={level.level} className=\"flex justify-between\">\n                    <span className=\"text-secondary\">Level {level.level}:</span>\n                    <span className=\"font-semibold\" style={{\n                      color: level.level === 1 && pkg.color === 'blue-custom' ? '#3b82f6' : 'inherit'\n                    }}>\n                      {level.percentage}\n                    </span>\n                  </div>\n                ))}\n                \n                {pkg.tiers && pkg.tiers.map((tier, tierIndex) => (\n                  <div key={tierIndex} className=\"p-3 rounded\" style={{\n                    backgroundColor: pkg.color === 'purple-400' ? 'rgba(168, 85, 247, 0.1)' : 'rgba(255, 255, 255, 0.05)'\n                  }}>\n                    <div className=\"font-semibold\" style={{\n                      color: pkg.color === 'purple-400' ? '#a855f7' : 'var(--primary-gold)'\n                    }}>{tier.name}: {tier.amount}</div>\n                    <div className=\"text-sm text-secondary\">{tier.requirements}</div>\n                  </div>\n                ))}\n                \n                {pkg.example && (\n                  <div className=\"p-3 rounded\" style={{\n                    backgroundColor: pkg.color === 'green-400' ? 'rgba(34, 197, 94, 0.1)' : 'rgba(255, 255, 255, 0.05)'\n                  }}>\n                    <div className=\"text-sm text-secondary\">Example:</div>\n                    <div className=\"font-semibold\" style={{\n                      color: pkg.color === 'green-400' ? '#22c55e' : 'var(--primary-gold)'\n                    }}>{pkg.example}</div>\n                  </div>\n                )}\n              </div>\n              \n              <p className=\"text-secondary mb-6\">{pkg.description}</p>\n              \n              <button className=\"btn w-full font-semibold choose-plan-btn\" style={{\n                background: pkg.color === 'gold' ? 'linear-gradient(135deg, #ffd700, #ffa000)' :\n                           pkg.color === 'blue-custom' ? 'linear-gradient(135deg, #3b82f6, #1d4ed8)' :\n                           pkg.color === 'green-400' ? 'linear-gradient(135deg, #22c55e, #16a34a)' :\n                           'linear-gradient(135deg, #a855f7, #7c3aed)',\n                color: pkg.color === 'gold' ? '#000' : 'white',\n                border: 'none',\n                padding: '0.75rem 1.5rem',\n                borderRadius: '0.5rem',\n                cursor: 'pointer',\n                transition: 'all 0.2s ease'\n              }}>\n                Choose Plan\n              </button>\n            </div>\n          ))}\n        </div>\n\n        {/* Re-Top-Up Rule Note */}\n        <div className=\"card p-6 mb-8\" style={{ borderColor: 'rgba(255, 215, 0, 0.2)' }}>\n          <h3 className=\"text-xl font-bold text-gold mb-4\">Important Notice</h3>\n          <div className=\"notice-content text-secondary\" style={{ display: 'flex', flexDirection: 'column', gap: '0.5rem' }}>\n            <p><strong>Re-Top-Up Rule:</strong> When a user's investment package reaches 2x returns (full payout completed), they must re-top-up their account with a minimum of $250 to continue receiving future ROI payouts and stay eligible for referral rewards.</p>\n            <p><strong>Lock Period:</strong> All packages are locked for a minimum of 6 months to ensure optimal trading strategies.</p>\n          </div>\n        </div>\n\n        {/* Affiliate Income Calculator */}\n        <AffiliateCalculator />\n      </div>\n    </section>\n  );\n}\n","size_bytes":8582},"client/src/components/LegalSection.jsx":{"content":"import { FileText, Shield, AlertTriangle, UserCheck, CreditCard, Scale } from 'lucide-react';\n\nexport default function LegalSection() {\n  const legalPages = [\n    {\n      icon: FileText,\n      title: \"Terms & Conditions\",\n      description: \"Complete terms of service\",\n      href: \"#terms\"\n    },\n    {\n      icon: Shield,\n      title: \"Privacy Policy\",\n      description: \"How we protect your data\",\n      href: \"#privacy\"\n    },\n    {\n      icon: AlertTriangle,\n      title: \"Risk Disclaimer\",\n      description: \"Investment risk information\",\n      href: \"#risk\"\n    },\n    {\n      icon: UserCheck,\n      title: \"AML & KYC Policy\",\n      description: \"Compliance procedures\",\n      href: \"#aml\"\n    },\n    {\n      icon: CreditCard,\n      title: \"Refund Policy\",\n      description: \"Withdrawal procedures\",\n      href: \"#refund\"\n    },\n    {\n      icon: Scale,\n      title: \"Compliance\",\n      description: \"Regulatory information\",\n      href: \"#compliance\"\n    }\n  ];\n\n  return (\n    <section className=\"section\">\n      <div className=\"container\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-4xl font-bold mb-4\">Legal <span className=\"text-gold\">Information</span></h2>\n          <p className=\"text-xl text-secondary\">Important legal documents and policies</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 gap-6 legal-grid\" style={{ maxWidth: '64rem', margin: '0 auto' }}>\n          {legalPages.map((page, index) => {\n            const IconComponent = page.icon;\n            return (\n              <a \n                key={index}\n                href={page.href} \n                className=\"card p-6 text-center legal-link animate-fadeIn\"\n                style={{ \n                  animationDelay: `${index * 0.1}s`,\n                  border: '1px solid rgba(255, 215, 0, 0.1)',\n                  textDecoration: 'none',\n                  color: 'inherit',\n                  display: 'block',\n                  transition: 'all 0.3s ease'\n                }}\n              >\n                <IconComponent \n                  className=\"legal-icon mb-4 mx-auto text-gold transition-transform\" \n                  style={{ width: '3rem', height: '3rem' }}\n                />\n                <h3 className=\"text-lg font-semibold mb-2 transition-colors\">{page.title}</h3>\n                <p className=\"text-secondary text-sm\">{page.description}</p>\n              </a>\n            );\n          })}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2489},"client/src/components/Navigation.jsx":{"content":"import { useState, useEffect } from 'react';\nimport { Menu, X } from 'lucide-react';\nimport { Link } from 'wouter';\n\nexport default function Navigation() {\n  const [isScrolled, setIsScrolled] = useState(false);\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      setIsScrolled(window.scrollY > 100);\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  const scrollToSection = (sectionId) => {\n    const element = document.getElementById(sectionId);\n    if (element) {\n      element.scrollIntoView({ behavior: 'smooth' });\n    }\n    setIsMobileMenuOpen(false);\n  };\n\n  return (\n    <nav className={`fixed z-50 w-full transition ${\n      isScrolled ? 'bg-dark border-b' : 'bg-dark border-b'\n    }`} style={{\n      top: 0,\n      borderBottomColor: 'rgba(255, 215, 0, 0.2)'\n    }}>\n      <div className=\"container\">\n        <div className=\"flex items-center justify-between\" style={{ height: '4rem' }}>\n          <div className=\"flex items-center\">\n            <img src=\"/logo.png\" alt=\"FXBOT Logo\" style={{ height: '2.5rem', width: 'auto' }} />\n            <span className=\"text-xl font-bold text-gold\" style={{ marginLeft: '0.75rem' }}>FXBOT</span>\n          </div>\n          \n          {/* Desktop Navigation */}\n          <div className=\"desktop-nav\" style={{ display: 'flex', gap: '2rem' }}>\n            <button onClick={() => scrollToSection('home')} className=\"nav-link text-secondary transition-colors\">Home</button>\n            <button onClick={() => scrollToSection('about')} className=\"nav-link text-secondary transition-colors\">About Us</button>\n            <button onClick={() => scrollToSection('packages')} className=\"nav-link text-secondary transition-colors\">Investment Packages</button>\n            <button onClick={() => scrollToSection('how-it-works')} className=\"nav-link text-secondary transition-colors\">How It Works</button>\n            <button onClick={() => scrollToSection('faq')} className=\"nav-link text-secondary transition-colors\">FAQs</button>\n            <button onClick={() => scrollToSection('contact')} className=\"nav-link text-secondary transition-colors\">Contact</button>\n          </div>\n          \n          {/* Desktop Auth Buttons */}\n          <div className=\"auth-buttons\" style={{ display: 'flex', gap: '1rem' }}>\n            <Link href=\"/login\" className=\"btn btn-secondary\">\n              Login\n            </Link>\n            <Link href=\"/register\" className=\"btn btn-primary\">\n              Register\n            </Link>\n          </div>\n          \n          {/* Mobile Menu Button */}\n          <div className=\"mobile-menu-btn\">\n            <button \n              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n              className=\"text-primary\"\n              style={{ background: 'none', border: 'none', padding: '0.5rem' }}\n            >\n              {isMobileMenuOpen ? <X style={{ width: '1.5rem', height: '1.5rem' }} /> : <Menu style={{ width: '1.5rem', height: '1.5rem' }} />}\n            </button>\n          </div>\n        </div>\n        \n        {/* Mobile Menu */}\n        {isMobileMenuOpen && (\n          <div className=\"mobile-menu bg-card border-t\" style={{ borderTopColor: 'rgba(255, 215, 0, 0.2)' }}>\n            <div className=\"px-2 py-4\" style={{ display: 'flex', flexDirection: 'column', gap: '0.25rem' }}>\n              <button onClick={() => scrollToSection('home')} className=\"mobile-nav-link block w-full text-left px-4 py-2 text-secondary transition-colors\">Home</button>\n              <button onClick={() => scrollToSection('about')} className=\"mobile-nav-link block w-full text-left px-4 py-2 text-secondary transition-colors\">About Us</button>\n              <button onClick={() => scrollToSection('packages')} className=\"mobile-nav-link block w-full text-left px-4 py-2 text-secondary transition-colors\">Investment Packages</button>\n              <button onClick={() => scrollToSection('how-it-works')} className=\"mobile-nav-link block w-full text-left px-4 py-2 text-secondary transition-colors\">How It Works</button>\n              <button onClick={() => scrollToSection('faq')} className=\"mobile-nav-link block w-full text-left px-4 py-2 text-secondary transition-colors\">FAQs</button>\n              <button onClick={() => scrollToSection('contact')} className=\"mobile-nav-link block w-full text-left px-4 py-2 text-secondary transition-colors\">Contact</button>\n              <div className=\"pt-4\" style={{ display: 'flex', flexDirection: 'column', gap: '0.5rem' }}>\n                <Link href=\"/login\" className=\"btn btn-secondary w-full\">\n                  Login\n                </Link>\n                <Link href=\"/register\" className=\"btn btn-primary w-full\">\n                  Register\n                </Link>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":4965},"client/src/components/ROICalculator.jsx":{"content":"import { useState, useEffect } from 'react';\n\nexport default function ROICalculator() {\n  const [amount, setAmount] = useState(1000);\n  const [plan, setPlan] = useState('fs');\n  const [returns, setReturns] = useState(60);\n\n  const plans = {\n    fs: { name: \"FS Income (6% Monthly)\", rate: 0.06 },\n    smart: { name: \"SmartLine Income\", rate: 0.015 },\n    dri: { name: \"Direct Referral Income\", rate: 0.06 }\n    //das: { name: \"Direct Achiever Salary\", rate: 0.0 }\n  };\n\n  useEffect(() => {\n    const selectedPlan = plans[plan];\n    if (selectedPlan) {\n      const calculatedReturns = amount * selectedPlan.rate;\n      setReturns(calculatedReturns);\n    }\n  }, [amount, plan]);\n\n  return (\n    <div className=\"calc-container bg-card p-8 rounded-lg border w-full\" style={{ \n      maxWidth: '28rem',\n      backgroundColor: 'rgba(26, 26, 26, 0.8)',\n      backdropFilter: 'blur(4px)',\n      borderColor: 'rgba(255, 215, 0, 0.2)'\n    }}>\n      <h3 className=\"text-2xl font-bold text-gold mb-6 text-center\">Live ROI Calculator</h3>\n      <div className=\"calc-form\" style={{ display: 'flex', flexDirection: 'column', gap: '1rem' }}>\n        <div>\n          <label className=\"block text-sm font-medium mb-2\">Investment Amount ($)</label>\n          <input \n            type=\"number\" \n            value={amount}\n            onChange={(e) => setAmount(Number(e.target.value) || 0)}\n            className=\"form-input\"\n          />\n        </div>\n        <div>\n          <label className=\"block text-sm font-medium mb-2\">Plan</label>\n          <select \n            value={plan}\n            onChange={(e) => setPlan(e.target.value)}\n            className=\"form-input\"\n          >\n            {Object.entries(plans).map(([key, planData]) => (\n              <option key={key} value={key}>\n                {planData.name}\n              </option>\n            ))}\n          </select>\n        </div>\n        <div className=\"calc-results bg-secondary p-4 rounded border\" style={{ \n          borderColor: 'rgba(255, 215, 0, 0.2)' \n        }}>\n          <div className=\"text-center\">\n            <div className=\"text-sm text-muted\">Monthly Returns</div>\n            <div className=\"text-2xl font-bold text-gold\">\n              ${returns.toFixed(2)}\n            </div>\n            <div className=\"text-sm text-gray-400 mt-1\">\n              Based on {plans[plan].name}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2425},"client/src/components/TestimonialsSection.jsx":{"content":"import { Star } from 'lucide-react';\n\nexport default function TestimonialsSection() {\n  const testimonials = [\n    {\n      name: \"John Smith\",\n      review: \"FXBOT has been delivering consistent returns for over 8 months. Their transparency and professional approach gives me complete confidence in my investments.\",\n      image: \"https://images.unsplash.com/photo-1633332755192-727a05c4013d?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=100&h=100\"\n    },\n    {\n      name: \"Sarah Johnson\",\n      review: \"The FS Income plan is exactly what I needed - reliable 6% monthly returns. The team's expertise in forex trading really shows in the results.\",\n      image: \"https://images.unsplash.com/photo-1494790108755-2616c5e94cfa?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=100&h=100\"\n    },\n    {\n      name: \"Michael Brown\",\n      review: \"I've tried many investment platforms, but FXBOT stands out with their professional approach and consistent performance. Highly recommended!\",\n      image: \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=100&h=100\"\n    }\n  ];\n\n  return (\n    <section className=\"section bg-secondary\">\n      <div className=\"container\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-4xl font-bold mb-4\">What Our <span className=\"text-gold\">Investors</span> Say</h2>\n          <p className=\"text-xl text-secondary\">Real experiences from our satisfied clients</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 gap-8 testimonials-grid\">\n          {testimonials.map((testimonial, index) => (\n            <div \n              key={index}\n              className=\"card p-8 border animate-fadeIn\"\n              style={{ \n                animationDelay: `${index * 0.2}s`,\n                borderColor: 'rgba(255, 215, 0, 0.1)' \n              }}\n            >\n              <div className=\"flex items-center mb-6\" style={{ gap: '1rem' }}>\n                <img \n                  src={testimonial.image} \n                  alt={`${testimonial.name} testimonial`} \n                  className=\"rounded-full\"\n                  style={{ \n                    width: '4rem', \n                    height: '4rem', \n                    objectFit: 'cover' \n                  }}\n                />\n                <div>\n                  <h4 className=\"font-bold\">{testimonial.name}</h4>\n                  <div className=\"flex text-gold\">\n                    {[...Array(5)].map((_, i) => (\n                      <Star key={i} style={{ width: '1rem', height: '1rem', fill: 'currentColor' }} />\n                    ))}\n                  </div>\n                </div>\n              </div>\n              <p className=\"text-secondary\" style={{ fontStyle: 'italic' }}>\"{testimonial.review}\"</p>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3020},"client/src/hooks/use-mobile.js":{"content":"import React from \"react\";\n\nconst MOBILE_BREAKPOINT = 768;\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState(undefined);\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`);\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);\n    };\n    mql.addEventListener(\"change\", onChange);\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);\n    return () => mql.removeEventListener(\"change\", onChange);\n  }, []);\n\n  return !!isMobile;\n}","size_bytes":549},"client/src/hooks/use-toast.js":{"content":"import React from \"react\";\n\nconst TOAST_LIMIT = 1;\nconst TOAST_REMOVE_DELAY = 1000000;\n\nlet count = 0;\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_VALUE;\n  return count.toString();\n}\n\nconst toastTimeouts = new Map();\n\nconst addToRemoveQueue = (toastId) => {\n  if (toastTimeouts.has(toastId)) {\n    return;\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId);\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    });\n  }, TOAST_REMOVE_DELAY);\n\n  toastTimeouts.set(toastId, timeout);\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      };\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      };\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action;\n\n      if (toastId) {\n        addToRemoveQueue(toastId);\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id);\n        });\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      };\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        };\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      };\n  }\n};\n\nconst listeners = [];\n\nlet memoryState = { toasts: [] };\n\nfunction dispatch(action) {\n  memoryState = reducer(memoryState, action);\n  listeners.forEach((listener) => {\n    listener(memoryState);\n  });\n}\n\nfunction toast({ ...props }) {\n  const id = genId();\n\n  const update = (props) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    });\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id });\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss();\n      },\n    },\n  });\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  };\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState(memoryState);\n\n  React.useEffect(() => {\n    listeners.push(setState);\n    return () => {\n      const index = listeners.indexOf(setState);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    };\n  }, [state]);\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  };\n}\n\nexport { useToast, toast };","size_bytes":2787},"client/src/lib/queryClient.js":{"content":"import { QueryClient } from \"@tanstack/react-query\";\n\n// Create a client\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: async ({ queryKey }) => {\n        const token = localStorage.getItem('token');\n        const headers = {\n          'Content-Type': 'application/json',\n        };\n        \n        if (token) {\n          headers['Authorization'] = `Bearer ${token}`;\n        }\n        \n        const res = await fetch(queryKey[0], {\n          headers,\n          credentials: 'include'\n        });\n        \n        if (!res.ok) {\n          const error = await res.text();\n          throw new Error(`${res.status}: ${error || \"An error occurred\"}`);\n        }\n        return res.json();\n      },\n      retry: false,\n      refetchOnWindowFocus: false,\n    },\n  },\n});\n\nexport default queryClient;\n\n// Helper function for API requests\nexport const apiRequest = async (url, options = {}) => {\n  const response = await fetch(url, {\n    headers: {\n      'Content-Type': 'application/json',\n      ...options.headers,\n    },\n    ...options,\n  });\n\n  if (!response.ok) {\n    const error = await response.text();\n    throw new Error(error || 'Request failed');\n  }\n\n  return response.json();\n};","size_bytes":1225},"client/src/lib/utils.js":{"content":"import { clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs) {\n  return twMerge(clsx(inputs));\n}","size_bytes":137},"client/src/pages/Home.jsx":{"content":"import Navigation from \"@/components/Navigation\";\nimport HeroSection from \"@/components/HeroSection\";\nimport BenefitsSection from \"@/components/BenefitsSection\";\nimport InvestmentPackages from \"@/components/InvestmentPackages\";\nimport AboutSection from \"@/components/AboutSection\";\nimport HowItWorks from \"@/components/HowItWorks\";\nimport TestimonialsSection from \"@/components/TestimonialsSection\";\nimport FAQSection from \"@/components/FAQSection\";\nimport ContactSection from \"@/components/ContactSection\";\nimport Footer from \"@/components/Footer\";\n\nexport default function Home() {\n  return (\n    <div className=\"min-h-screen bg-dark-bg text-white font-inter\">\n      <Navigation />\n      <HeroSection />\n      <BenefitsSection />\n      <InvestmentPackages />\n      <AboutSection />\n      <HowItWorks />\n      <TestimonialsSection />\n      <FAQSection />\n      <ContactSection />\n      \n      {/* Legal Pages Section */}\n      <section className=\"py-20\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold mb-4\">Legal <span className=\"text-gold\">Information</span></h2>\n            <p className=\"text-xl text-gray-300\">Important legal documents and policies</p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6 max-w-4xl mx-auto\">\n            <a href=\"#terms\" className=\"bg-dark-card p-6 rounded-xl border border-gold/10 hover:border-gold/30 transition-colors text-center\">\n              <i className=\"fas fa-file-contract text-3xl text-gold mb-4\"></i>\n              <h3 className=\"text-lg font-semibold mb-2\">Terms & Conditions</h3>\n              <p className=\"text-gray-300 text-sm\">Complete terms of service</p>\n            </a>\n            <a href=\"#privacy\" className=\"bg-dark-card p-6 rounded-xl border border-gold/10 hover:border-gold/30 transition-colors text-center\">\n              <i className=\"fas fa-shield-alt text-3xl text-gold mb-4\"></i>\n              <h3 className=\"text-lg font-semibold mb-2\">Privacy Policy</h3>\n              <p className=\"text-gray-300 text-sm\">How we protect your data</p>\n            </a>\n            <a href=\"#risk\" className=\"bg-dark-card p-6 rounded-xl border border-gold/10 hover:border-gold/30 transition-colors text-center\">\n              <i className=\"fas fa-exclamation-triangle text-3xl text-gold mb-4\"></i>\n              <h3 className=\"text-lg font-semibold mb-2\">Risk Disclaimer</h3>\n              <p className=\"text-gray-300 text-sm\">Investment risk information</p>\n            </a>\n            <a href=\"#aml\" className=\"bg-dark-card p-6 rounded-xl border border-gold/10 hover:border-gold/30 transition-colors text-center\">\n              <i className=\"fas fa-user-shield text-3xl text-gold mb-4\"></i>\n              <h3 className=\"text-lg font-semibold mb-2\">AML & KYC Policy</h3>\n              <p className=\"text-gray-300 text-sm\">Compliance procedures</p>\n            </a>\n            <a href=\"#refund\" className=\"bg-dark-card p-6 rounded-xl border border-gold/10 hover:border-gold/30 transition-colors text-center\">\n              <i className=\"fas fa-money-bill-wave text-3xl text-gold mb-4\"></i>\n              <h3 className=\"text-lg font-semibold mb-2\">Refund Policy</h3>\n              <p className=\"text-gray-300 text-sm\">Withdrawal procedures</p>\n            </a>\n            <a href=\"#compliance\" className=\"bg-dark-card p-6 rounded-xl border border-gold/10 hover:border-gold/30 transition-colors text-center\">\n              <i className=\"fas fa-balance-scale text-3xl text-gold mb-4\"></i>\n              <h3 className=\"text-lg font-semibold mb-2\">Compliance</h3>\n              <p className=\"text-gray-300 text-sm\">Regulatory information</p>\n            </a>\n          </div>\n        </div>\n      </section>\n      \n      <Footer />\n    </div>\n  );\n}\n","size_bytes":3832},"server/auth.js":{"content":"import jwt from 'jsonwebtoken';\n\n// Generate JWT token\nexport const generateToken = (userId) => {\n  return jwt.sign({ userId }, process.env.JWT_SECRET, {\n    expiresIn: '7d', // Token expires in 7 days\n  });\n};\n\n// Verify JWT token\nexport const verifyToken = (token) => {\n  try {\n    return jwt.verify(token, process.env.JWT_SECRET);\n  } catch (error) {\n    return null;\n  }\n};\n\n// Authentication middleware\nexport const authenticateToken = async (req, res, next) => {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN\n\n  if (!token) {\n    return res.status(401).json({ error: 'Access token is required' });\n  }\n\n  const decoded = verifyToken(token);\n  if (!decoded) {\n    return res.status(403).json({ error: 'Invalid or expired token' });\n  }\n\n  console.log('Auth middleware - decoded userId:', decoded.userId);\n  req.userId = decoded.userId;\n  next();\n};\n\n// Admin middleware\nexport const requireAdmin = async (req, res, next) => {\n  try {\n    const { getStorage } = await import('./storage.js');\n    const storage = getStorage();\n    \n    const user = await storage.getUserById(req.userId);\n    console.log('Admin check - User found:', user?._id);\n    console.log('Admin check - role field:', user?.role);\n    \n    if (!user || user.role !== 'admin') {\n      return res.status(403).json({ error: 'Admin access required' });\n    }\n    \n    req.adminUser = user;\n    next();\n  } catch (error) {\n    console.error('Admin middleware error:', error);\n    res.status(500).json({ error: 'Authorization check failed' });\n  }\n};","size_bytes":1596},"server/database.js":{"content":"import mongoose from 'mongoose';\n\nconst connectDB = async () => {\n  try {\n    const conn = await mongoose.connect(process.env.MONGODB_URI);\n    console.log(`MongoDB Connected: ${conn.connection.host}`);\n  } catch (error) {\n    console.error('Database connection error:', error);\n    process.exit(1);\n  }\n};\n\n// User Schema\nconst userSchema = new mongoose.Schema({\n  sponsorId: {\n    type: String,\n    required: true\n  },\n  ownSponsorId: {\n    type: String,\n    unique: true,\n    required: true\n  },\n  firstName: {\n    type: String,\n    required: true\n  },\n  lastName: {\n    type: String,\n    required: true\n  },\n  mobile: {\n    type: String,\n    required: true,\n    validate: {\n      validator: function(v) {\n        return /^\\d{10}$/.test(v);\n      },\n      message: 'Mobile number must be exactly 10 digits'\n    }\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n    lowercase: true\n  },\n  password: {\n    type: String,\n    required: true\n  },\n  role: {\n    type: String,\n    enum: ['user', 'admin'],\n    default: 'user'\n  },\n  isActive: {\n    type: Boolean,\n    default: true\n  },\n  referralCount: {\n    type: Number,\n    default: 0\n  },\n  parent: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    default: null\n  },\n  children: [{\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User'\n  }],\n  level1Count: { type: Number, default: 0 },\n  level2Count: { type: Number, default: 0 },\n  level3Count: { type: Number, default: 0 },\n  level4Count: { type: Number, default: 0 },\n  level5Count: { type: Number, default: 0 },\n  totalEarnings: { type: Number, default: 0 },\n  level1Earnings: { type: Number, default: 0 },\n  level2Earnings: { type: Number, default: 0 },\n  level3Earnings: { type: Number, default: 0 },\n  level4Earnings: { type: Number, default: 0 },\n  level5Earnings: { type: Number, default: 0 },\n  \n  // Password Reset\n  resetToken: { type: String, default: null },\n  resetTokenExpiry: { type: Date, default: null },\n  \n  // DAS program fields\n  dasEnrollmentDate: { type: Date, default: null },\n  dasCountdownStartDate: { type: Date, default: null },\n  isEnrolledInDas: { type: Boolean, default: false },\n  totalInvestmentVolume: { type: Number, default: 0 },\n  dasTask1Completed: { type: Boolean, default: false },\n  dasTask2Completed: { type: Boolean, default: false },\n  dasTask3Completed: { type: Boolean, default: false },\n  dasTask1CompletedAt: { type: Date, default: null },\n  dasTask2CompletedAt: { type: Date, default: null },\n  dasTask3CompletedAt: { type: Date, default: null },\n  dasMonthlyEarnings: { type: Number, default: 0 },\n  \n  // Investment tracking fields\n  totalInvestmentAmount: { type: Number, default: 0 },\n  directIncome: { type: Number, default: 0 }, // 6% from direct referrals\n  fsIncome: { type: Number, default: 0 }, // FS (FixSix) monthly returns\n  smartLineIncome: { type: Number, default: 0 }, // 5-tier commissions (already handled by levelXEarnings)\n  walletBalance: { type: Number, default: 0 }, // Total withdrawable amount\n  totalWithdrawn: { type: Number, default: 0 },\n  dailyFsIncome: { type: Number, default: 0 }, // Today's FS income credit\n  \n  // KYC fields\n  kycStatus: { \n    type: String, \n    enum: ['pending', 'approved', 'rejected'], \n    default: null \n  },\n  kycDocumentUrl: { type: String, default: null },\n  kycFileName: { type: String, default: null },\n  kycFileType: { type: String, default: null },\n  kycSubmittedAt: { type: Date, default: null },\n  kycApprovedAt: { type: Date, default: null },\n  kycRejectedAt: { type: Date, default: null },\n  kycApprovedBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User', default: null },\n  kycRejectedBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User', default: null },\n  kycRejectionReason: { type: String, default: null }\n}, {\n  timestamps: true\n});\n\n// Contact Schema\nconst contactSchema = new mongoose.Schema({\n  firstName: {\n    type: String,\n    required: true\n  },\n  lastName: {\n    type: String,\n    required: true\n  },\n  email: {\n    type: String,\n    required: true\n  },\n  subject: {\n    type: String,\n    required: true\n  },\n  message: {\n    type: String,\n    required: true\n  }\n}, {\n  timestamps: true\n});\n\n// Newsletter Schema\nconst newsletterSchema = new mongoose.Schema({\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n    lowercase: true\n  }\n}, {\n  timestamps: true\n});\n\n// Investment Schema for tracking volume\nconst investmentSchema = new mongoose.Schema({\n  userId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true\n  },\n  amount: {\n    type: Number,\n    required: true\n  },\n  packageType: {\n    type: String,\n    enum: ['fs_income', 'smartline', 'dri', 'das'],\n    default: 'fs_income'\n  },\n  status: {\n    type: String,\n    enum: ['active', 'completed', 'cancelled'],\n    default: 'active'\n  },\n  lockPeriod: {\n    type: Number,\n    default: 17 // months\n  },\n  unlockDate: {\n    type: Date\n  },\n  totalReturns: {\n    type: Number,\n    default: 0\n  },\n  remainingReturns: {\n    type: Number\n  },\n  dailyFsRate: {\n    type: Number,\n    default: 0.002727 // 6% monthly / 22 days\n  },\n  isActive: {\n    type: Boolean,\n    default: true\n  }\n}, {\n  timestamps: true\n});\n\n// Transaction Schema for logging all activities\nconst transactionSchema = new mongoose.Schema({\n  userId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true\n  },\n  type: {\n    type: String,\n    enum: ['deposit', 'fs_income', 'dri_income', 'smartline_income', 'das_income', 'withdrawal'],\n    required: true\n  },\n  amount: {\n    type: Number,\n    required: true\n  },\n  description: {\n    type: String,\n    required: true\n  },\n  status: {\n    type: String,\n    enum: ['pending', 'completed', 'failed'],\n    default: 'completed'\n  },\n  relatedInvestmentId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Investment',\n    default: null\n  },\n  fromUserId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    default: null\n  },\n  referralLevel: {\n    type: Number,\n    default: null\n  }\n}, {\n  timestamps: true\n});\n\n// Deposit Schema\nconst depositSchema = new mongoose.Schema({\n  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },\n  amount: { type: Number, required: true, min: 250 },\n  walletType: { type: String, required: true },\n  walletAddress: { type: String, required: true },\n  paymentMethod: { type: String, default: 'USDT TRC-20' },\n  screenshotPath: { type: String }, // Object storage path for payment screenshot\n  screenshotUrl: { type: String }, // Upload URL for screenshot\n  status: { \n    type: String, \n    enum: ['pending', 'confirmed', 'rejected'], \n    default: 'pending' \n  },\n  adminActionAt: { type: Date },\n  adminActionBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },\n  adminNotes: { type: String }\n}, {\n  timestamps: true\n});\n\n// Withdrawal Schema\nconst withdrawalSchema = new mongoose.Schema({\n  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },\n  amount: { type: Number, required: true, min: 15 },\n  requestedAmount: { type: Number, required: true }, // Original amount before service charge\n  serviceCharge: { type: Number, required: true }, // 5% service charge\n  method: { type: String, required: true },\n  walletAddress: { type: String, required: true },\n  status: { \n    type: String, \n    enum: ['pending_otp', 'pending_admin', 'approved', 'rejected', 'completed'], \n    default: 'pending_otp' \n  },\n  otpVerified: { type: Boolean, default: false },\n  otpVerifiedAt: { type: Date },\n  createdAt: { type: Date, default: Date.now },\n  updatedAt: { type: Date, default: Date.now },\n  adminNotes: { type: String },\n  adminActionAt: { type: Date },\n  adminActionBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User' }\n});\n\n// OTP Schema for withdrawal verification\nconst otpSchema = new mongoose.Schema({\n  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },\n  withdrawalId: { type: mongoose.Schema.Types.ObjectId, ref: 'Withdrawal', required: true },\n  otp: { type: String, required: true },\n  purpose: { type: String, enum: ['withdrawal'], required: true },\n  isUsed: { type: Boolean, default: false },\n  expiresAt: { type: Date, required: true },\n  createdAt: { type: Date, default: Date.now }\n});\n\nexport const User = mongoose.model('User', userSchema);\nexport const Contact = mongoose.model('Contact', contactSchema);\nexport const Newsletter = mongoose.model('Newsletter', newsletterSchema);\nexport const Investment = mongoose.model('Investment', investmentSchema);\nexport const Deposit = mongoose.model('Deposit', depositSchema);\nexport const Transaction = mongoose.model('Transaction', transactionSchema);\nexport const Withdrawal = mongoose.model('Withdrawal', withdrawalSchema);\nexport const OTP = mongoose.model('OTP', otpSchema);\n\nexport default connectDB;","size_bytes":8834},"server/referralService.js":{"content":"import { User } from './database.js';\n\n// Reward percentages for each level\nconst REWARD_RATES = {\n  1: 0.015, // 1.5%\n  2: 0.010, // 1.0%\n  3: 0.0075, // 0.75%\n  4: 0.005, // 0.50%\n  5: 0.0025 // 0.25%\n};\n\nclass ReferralService {\n  \n  // Update referral counts when a new user is registered\n  async updateReferralCounts(newUserId) {\n    try {\n      const newUser = await User.findById(newUserId).populate('parent');\n      if (!newUser || !newUser.parent) return;\n\n      let currentParent = newUser.parent;\n      let level = 1;\n\n      // Traverse up the referral chain for 5 levels\n      while (currentParent && level <= 5) {\n        const updateField = `level${level}Count`;\n        \n        await User.findByIdAndUpdate(currentParent._id, {\n          $inc: { \n            [updateField]: 1,\n            referralCount: level === 1 ? 1 : 0 // Only count direct referrals in referralCount\n          }\n        });\n\n        // Get the next parent\n        const parentUser = await User.findById(currentParent._id).populate('parent');\n        currentParent = parentUser?.parent;\n        level++;\n      }\n    } catch (error) {\n      console.error('Error updating referral counts:', error);\n    }\n  }\n\n  // Calculate and distribute rewards when an investment is made\n  async distributeRewards(investorId, investmentAmount) {\n    try {\n      const investor = await User.findById(investorId).populate('parent');\n      if (!investor || !investor.parent) return;\n\n      let currentParent = investor.parent;\n      let level = 1;\n      const rewards = [];\n\n      // Traverse up the referral chain for 5 levels\n      while (currentParent && level <= 5) {\n        const rewardRate = REWARD_RATES[level];\n        const rewardAmount = investmentAmount * rewardRate;\n        \n        const levelEarningsField = `level${level}Earnings`;\n        \n        // Update parent's earnings\n        await User.findByIdAndUpdate(currentParent._id, {\n          $inc: {\n            [levelEarningsField]: rewardAmount,\n            totalEarnings: rewardAmount\n          }\n        });\n\n        rewards.push({\n          userId: currentParent._id,\n          level: level,\n          amount: rewardAmount,\n          rate: rewardRate\n        });\n\n        // Get the next parent\n        const parentUser = await User.findById(currentParent._id).populate('parent');\n        currentParent = parentUser?.parent;\n        level++;\n      }\n\n      return rewards;\n    } catch (error) {\n      console.error('Error distributing rewards:', error);\n      return [];\n    }\n  }\n\n  // Get detailed referral statistics for a user\n  async getReferralStats(userId) {\n    try {\n      const user = await User.findById(userId);\n      if (!user) {\n        return {\n          level1Count: 0, level2Count: 0, level3Count: 0, level4Count: 0, level5Count: 0,\n          totalReferrals: 0, totalEarnings: 0,\n          level1Earnings: 0, level2Earnings: 0, level3Earnings: 0, level4Earnings: 0, level5Earnings: 0\n        };\n      }\n\n      const stats = {\n        level1Count: user.level1Count || 0,\n        level2Count: user.level2Count || 0,\n        level3Count: user.level3Count || 0,\n        level4Count: user.level4Count || 0,\n        level5Count: user.level5Count || 0,\n        totalReferrals: (user.level1Count || 0) + (user.level2Count || 0) + \n                       (user.level3Count || 0) + (user.level4Count || 0) + (user.level5Count || 0),\n        totalEarnings: user.totalEarnings || 0,\n        level1Earnings: user.level1Earnings || 0,\n        level2Earnings: user.level2Earnings || 0,\n        level3Earnings: user.level3Earnings || 0,\n        level4Earnings: user.level4Earnings || 0,\n        level5Earnings: user.level5Earnings || 0\n      };\n\n      return stats;\n    } catch (error) {\n      console.error('Error getting referral stats:', error);\n      return {\n        level1Count: 0, level2Count: 0, level3Count: 0, level4Count: 0, level5Count: 0,\n        totalReferrals: 0, totalEarnings: 0,\n        level1Earnings: 0, level2Earnings: 0, level3Earnings: 0, level4Earnings: 0, level5Earnings: 0\n      };\n    }\n  }\n\n  // Get referral tree for a user (limited depth for performance)\n  async getReferralTree(userId, maxDepth = 3) {\n    try {\n      const buildTree = async (parentId, currentDepth) => {\n        if (currentDepth > maxDepth) return [];\n        \n        const children = await User.find({ parent: parentId })\n          .select('firstName lastName email ownSponsorId createdAt level1Count level2Count level3Count level4Count level5Count')\n          .lean();\n\n        const tree = [];\n        for (const child of children) {\n          const childTree = await buildTree(child._id, currentDepth + 1);\n          tree.push({\n            ...child,\n            children: childTree,\n            level: currentDepth\n          });\n        }\n        \n        return tree;\n      };\n\n      return await buildTree(userId, 1);\n    } catch (error) {\n      console.error('Error getting referral tree:', error);\n      return [];\n    }\n  }\n}\n\nexport const referralService = new ReferralService();","size_bytes":5034},"client/src/components/ModernSidebar.jsx":{"content":"import React from 'react';\nimport { useLocation } from 'wouter';\nimport { \n  LayoutDashboard, \n  User, \n  CreditCard, \n  GitBranch, \n  ArrowDownToLine, \n  ArrowUpFromLine, \n  Receipt,\n  LogOut,\n  ChevronRight\n} from 'lucide-react';\n\nconst ModernSidebar = ({ user, onLogout }) => {\n  const [location, navigate] = useLocation();\n\n  const menuItems = [\n    {\n      id: 'dashboard',\n      label: 'Dashboard',\n      icon: LayoutDashboard,\n      path: '/dashboard',\n      active: location === '/dashboard'\n    },\n    {\n      id: 'profile',\n      label: 'Profile',\n      icon: User,\n      path: '/profile',\n      active: location === '/profile'\n    },\n    {\n      id: 'fund',\n      label: 'Fund',\n      icon: CreditCard,\n      path: '/fund',\n      active: location === '/fund'\n    },\n    {\n      id: 'referral-tree',\n      label: 'Referral Tree',\n      icon: GitBranch,\n      path: '/referral-tree',\n      active: location === '/referral-tree'\n    },\n    {\n      id: 'deposit',\n      label: 'Deposit',\n      icon: ArrowDownToLine,\n      path: '/deposit',\n      active: location === '/deposit'\n    },\n    {\n      id: 'withdrawal',\n      label: 'Withdrawal',\n      icon: ArrowUpFromLine,\n      path: '/withdrawal',\n      active: location === '/withdrawal'\n    },\n    {\n      id: 'transactions',\n      label: 'Transaction History',\n      icon: Receipt,\n      path: '/transactions',\n      active: location === '/transactions'\n    }\n  ];\n\n  const handleNavigation = (path) => {\n    navigate(path);\n  };\n\n  return (\n    <div style={{\n      width: '256px',\n      background: 'linear-gradient(180deg, #1e293b 0%, #0f172a 100%)',\n      color: 'white',\n      display: 'flex',\n      flexDirection: 'column',\n      height: '100vh',\n      boxShadow: '4px 0 20px rgba(0, 0, 0, 0.15)'\n    }}>\n      {/* Logo Section */}\n      <div style={{\n        padding: '1.5rem',\n        borderBottom: '1px solid rgba(55, 65, 81, 0.5)',\n        background: 'rgba(59, 130, 246, 0.05)'\n      }}>\n        <div style={{ display: 'flex', alignItems: 'center' }}>\n          <div style={{\n            width: '2rem',\n            height: '2rem',\n            background: 'linear-gradient(135deg, #3b82f6, #8b5cf6)',\n            borderRadius: '0.5rem',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            marginRight: '0.75rem',\n            boxShadow: '0 4px 12px rgba(59, 130, 246, 0.4)'\n          }}>\n            <span style={{ color: 'white', fontWeight: 'bold', fontSize: '0.875rem' }}>FX</span>\n          </div>\n          <span style={{ fontSize: '1.25rem', fontWeight: 'bold', letterSpacing: '0.05em' }}>FXBOT</span>\n        </div>\n      </div>\n\n      {/* Navigation Menu */}\n      <nav style={{ flex: 1, padding: '1.5rem 1rem', display: 'flex', flexDirection: 'column', gap: '0.5rem' }}>\n        {menuItems.map((item) => {\n          const IconComponent = item.icon;\n          return (\n            <button\n              key={item.id}\n              onClick={() => handleNavigation(item.path)}\n              style={{\n                width: '100%',\n                display: 'flex',\n                alignItems: 'center',\n                padding: '0.75rem 1rem',\n                borderRadius: '0.75rem',\n                textAlign: 'left',\n                transition: 'all 0.2s ease',\n                border: 'none',\n                cursor: 'pointer',\n                background: item.active \n                  ? 'linear-gradient(135deg, #3b82f6, #8b5cf6)' \n                  : 'transparent',\n                color: item.active ? 'white' : '#d1d5db',\n                boxShadow: item.active ? '0 4px 12px rgba(59, 130, 246, 0.4)' : 'none',\n                transform: item.active ? 'translateX(4px)' : 'none'\n              }}\n              onMouseEnter={(e) => {\n                if (!item.active) {\n                  e.target.style.background = 'rgba(55, 65, 81, 0.6)';\n                  e.target.style.color = 'white';\n                  e.target.style.transform = 'translateX(2px)';\n                }\n              }}\n              onMouseLeave={(e) => {\n                if (!item.active) {\n                  e.target.style.background = 'transparent';\n                  e.target.style.color = '#d1d5db';\n                  e.target.style.transform = 'none';\n                }\n              }}\n            >\n              <IconComponent style={{\n                width: '1.25rem',\n                height: '1.25rem',\n                marginRight: '0.75rem',\n                color: item.active ? 'white' : '#9ca3af'\n              }} />\n              <span style={{ fontWeight: '500', fontSize: '0.875rem' }}>{item.label}</span>\n              {item.active && (\n                <ChevronRight style={{ width: '1rem', height: '1rem', marginLeft: 'auto', color: 'white' }} />\n              )}\n            </button>\n          );\n        })}\n      </nav>\n\n      {/* User Profile Section */}\n      <div style={{\n        padding: '1rem',\n        borderTop: '1px solid rgba(55, 65, 81, 0.5)',\n        background: 'rgba(0, 0, 0, 0.2)'\n      }}>\n        <div style={{ display: 'flex', alignItems: 'center', marginBottom: '0.75rem' }}>\n          <div style={{\n            width: '2.5rem',\n            height: '2.5rem',\n            background: 'linear-gradient(135deg, #3b82f6, #8b5cf6)',\n            borderRadius: '50%',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            marginRight: '0.75rem',\n            boxShadow: '0 2px 8px rgba(59, 130, 246, 0.4)'\n          }}>\n            <span style={{ color: 'white', fontWeight: '600', fontSize: '0.875rem' }}>\n              {user?.firstName?.[0]}{user?.lastName?.[0]}\n            </span>\n          </div>\n          <div style={{ flex: 1, minWidth: 0 }}>\n            <p style={{ fontSize: '0.875rem', fontWeight: '500', color: 'white', margin: 0, overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}>\n              {user?.firstName} {user?.lastName}\n            </p>\n            <p style={{ fontSize: '0.75rem', color: '#9ca3af', margin: 0, overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}>\n              {user?.email}\n            </p>\n          </div>\n        </div>\n        \n        <button\n          onClick={onLogout}\n          style={{\n            width: '100%',\n            display: 'flex',\n            alignItems: 'center',\n            padding: '0.5rem 1rem',\n            color: '#d1d5db',\n            background: 'transparent',\n            border: 'none',\n            borderRadius: '0.5rem',\n            transition: 'all 0.2s ease',\n            cursor: 'pointer',\n            fontSize: '0.875rem'\n          }}\n          onMouseEnter={(e) => {\n            e.target.style.background = '#dc2626';\n            e.target.style.color = 'white';\n          }}\n          onMouseLeave={(e) => {\n            e.target.style.background = 'transparent';\n            e.target.style.color = '#d1d5db';\n          }}\n        >\n          <LogOut style={{ width: '1rem', height: '1rem', marginRight: '0.75rem' }} />\n          <span style={{ fontWeight: '500' }}>Logout</span>\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ModernSidebar;","size_bytes":7183},"client/src/components/Sidebar.jsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { \n  LayoutDashboard, \n  User, \n  Wallet, \n  Users, \n  DollarSign, \n  CreditCard, \n  LogOut,\n  ChevronLeft,\n  ChevronRight,\n  Target\n} from 'lucide-react';\n\nconst Sidebar = ({ user, onLogout }) => {\n  const [location, setLocation] = useLocation();\n  const [isCollapsed, setIsCollapsed] = useState(false);\n\n  const getMenuItems = () => {\n    const baseItems = [\n      { id: 'dashboard', label: 'Dashboard', icon: LayoutDashboard, path: '/dashboard' },\n      { id: 'profile', label: 'Profile', icon: User, path: '/profile' },\n      { id: 'fund', label: 'Fund', icon: Wallet, path: '/fund' },\n      { id: 'referral-tree', label: 'Referral Tree', icon: Users, path: '/referral-tree' },\n      { id: 'deposit', label: 'Deposit', icon: DollarSign, path: '/deposit' },\n      { id: 'withdrawal', label: 'Withdrawal', icon: CreditCard, path: '/withdrawal' }\n    ];\n\n    // Add admin menu for admin users\n    if (user?.isAdmin) {\n      baseItems.push({ id: 'admin', label: 'Admin Panel', icon: Target, path: '/admin' });\n    }\n\n    return baseItems;\n  };\n\n  const menuItems = getMenuItems();\n\n  const handleNavigation = (path) => {\n    setLocation(path);\n  };\n\n  const toggleSidebar = () => {\n    setIsCollapsed(!isCollapsed);\n  };\n\n  return (\n    <div style={{\n      width: isCollapsed ? '4rem' : '16rem',\n      height: '100vh',\n      background: 'linear-gradient(135deg, #1e293b 0%, #0f172a 100%)',\n      borderRight: '1px solid rgba(255, 255, 255, 0.1)',\n      display: 'flex',\n      flexDirection: 'column',\n      transition: 'width 0.3s ease',\n      position: 'relative'\n    }}>\n      {/* Logo Section */}\n      <div style={{\n        padding: isCollapsed ? '1rem 0.5rem' : '1.5rem',\n        borderBottom: '1px solid rgba(255, 255, 255, 0.1)',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: isCollapsed ? 'center' : 'flex-start',\n        minHeight: '4rem'\n      }}>\n        <div style={{\n          display: 'flex',\n          alignItems: 'center',\n          gap: '0.75rem'\n        }}>\n          <div style={{\n            width: '2rem',\n            height: '2rem',\n            background: 'linear-gradient(135deg, #f59e0b, #d97706)',\n            borderRadius: '0.5rem',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            boxShadow: '0 4px 12px rgba(245, 158, 11, 0.3)'\n          }}>\n            <Target style={{ width: '1.25rem', height: '1.25rem', color: 'white' }} />\n          </div>\n          {!isCollapsed && (\n            <div>\n              <h1 style={{\n                fontSize: '1.25rem',\n                fontWeight: 'bold',\n                color: 'white',\n                margin: 0,\n                letterSpacing: '0.02em'\n              }}>\n                FXBOT\n              </h1>\n              <p style={{\n                fontSize: '0.75rem',\n                color: '#94a3b8',\n                margin: 0,\n                fontWeight: '500'\n              }}>\n                Trading Platform\n              </p>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Collapse Button */}\n      <button\n        onClick={toggleSidebar}\n        style={{\n          position: 'absolute',\n          top: '1.25rem',\n          right: '-0.75rem',\n          width: '1.5rem',\n          height: '1.5rem',\n          backgroundColor: '#f59e0b',\n          border: 'none',\n          borderRadius: '50%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          cursor: 'pointer',\n          boxShadow: '0 2px 8px rgba(0, 0, 0, 0.2)',\n          zIndex: 10,\n          transition: 'all 0.2s ease'\n        }}\n        onMouseEnter={(e) => {\n          e.target.style.backgroundColor = '#d97706';\n          e.target.style.transform = 'scale(1.1)';\n        }}\n        onMouseLeave={(e) => {\n          e.target.style.backgroundColor = '#f59e0b';\n          e.target.style.transform = 'scale(1)';\n        }}\n      >\n        {isCollapsed ? (\n          <ChevronRight style={{ width: '0.75rem', height: '0.75rem', color: 'white' }} />\n        ) : (\n          <ChevronLeft style={{ width: '0.75rem', height: '0.75rem', color: 'white' }} />\n        )}\n      </button>\n\n      {/* User Profile */}\n      {user && (\n        <div style={{\n          padding: isCollapsed ? '1rem 0.5rem' : '1.5rem',\n          borderBottom: '1px solid rgba(255, 255, 255, 0.1)',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: isCollapsed ? 'center' : 'flex-start',\n          gap: '0.75rem'\n        }}>\n          <div style={{\n            width: '2.5rem',\n            height: '2.5rem',\n            background: 'linear-gradient(135deg, #3b82f6, #1d4ed8)',\n            borderRadius: '50%',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            fontSize: '1rem',\n            fontWeight: 'bold',\n            color: 'white',\n            boxShadow: '0 4px 12px rgba(59, 130, 246, 0.3)'\n          }}>\n            {user.firstName?.[0]}{user.lastName?.[0]}\n          </div>\n          {!isCollapsed && (\n            <div style={{ flex: 1, minWidth: 0 }}>\n              <p style={{\n                fontSize: '0.875rem',\n                fontWeight: '600',\n                color: 'white',\n                margin: 0,\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n                whiteSpace: 'nowrap'\n              }}>\n                {user.firstName} {user.lastName}\n              </p>\n              <p style={{\n                fontSize: '0.75rem',\n                color: '#94a3b8',\n                margin: 0,\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n                whiteSpace: 'nowrap'\n              }}>\n                {user.email}\n              </p>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Navigation Menu */}\n      <nav style={{\n        flex: 1,\n        padding: '1rem 0',\n        overflowY: 'auto'\n      }}>\n        <ul style={{\n          listStyle: 'none',\n          padding: 0,\n          margin: 0,\n          display: 'flex',\n          flexDirection: 'column',\n          gap: '0.25rem'\n        }}>\n          {menuItems.map((item) => {\n            const isActive = location === item.path;\n            const Icon = item.icon;\n            \n            return (\n              <li key={item.id}>\n                <button\n                  onClick={() => handleNavigation(item.path)}\n                  style={{\n                    width: '100%',\n                    padding: isCollapsed ? '0.75rem' : '0.75rem 1.5rem',\n                    backgroundColor: isActive ? 'rgba(245, 158, 11, 0.1)' : 'transparent',\n                    border: 'none',\n                    borderLeft: isActive ? '3px solid #f59e0b' : '3px solid transparent',\n                    color: isActive ? '#f59e0b' : '#94a3b8',\n                    fontSize: '0.875rem',\n                    fontWeight: isActive ? '600' : '500',\n                    cursor: 'pointer',\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: isCollapsed ? 'center' : 'flex-start',\n                    gap: '0.75rem',\n                    transition: 'all 0.2s ease',\n                    textAlign: 'left'\n                  }}\n                  onMouseEnter={(e) => {\n                    if (!isActive) {\n                      e.target.style.backgroundColor = 'rgba(255, 255, 255, 0.05)';\n                      e.target.style.color = 'white';\n                    }\n                  }}\n                  onMouseLeave={(e) => {\n                    if (!isActive) {\n                      e.target.style.backgroundColor = 'transparent';\n                      e.target.style.color = '#94a3b8';\n                    }\n                  }}\n                  title={isCollapsed ? item.label : undefined}\n                >\n                  <Icon style={{\n                    width: '1.25rem',\n                    height: '1.25rem',\n                    flexShrink: 0\n                  }} />\n                  {!isCollapsed && (\n                    <span style={{ overflow: 'hidden', textOverflow: 'ellipsis' }}>\n                      {item.label}\n                    </span>\n                  )}\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n      </nav>\n\n      {/* Logout Button */}\n      <div style={{\n        padding: isCollapsed ? '1rem 0.5rem' : '1rem 1.5rem',\n        borderTop: '1px solid rgba(255, 255, 255, 0.1)'\n      }}>\n        <button\n          onClick={onLogout}\n          style={{\n            width: '100%',\n            padding: isCollapsed ? '0.75rem' : '0.75rem 1rem',\n            backgroundColor: 'rgba(239, 68, 68, 0.1)',\n            border: '1px solid rgba(239, 68, 68, 0.3)',\n            borderRadius: '0.5rem',\n            color: '#ef4444',\n            fontSize: '0.875rem',\n            fontWeight: '500',\n            cursor: 'pointer',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            gap: '0.5rem',\n            transition: 'all 0.2s ease'\n          }}\n          onMouseEnter={(e) => {\n            e.target.style.backgroundColor = 'rgba(239, 68, 68, 0.2)';\n            e.target.style.borderColor = 'rgba(239, 68, 68, 0.5)';\n          }}\n          onMouseLeave={(e) => {\n            e.target.style.backgroundColor = 'rgba(239, 68, 68, 0.1)';\n            e.target.style.borderColor = 'rgba(239, 68, 68, 0.3)';\n          }}\n          title={isCollapsed ? 'Logout' : undefined}\n        >\n          <LogOut style={{\n            width: '1rem',\n            height: '1rem'\n          }} />\n          {!isCollapsed && <span>Logout</span>}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Sidebar;","size_bytes":9890},"client/src/pages/Dashboard.jsx":{"content":"// This file redirects to ModernDashboard to ensure proper routing\nimport ModernDashboard from './ModernDashboard';\n\nexport default ModernDashboard;","size_bytes":148},"client/src/pages/Deposit.jsx":{"content":"import { useState, useEffect } from 'react';\nimport { Copy, Upload, CheckCircle, DollarSign, Wallet, QrCode } from 'lucide-react';\nimport axios from 'axios';\nimport Sidebar from '../components/Sidebar';\nimport { ObjectUploader } from '../components/ObjectUploader';\nimport qrCodeImage from '@assets/QR_1755581675343.jpeg';\n\nexport default function Deposit() {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [depositAmount, setDepositAmount] = useState(250);\n  const [uploadedScreenshotUrl, setUploadedScreenshotUrl] = useState(null);\n  const [copied, setCopied] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const walletAddress = \"TDdjYG9Jhz1G68AzgZqWFL75iEbsRD1FSH\";\n  const walletType = \"TRC\";\n\n  useEffect(() => {\n    const fetchUserData = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        if (!token) {\n          window.location.href = '/login';\n          return;\n        }\n\n        const userResponse = await axios.get('/api/auth/me', {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n        setUser(userResponse.data);\n      } catch (error) {\n        if (error.response?.status === 401) {\n          localStorage.removeItem('token');\n          window.location.href = '/login';\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchUserData();\n  }, []);\n\n  const handleLogout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/';\n  };\n\n  const copyToClipboard = () => {\n    navigator.clipboard.writeText(walletAddress).then(() => {\n      setCopied(true);\n      setTimeout(() => setCopied(false), 2000);\n    });\n  };\n\n  const handleGetUploadParameters = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch('/api/deposit/upload-url', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to get upload URL');\n      }\n\n      const data = await response.json();\n      return { url: data.uploadURL };\n    } catch (error) {\n      console.error('Error getting upload URL:', error);\n      throw error;\n    }\n  };\n\n  const handleUploadComplete = (result) => {\n    if (result.successful && result.successful.length > 0) {\n      setUploadedScreenshotUrl(result.successful[0].uploadURL);\n    }\n  };\n\n  const handleAmountChange = (event) => {\n    const value = parseInt(event.target.value);\n    if (value >= 250 && value % 250 === 0) {\n      setDepositAmount(value);\n    }\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    \n    if (!uploadedScreenshotUrl) {\n      alert('Please upload a payment screenshot before submitting.');\n      return;\n    }\n\n    setIsSubmitting(true);\n\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch('/api/deposit', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          amount: depositAmount,\n          walletType: walletType,\n          walletAddress: walletAddress,\n          screenshotUrl: uploadedScreenshotUrl\n        })\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        alert('Deposit request submitted successfully! Our admin will review and confirm your transaction within 24 hours.');\n        setUploadedScreenshotUrl(null);\n        setDepositAmount(250);\n        // Reset the uploader component\n        window.location.reload();\n      } else {\n        alert(data.error || 'Failed to submit deposit request. Please try again.');\n      }\n    } catch (error) {\n      console.error('Deposit submission error:', error);\n      alert('Error submitting deposit request. Please try again.');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const generateAmountOptions = () => {\n    const options = [];\n    for (let i = 250; i <= 2500; i += 250) {\n      options.push(\n        <option key={i} value={i}>\n          ${i}\n        </option>\n      );\n    }\n    return options;\n  };\n\n  if (loading) {\n    return (\n      <div style={{ display: 'flex', height: '100vh', backgroundColor: '#f3f4f6' }}>\n        <div style={{ width: '16rem', backgroundColor: '#1f2937' }}></div>\n        <div style={{ flex: 1, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n          <div style={{\n            width: '3rem',\n            height: '3rem',\n            border: '2px solid #e5e7eb',\n            borderTop: '2px solid #3b82f6',\n            borderRadius: '50%',\n            animation: 'spin 1s linear infinite'\n          }}></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ display: 'flex', height: '100vh', backgroundColor: '#f3f4f6' }}>\n      <Sidebar user={user} onLogout={handleLogout} />\n      \n      <div style={{ flex: 1, display: 'flex', flexDirection: 'column', overflow: 'hidden' }}>\n        <header style={{\n          backgroundColor: '#ffffff',\n          boxShadow: '0 1px 3px 0 rgba(0, 0, 0, 0.1)',\n          borderBottom: '1px solid #e5e7eb',\n          padding: '1rem 1.5rem'\n        }}>\n          <h1 style={{\n            fontSize: '1.5rem',\n            fontWeight: 'bold',\n            color: '#111827',\n            margin: 0,\n            display: 'flex',\n            alignItems: 'center',\n            gap: '0.5rem'\n          }}>\n            <DollarSign style={{ width: '1.5rem', height: '1.5rem', color: '#f59e0b' }} />\n            Deposit\n          </h1>\n        </header>\n\n        <main style={{\n          flex: 1,\n          overflowY: 'auto',\n          backgroundColor: '#f9fafb',\n          padding: '1.5rem'\n        }}>\n          <div style={{ \n            maxWidth: '900px',\n            margin: '0 auto'\n          }}>\n            {/* Header */}\n            <div style={{ marginBottom: '2rem' }}>\n              <h2 style={{ \n                fontSize: '1.5rem', \n                fontWeight: 'bold', \n                color: '#111827',\n                marginBottom: '0.5rem'\n              }}>\n                Make a Deposit\n              </h2>\n              <p style={{ \n                color: '#6b7280',\n                fontSize: '1rem',\n                marginBottom: '1rem'\n              }}>\n                Add funds to your FXBOT trading account using USDT TRC-20\n              </p>\n              \n              {/* Remark */}\n              <div style={{\n                backgroundColor: '#fef3c7',\n                border: '1px solid #f59e0b',\n                borderRadius: '0.5rem',\n                padding: '0.75rem',\n                fontSize: '0.875rem',\n                color: '#92400e'\n              }}>\n                <strong>Remark:</strong> Please ensure you only transfer the same selected type of digital asset.\n              </div>\n            </div>\n\n      <form onSubmit={handleSubmit}>\n        <div style={{ \n          display: 'grid', \n          gridTemplateColumns: '1fr 1fr', \n          gap: '2rem',\n          alignItems: 'start'\n        }}>\n          {/* Left Column - Form */}\n          <div style={{ \n            backgroundColor: '#ffffff',\n            borderRadius: '1rem',\n            padding: '2rem',\n            boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',\n            border: '1px solid #e5e7eb'\n          }}>\n            {/* Payment Method */}\n            <div style={{ marginBottom: '1.5rem' }}>\n              <label style={{ \n                display: 'block',\n                fontSize: '0.875rem',\n                fontWeight: '600',\n                color: '#374151',\n                marginBottom: '0.5rem'\n              }}>\n                Payment Method\n              </label>\n              <div style={{\n                backgroundColor: '#f3f4f6',\n                border: '2px solid #e5e7eb',\n                borderRadius: '0.5rem',\n                padding: '0.75rem 1rem',\n                fontSize: '1rem',\n                fontWeight: '600',\n                color: '#111827',\n                display: 'flex',\n                alignItems: 'center',\n                gap: '0.5rem'\n              }}>\n                <Wallet style={{ width: '1.25rem', height: '1.25rem', color: '#f59e0b' }} />\n                USDT TRC-20\n              </div>\n            </div>\n\n            {/* Deposit Amount */}\n            <div style={{ marginBottom: '1.5rem' }}>\n              <label style={{ \n                display: 'block',\n                fontSize: '0.875rem',\n                fontWeight: '600',\n                color: '#374151',\n                marginBottom: '0.5rem'\n              }}>\n                Deposit Amount (USD)\n              </label>\n              <select\n                value={depositAmount}\n                onChange={handleAmountChange}\n                style={{\n                  width: '100%',\n                  padding: '0.75rem',\n                  border: '2px solid #e5e7eb',\n                  borderRadius: '0.5rem',\n                  fontSize: '1rem',\n                  backgroundColor: '#ffffff',\n                  color: '#111827',\n                  cursor: 'pointer'\n                }}\n              >\n                {generateAmountOptions()}\n              </select>\n              <p style={{ \n                fontSize: '0.75rem',\n                color: '#6b7280',\n                marginTop: '0.25rem'\n              }}>\n                Minimum $250. Deposits must be in multiples of $250\n              </p>\n            </div>\n\n            {/* Wallet Type */}\n            <div style={{ marginBottom: '1.5rem' }}>\n              <label style={{ \n                display: 'block',\n                fontSize: '0.875rem',\n                fontWeight: '600',\n                color: '#374151',\n                marginBottom: '0.5rem'\n              }}>\n                Wallet Type\n              </label>\n              <div style={{\n                backgroundColor: '#f3f4f6',\n                border: '2px solid #e5e7eb',\n                borderRadius: '0.5rem',\n                padding: '0.75rem 1rem',\n                fontSize: '1rem',\n                fontWeight: '600',\n                color: '#111827'\n              }}>\n                {walletType}\n              </div>\n            </div>\n\n            {/* Wallet Address */}\n            <div style={{ marginBottom: '1.5rem' }}>\n              <label style={{ \n                display: 'block',\n                fontSize: '0.875rem',\n                fontWeight: '600',\n                color: '#374151',\n                marginBottom: '0.5rem'\n              }}>\n                Wallet Address\n              </label>\n              <div style={{\n                display: 'flex',\n                alignItems: 'center',\n                gap: '0.5rem'\n              }}>\n                <input\n                  type=\"text\"\n                  value={walletAddress}\n                  readOnly\n                  style={{\n                    flex: 1,\n                    padding: '0.75rem',\n                    border: '2px solid #e5e7eb',\n                    borderRadius: '0.5rem',\n                    fontSize: '0.875rem',\n                    backgroundColor: '#f9fafb',\n                    color: '#111827'\n                  }}\n                />\n                <button\n                  type=\"button\"\n                  onClick={copyToClipboard}\n                  style={{\n                    padding: '0.75rem',\n                    backgroundColor: copied ? '#22c55e' : '#f59e0b',\n                    color: 'white',\n                    border: 'none',\n                    borderRadius: '0.5rem',\n                    cursor: 'pointer',\n                    display: 'flex',\n                    alignItems: 'center',\n                    gap: '0.25rem',\n                    fontSize: '0.875rem',\n                    fontWeight: '600',\n                    transition: 'all 0.2s ease'\n                  }}\n                >\n                  {copied ? (\n                    <>\n                      <CheckCircle style={{ width: '1rem', height: '1rem' }} />\n                      Copied\n                    </>\n                  ) : (\n                    <>\n                      <Copy style={{ width: '1rem', height: '1rem' }} />\n                      Copy\n                    </>\n                  )}\n                </button>\n              </div>\n            </div>\n\n            {/* File Upload */}\n            <div style={{ marginBottom: '2rem' }}>\n              <label style={{ \n                display: 'block',\n                fontSize: '0.875rem',\n                fontWeight: '600',\n                color: '#374151',\n                marginBottom: '0.5rem'\n              }}>\n                Upload Payment Screenshot *\n              </label>\n              <ObjectUploader\n                maxNumberOfFiles={1}\n                maxFileSize={10485760}\n                onGetUploadParameters={handleGetUploadParameters}\n                onComplete={handleUploadComplete}\n                acceptedFileTypes=\"image/*\"\n              />\n              <p style={{ \n                fontSize: '0.75rem',\n                color: '#6b7280',\n                marginTop: '0.25rem'\n              }}>\n                Upload a clear screenshot of your payment transaction for admin verification\n              </p>\n            </div>\n\n            {/* Submit Button */}\n            <button\n              type=\"submit\"\n              disabled={isSubmitting || !uploadedScreenshotUrl}\n              style={{\n                width: '100%',\n                padding: '1rem',\n                backgroundColor: (!uploadedScreenshotUrl || isSubmitting) ? '#9ca3af' : '#f59e0b',\n                color: 'white',\n                border: 'none',\n                borderRadius: '0.5rem',\n                fontSize: '1rem',\n                fontWeight: '600',\n                cursor: (!uploadedScreenshotUrl || isSubmitting) ? 'not-allowed' : 'pointer',\n                transition: 'all 0.2s ease'\n              }}\n              onMouseEnter={(e) => {\n                if (!isSubmitting && uploadedScreenshotUrl) {\n                  e.target.style.backgroundColor = '#d97706';\n                }\n              }}\n              onMouseLeave={(e) => {\n                if (!isSubmitting && uploadedScreenshotUrl) {\n                  e.target.style.backgroundColor = '#f59e0b';\n                }\n              }}\n              data-testid=\"button-submit-deposit\"\n            >\n              {isSubmitting ? 'Submitting...' : 'Submit Deposit Request'}\n            </button>\n          </div>\n\n          {/* Right Column - QR Code */}\n          <div style={{ \n            backgroundColor: '#ffffff',\n            borderRadius: '1rem',\n            padding: '2rem',\n            boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',\n            border: '1px solid #e5e7eb',\n            textAlign: 'center'\n          }}>\n            <div style={{ \n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              gap: '0.5rem',\n              marginBottom: '1.5rem'\n            }}>\n              <QrCode style={{ width: '1.5rem', height: '1.5rem', color: '#f59e0b' }} />\n              <h3 style={{ \n                fontSize: '1.25rem',\n                fontWeight: 'bold',\n                color: '#111827',\n                margin: 0\n              }}>\n                Wallet QR Code\n              </h3>\n            </div>\n            \n            <div style={{\n              backgroundColor: '#f9fafb',\n              border: '2px solid #e5e7eb',\n              borderRadius: '1rem',\n              padding: '1.5rem',\n              marginBottom: '1rem'\n            }}>\n              <img\n                src={qrCodeImage}\n                alt=\"Wallet QR Code\"\n                style={{\n                  width: '200px',\n                  height: '200px',\n                  objectFit: 'contain',\n                  borderRadius: '0.5rem'\n                }}\n              />\n            </div>\n\n            <p style={{ \n              fontSize: '0.875rem',\n              color: '#6b7280',\n              marginBottom: '1rem'\n            }}>\n              Scan this QR code to send USDT TRC-20 to our wallet\n            </p>\n\n            <div style={{\n              backgroundColor: '#fef3c7',\n              border: '1px solid #f59e0b',\n              borderRadius: '0.5rem',\n              padding: '1rem',\n              fontSize: '0.875rem',\n              color: '#92400e'\n            }}>\n              <strong>Important:</strong>\n              <ul style={{ margin: '0.5rem 0', paddingLeft: '1.25rem' }}>\n                <li>Only send USDT TRC-20 to this address</li>\n                <li>Minimum deposit: $250</li>\n                <li>Upload payment screenshot for verification</li>\n                <li>Processing time: 1-24 hours</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </form>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":17187},"client/src/pages/ForgotPassword.jsx":{"content":"import React, { useState } from 'react';\nimport { Link } from 'wouter';\n\nfunction ForgotPassword() {\n  const [email, setEmail] = useState('');\n  const [message, setMessage] = useState('');\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n    setMessage('');\n\n    if (!email || !email.includes('@')) {\n      setError('Please enter a valid email address');\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const response = await fetch('/api/auth/forgot-password', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email }),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        setMessage(data.message);\n        setIsSubmitted(true);\n      } else {\n        setError(data.error || 'Failed to send reset email');\n      }\n    } catch (error) {\n      setError('Network error. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (isSubmitted) {\n    return (\n      <div style={{ \n        minHeight: '100vh', \n        background: 'linear-gradient(135deg, #f59e0b, #d97706)',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        padding: '1rem'\n      }}>\n        <div style={{\n          backgroundColor: 'white',\n          borderRadius: '1rem',\n          padding: '2rem',\n          maxWidth: '400px',\n          width: '100%',\n          textAlign: 'center',\n          boxShadow: '0 25px 50px -12px rgba(0, 0, 0, 0.25)'\n        }}>\n          <div style={{\n            width: '4rem',\n            height: '4rem',\n            backgroundColor: '#10b981',\n            borderRadius: '50%',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            margin: '0 auto 1.5rem auto'\n          }}>\n            <span style={{ color: 'white', fontSize: '2rem' }}>✓</span>\n          </div>\n          \n          <h2 style={{\n            fontSize: '1.5rem',\n            fontWeight: 'bold',\n            color: '#111827',\n            marginBottom: '1rem'\n          }}>\n            Check Your Email\n          </h2>\n          \n          <p style={{\n            color: '#6b7280',\n            marginBottom: '1.5rem',\n            lineHeight: '1.5'\n          }}>\n            {message}\n          </p>\n          \n          <p style={{\n            color: '#6b7280',\n            fontSize: '0.875rem',\n            marginBottom: '1.5rem'\n          }}>\n            Didn't receive the email? Check your spam folder or try again.\n          </p>\n          \n          <div style={{ display: 'flex', gap: '1rem', flexDirection: 'column' }}>\n            <button\n              onClick={() => {\n                setIsSubmitted(false);\n                setEmail('');\n                setMessage('');\n              }}\n              style={{\n                backgroundColor: '#f59e0b',\n                color: 'white',\n                padding: '0.75rem 1.5rem',\n                border: 'none',\n                borderRadius: '0.5rem',\n                fontSize: '1rem',\n                fontWeight: '600',\n                cursor: 'pointer',\n                transition: 'all 0.2s ease'\n              }}\n              onMouseEnter={(e) => e.target.style.backgroundColor = '#d97706'}\n              onMouseLeave={(e) => e.target.style.backgroundColor = '#f59e0b'}\n            >\n              Try Again\n            </button>\n            \n            <Link href=\"/login\" style={{ textDecoration: 'none' }}>\n              <button style={{\n                backgroundColor: 'transparent',\n                color: '#6b7280',\n                padding: '0.75rem 1.5rem',\n                border: '1px solid #d1d5db',\n                borderRadius: '0.5rem',\n                fontSize: '1rem',\n                fontWeight: '600',\n                cursor: 'pointer',\n                width: '100%',\n                transition: 'all 0.2s ease'\n              }}\n              onMouseEnter={(e) => {\n                e.target.style.backgroundColor = '#f9fafb';\n                e.target.style.borderColor = '#9ca3af';\n              }}\n              onMouseLeave={(e) => {\n                e.target.style.backgroundColor = 'transparent';\n                e.target.style.borderColor = '#d1d5db';\n              }}>\n                Back to Login\n              </button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ \n      minHeight: '100vh', \n      background: 'linear-gradient(135deg, #f59e0b, #d97706)',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      padding: '1rem'\n    }}>\n      <div style={{\n        backgroundColor: 'white',\n        borderRadius: '1rem',\n        padding: '2rem',\n        maxWidth: '400px',\n        width: '100%',\n        boxShadow: '0 25px 50px -12px rgba(0, 0, 0, 0.25)'\n      }}>\n        {/* Header */}\n        <div style={{ textAlign: 'center', marginBottom: '2rem' }}>\n          <h1 style={{\n            fontSize: '2rem',\n            fontWeight: 'bold',\n            color: '#f59e0b',\n            marginBottom: '0.5rem'\n          }}>\n            FXBOT\n          </h1>\n          <p style={{ color: '#6b7280', fontSize: '0.875rem' }}>\n            Professional Forex Investment Platform\n          </p>\n        </div>\n\n        {/* Form Header */}\n        <div style={{ textAlign: 'center', marginBottom: '1.5rem' }}>\n          <h2 style={{\n            fontSize: '1.5rem',\n            fontWeight: 'bold',\n            color: '#111827',\n            marginBottom: '0.5rem'\n          }}>\n            Forgot Password?\n          </h2>\n          <p style={{ color: '#6b7280', fontSize: '0.875rem' }}>\n            Enter your email address and we'll send you a link to reset your password.\n          </p>\n        </div>\n\n        {/* Error/Success Message */}\n        {error && (\n          <div style={{\n            backgroundColor: '#fef2f2',\n            border: '1px solid #fecaca',\n            color: '#dc2626',\n            padding: '0.75rem',\n            borderRadius: '0.5rem',\n            marginBottom: '1rem',\n            fontSize: '0.875rem'\n          }}>\n            {error}\n          </div>\n        )}\n\n        {/* Form */}\n        <form onSubmit={handleSubmit}>\n          <div style={{ marginBottom: '1.5rem' }}>\n            <label style={{\n              display: 'block',\n              fontSize: '0.875rem',\n              fontWeight: '600',\n              color: '#374151',\n              marginBottom: '0.5rem'\n            }}>\n              Email Address\n            </label>\n            <input\n              type=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              required\n              style={{\n                width: '100%',\n                padding: '0.75rem',\n                border: '1px solid #d1d5db',\n                borderRadius: '0.5rem',\n                fontSize: '1rem',\n                outline: 'none',\n                transition: 'border-color 0.2s ease',\n                boxSizing: 'border-box'\n              }}\n              onFocus={(e) => e.target.style.borderColor = '#f59e0b'}\n              onBlur={(e) => e.target.style.borderColor = '#d1d5db'}\n              placeholder=\"Enter your email address\"\n            />\n          </div>\n\n          <button\n            type=\"submit\"\n            disabled={loading}\n            style={{\n              width: '100%',\n              backgroundColor: loading ? '#9ca3af' : '#f59e0b',\n              color: 'white',\n              padding: '0.875rem',\n              border: 'none',\n              borderRadius: '0.5rem',\n              fontSize: '1rem',\n              fontWeight: '600',\n              cursor: loading ? 'not-allowed' : 'pointer',\n              transition: 'all 0.2s ease',\n              marginBottom: '1.5rem'\n            }}\n            onMouseEnter={(e) => {\n              if (!loading) e.target.style.backgroundColor = '#d97706';\n            }}\n            onMouseLeave={(e) => {\n              if (!loading) e.target.style.backgroundColor = '#f59e0b';\n            }}\n          >\n            {loading ? 'Sending...' : 'Send Reset Link'}\n          </button>\n        </form>\n\n        {/* Footer Links */}\n        <div style={{ textAlign: 'center' }}>\n          <p style={{ color: '#6b7280', fontSize: '0.875rem' }}>\n            Remember your password?{' '}\n            <Link href=\"/login\" style={{ color: '#f59e0b', textDecoration: 'none', fontWeight: '600' }}>\n              Back to Login\n            </Link>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ForgotPassword;","size_bytes":8813},"client/src/pages/Fund.jsx":{"content":"import { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Sidebar from '../components/Sidebar';\n\nexport default function Fund() {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchUserData = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        if (!token) {\n          window.location.href = '/login';\n          return;\n        }\n\n        const userResponse = await axios.get('/api/auth/me', {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n        setUser(userResponse.data);\n      } catch (error) {\n        if (error.response?.status === 401) {\n          localStorage.removeItem('token');\n          window.location.href = '/login';\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchUserData();\n  }, []);\n\n  const handleLogout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/';\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex h-screen bg-gray-100\">\n        <div className=\"w-64 bg-gray-900\"></div>\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen bg-gray-100\">\n      <Sidebar user={user} onLogout={handleLogout} />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <header className=\"bg-white shadow-sm border-b border-gray-200 px-6 py-4\">\n          <h1 className=\"text-2xl font-bold text-gray-900\">Fund</h1>\n        </header>\n\n        <main className=\"flex-1 overflow-y-auto bg-gray-50 p-6\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"bg-white rounded-2xl p-6 shadow-sm border border-gray-200\">\n              <h2 className=\"text-xl font-semibold text-gray-900 mb-6\">Fund Management</h2>\n              <div className=\"text-center py-12\">\n                <div className=\"w-16 h-16 bg-gray-200 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <span className=\"text-2xl\">💰</span>\n                </div>\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Fund Management Coming Soon</h3>\n                <p className=\"text-gray-500\">This feature will allow you to manage your investment funds.</p>\n              </div>\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":2569},"client/src/pages/Login.jsx":{"content":"import React, { useState } from 'react';\nimport { Link } from 'wouter';\nimport axios from 'axios';\nimport '../styles/login.css';\n\nexport default function Login() {\n  const [formData, setFormData] = useState({\n    email: '',\n    password: ''\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const handleChange = (e) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n\n    try {\n      const response = await axios.post('/api/auth/login', formData);\n      \n      if (response.data.success) {\n        localStorage.setItem('token', response.data.token);\n        localStorage.setItem('user', JSON.stringify(response.data.user));\n        \n        if (response.data.user.isAdmin) {\n          window.location.href = '/admin';\n        } else {\n          window.location.href = '/dashboard';\n        }\n      }\n    } catch (error) {\n      setError(error.response?.data?.error || 'Login failed. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"login-container\">\n      <div className=\"login-card\">\n        <div className=\"login-logo\">\n          <img src=\"/logo.png\" alt=\"FXBOT\" />\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"login-form\">\n          <h2>Sign In</h2>\n          \n          {error && (\n            <div className=\"error-message\">\n              {error}\n            </div>\n          )}\n\n          <div className=\"form-group\">\n            <label htmlFor=\"email\">Email Address</label>\n            <input\n              type=\"email\"\n              id=\"email\"\n              name=\"email\"\n              value={formData.email}\n              onChange={handleChange}\n              placeholder=\"Enter your email\"\n              required\n              data-testid=\"input-email\"\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"password\">Password</label>\n            <input\n              type=\"password\"\n              id=\"password\"\n              name=\"password\"\n              value={formData.password}\n              onChange={handleChange}\n              placeholder=\"Enter your password\"\n              required\n              data-testid=\"input-password\"\n            />\n          </div>\n\n          <div className=\"form-actions\">\n            <Link href=\"/forgot-password\" className=\"forgot-password-link\" data-testid=\"link-forgot-password\">\n              Forgot your password?\n            </Link>\n          </div>\n\n          <button \n            type=\"submit\" \n            className=\"login-button\"\n            disabled={loading}\n            data-testid=\"button-login\"\n          >\n            {loading ? 'Signing In...' : 'Sign In'}\n          </button>\n        </form>\n\n        <div className=\"login-footer\">\n          <p>\n            Don't have an account?{' '}\n            <Link href=\"/register\" className=\"link\" data-testid=\"link-register\">\n              Create account here\n            </Link>\n          </p>\n        </div>\n        \n        <div className=\"back-to-home\">\n          <Link href=\"/\" data-testid=\"link-home\">\n            ← Back to Home\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":3320},"client/src/pages/ModernDashboard.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport ModernSidebar from '../components/ModernSidebar';\nimport DasCountdown from '../components/DasCountdown';\nimport { \n  DollarSign, \n  Wallet, \n  TrendingUp, \n  Users,\n  Copy,\n  ChevronRight\n} from 'lucide-react';\n\nfunction ModernDashboard() {\n  const [user, setUser] = useState(null);\n  const [referralData, setReferralData] = useState(null);\n\n  // Fetch user data\n  const { data: userData, isLoading: userLoading, error: userError } = useQuery({\n    queryKey: ['/api/auth/me'],\n    retry: false,\n  });\n\n  // Fetch referral data\n  const { data: referrals, isLoading: referralsLoading, error: referralsError } = useQuery({\n    queryKey: ['/api/user/referrals'],\n    retry: false,\n    enabled: !!userData\n  });\n\n  // Fetch investment summary\n  const { data: investmentSummary } = useQuery({\n    queryKey: ['/api/user/investment-summary'],\n    retry: false,\n    enabled: !!userData\n  });\n\n  useEffect(() => {\n    if (userData) {\n      setUser(userData);\n    }\n  }, [userData]);\n\n  useEffect(() => {\n    if (referrals) {\n      setReferralData(referrals);\n    }\n  }, [referrals]);\n\n  const handleLogout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  };\n\n  const copyToClipboard = (text) => {\n    navigator.clipboard.writeText(text);\n    alert('Sponsor ID copied to clipboard!');\n  };\n\n  // Handle authentication errors\n  if (userError) {\n    if (userError.message.includes('401')) {\n      window.location.href = '/login';\n      return null;\n    }\n  }\n\n  // Show loading state\n  if (userLoading || (!user && !userError)) {\n    return (\n      <div style={{ \n        display: 'flex', \n        alignItems: 'center', \n        justifyContent: 'center', \n        minHeight: '100vh', \n        backgroundColor: '#f8fafc' \n      }}>\n        <div style={{ textAlign: 'center' }}>\n          <div style={{\n            width: '3rem',\n            height: '3rem',\n            border: '2px solid #e5e7eb',\n            borderTop: '2px solid #3b82f6',\n            borderRadius: '50%',\n            animation: 'spin 1s linear infinite',\n            margin: '0 auto 1rem'\n          }}></div>\n          <div style={{ fontSize: '1.125rem', color: '#374151' }}>Loading dashboard...</div>\n        </div>\n      </div>\n    );\n  }\n\n  const stats = [\n    {\n      title: 'Total Investment',\n      value: `$${(investmentSummary?.totalInvestmentAmount || 0).toFixed(2)}`,\n      icon: DollarSign,\n      color: 'from-blue-500 to-blue-600',\n      bgColor: 'rgba(59, 130, 246, 0.1)'\n    },\n    {\n      title: 'Total Earnings',\n      value: `$${(referralData?.stats?.totalEarnings || 0).toFixed(2)}`,\n      icon: Wallet,\n      color: 'from-green-500 to-green-600',\n      bgColor: 'rgba(34, 197, 94, 0.1)'\n    },\n    {\n      title: 'Active Referrals',\n      value: referralData?.stats?.totalReferrals || 0,\n      icon: Users,\n      color: 'from-purple-500 to-purple-600',\n      bgColor: 'rgba(139, 92, 246, 0.1)'\n    },\n    {\n      title: 'Credited Interest',\n      value: `6.00% (${investmentSummary?.dailyFsIncome ? `$${investmentSummary.dailyFsIncome.toFixed(2)}` : '$0.00'})`,\n      icon: DollarSign,\n      color: 'from-pink-500 to-pink-600',\n      bgColor: 'rgba(249, 115, 22, 0.1)'\n    },\n    {\n      title: 'DRI Income',\n      value: `$${(investmentSummary?.directIncome || 0).toFixed(2)}`,\n      icon: TrendingUp,\n      color: 'from-red-500 to-red-600',\n      bgColor: 'rgba(139, 92, 246, 0.1)'\n    },\n    {\n      title: 'Wallet Balance',\n      value: `$${(investmentSummary?.walletBalance || 0).toFixed(2)}`,\n      icon: Wallet,\n      color: 'from-green-700 to-green-800',\n      bgColor: 'rgba(34, 197, 94, 0.1)'\n    }\n  ];\n\n  const referralTiers = [\n    { level: 1, rate: '1.5%', count: referralData?.stats?.level1Count || 0 },\n    { level: 2, rate: '1.0%', count: referralData?.stats?.level2Count || 0 },\n    { level: 3, rate: '0.75%', count: referralData?.stats?.level3Count || 0 },\n    { level: 4, rate: '0.50%', count: referralData?.stats?.level4Count || 0 },\n    { level: 5, rate: '0.25%', count: referralData?.stats?.level5Count || 0 }\n  ];\n\n  return (\n    <div style={{ display: 'flex', minHeight: '100vh', backgroundColor: '#f8fafc' }}>\n      <ModernSidebar user={user} onLogout={handleLogout} />\n      \n      <main style={{ flex: 1, padding: '2rem' }}>\n        {/* Header */}\n        <div style={{ marginBottom: '2rem' }}>\n          <h1 style={{ \n            fontSize: '1.875rem', \n            fontWeight: 'bold', \n            color: '#111827', \n            margin: '0 0 0.5rem 0' \n          }}>\n            Welcome back, {user?.firstName}!\n          </h1>\n          <p style={{ color: '#6b7280', margin: 0 }}>\n            Track your FXBOT investments and referral earnings\n          </p>\n        </div>\n\n        {/* Stats Cards */}\n        <div style={{ \n          display: 'grid', \n          gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))', \n          gap: '1.5rem', \n          marginBottom: '2rem' \n        }}>\n          {stats.map((stat, index) => {\n            const IconComponent = stat.icon;\n            return (\n              <div\n                key={index}\n                style={{\n                  backgroundColor: 'white',\n                  borderRadius: '0.75rem',\n                  padding: '1.5rem',\n                  boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',\n                  border: '1px solid rgba(229, 231, 235, 0.5)',\n                  transition: 'all 0.2s ease'\n                }}\n                onMouseEnter={(e) => {\n                  e.target.style.boxShadow = '0 4px 12px rgba(0, 0, 0, 0.15)';\n                  e.target.style.transform = 'translateY(-2px)';\n                }}\n                onMouseLeave={(e) => {\n                  e.target.style.boxShadow = '0 1px 3px rgba(0, 0, 0, 0.1)';\n                  e.target.style.transform = 'none';\n                }}\n              >\n                <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                  <div>\n                    <p style={{ \n                      color: '#6b7280', \n                      fontSize: '0.875rem', \n                      margin: '0 0 0.5rem 0',\n                      fontWeight: '500'\n                    }}>\n                      {stat.title}\n                    </p>\n                    <p style={{ \n                      fontSize: '1.875rem', \n                      fontWeight: 'bold', \n                      color: '#111827',\n                      margin: 0\n                    }}>\n                      {stat.value}\n                    </p>\n                  </div>\n                  <div style={{\n                    width: '3rem',\n                    height: '3rem',\n                    background: stat.bgColor,\n                    borderRadius: '0.75rem',\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center'\n                  }}>\n                    <IconComponent style={{ width: '1.5rem', height: '1.5rem', color: '#3b82f6' }} />\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n\n        {/* DAS Countdown Section */}\n        <div style={{\n          backgroundColor: 'white',\n          borderRadius: '0.75rem',\n          padding: '2rem',\n          boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',\n          border: '1px solid rgba(229, 231, 235, 0.5)',\n          marginBottom: '2rem'\n        }}>\n          <DasCountdown userId={user?._id} />\n        </div>\n\n        {/* Main Content Grid */}\n        <div style={{ \n          display: 'grid', \n          gridTemplateColumns: '1fr 400px', \n          gap: '2rem',\n          '@media (max-width: 1024px)': {\n            gridTemplateColumns: '1fr'\n          }\n        }}>\n          {/* Referral Program Card */}\n          <div style={{\n            backgroundColor: 'white',\n            borderRadius: '0.75rem',\n            padding: '2rem',\n            boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',\n            border: '1px solid rgba(229, 231, 235, 0.5)'\n          }}>\n            {/* Header */}\n            <div style={{ \n              display: 'flex', \n              alignItems: 'center', \n              justifyContent: 'space-between', \n              marginBottom: '2rem' \n            }}>\n              <div style={{ display: 'flex', alignItems: 'center' }}>\n                <div style={{\n                  width: '2.5rem',\n                  height: '2.5rem',\n                  background: 'linear-gradient(135deg, #3b82f6, #8b5cf6)',\n                  borderRadius: '0.5rem',\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  marginRight: '0.75rem'\n                }}>\n                  <Users style={{ width: '1.25rem', height: '1.25rem', color: 'white' }} />\n                </div>\n                <div>\n                  <h3 style={{ \n                    fontSize: '1.25rem', \n                    fontWeight: 'bold', \n                    color: '#111827', \n                    margin: 0 \n                  }}>\n                    Referral Program\n                  </h3>\n                  <p style={{ color: '#6b7280', fontSize: '0.875rem', margin: 0 }}>\n                    SmartLine Income - 5 Level Commission\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            {/* Sponsor ID Section */}\n            <div style={{\n              background: 'linear-gradient(135deg, #3b82f6, #8b5cf6)',\n              borderRadius: '0.75rem',\n              padding: '1.5rem',\n              marginBottom: '2rem',\n              color: 'white'\n            }}>\n              <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <div>\n                  <p style={{ \n                    color: 'rgba(255, 255, 255, 0.8)', \n                    fontSize: '0.875rem', \n                    margin: '0 0 0.5rem 0',\n                    fontWeight: '500'\n                  }}>\n                    Your Sponsor ID\n                  </p>\n                  <p style={{ \n                    fontSize: '1.5rem', \n                    fontWeight: 'bold', \n                    margin: '0 0 0.25rem 0' \n                  }}>\n                    {user?.ownSponsorId}\n                  </p>\n                  <p style={{ \n                    color: 'rgba(255, 255, 255, 0.7)', \n                    fontSize: '0.75rem',\n                    margin: 0\n                  }}>\n                    Share this ID to earn commissions\n                  </p>\n                </div>\n                <button\n                  onClick={() => copyToClipboard(user?.ownSponsorId)}\n                  style={{\n                    background: 'rgba(255, 255, 255, 0.2)',\n                    border: '1px solid rgba(255, 255, 255, 0.3)',\n                    color: 'white',\n                    padding: '0.75rem 1rem',\n                    borderRadius: '0.5rem',\n                    display: 'flex',\n                    alignItems: 'center',\n                    fontSize: '0.875rem',\n                    fontWeight: '500',\n                    cursor: 'pointer',\n                    transition: 'all 0.2s ease'\n                  }}\n                  onMouseEnter={(e) => {\n                    e.target.style.background = 'rgba(255, 255, 255, 0.3)';\n                  }}\n                  onMouseLeave={(e) => {\n                    e.target.style.background = 'rgba(255, 255, 255, 0.2)';\n                  }}\n                >\n                  <Copy style={{ width: '1rem', height: '1rem', marginRight: '0.5rem' }} />\n                  Copy ID\n                </button>\n              </div>\n            </div>\n\n            {/* Commission Structure */}\n            <div>\n              <h4 style={{ \n                fontSize: '1.125rem', \n                fontWeight: 'bold', \n                color: '#111827', \n                margin: '0 0 1rem 0' \n              }}>\n                Commission Structure\n              </h4>\n              <div style={{ display: 'flex', flexDirection: 'column', gap: '0.75rem' }}>\n                {referralTiers.map((tier, index) => {\n                  const colors = [\n                    '#ef4444', '#f97316', '#eab308', '#22c55e', '#3b82f6'\n                  ];\n                  \n                  return (\n                    <div\n                      key={tier.level}\n                      style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                        justifyContent: 'space-between',\n                        padding: '1rem',\n                        backgroundColor: '#f8fafc',\n                        borderRadius: '0.5rem',\n                        border: `2px solid ${colors[index]}20`,\n                        borderLeft: `4px solid ${colors[index]}`\n                      }}\n                    >\n                      <div style={{ display: 'flex', alignItems: 'center' }}>\n                        <div style={{\n                          width: '2rem',\n                          height: '2rem',\n                          backgroundColor: colors[index],\n                          color: 'white',\n                          borderRadius: '0.375rem',\n                          display: 'flex',\n                          alignItems: 'center',\n                          justifyContent: 'center',\n                          marginRight: '0.75rem',\n                          fontSize: '0.875rem',\n                          fontWeight: 'bold'\n                        }}>\n                          {tier.level}\n                        </div>\n                        <div>\n                          <span style={{ fontWeight: '600', color: '#111827' }}>\n                            Level {tier.level}\n                          </span>\n                          <p style={{ \n                            color: '#6b7280', \n                            fontSize: '0.75rem', \n                            margin: 0 \n                          }}>\n                            {tier.rate} commission\n                          </p>\n                        </div>\n                      </div>\n                      <div style={{ textAlign: 'right' }}>\n                        <div style={{ \n                          fontSize: '1.25rem', \n                          fontWeight: 'bold', \n                          color: '#111827' \n                        }}>\n                          {tier.count}\n                        </div>\n                        <div style={{ \n                          fontSize: '0.75rem', \n                          color: '#6b7280' \n                        }}>\n                          referrals\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n\n          {/* Quick Actions Card */}\n          <div style={{\n            backgroundColor: 'white',\n            borderRadius: '0.75rem',\n            padding: '2rem',\n            boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',\n            border: '1px solid rgba(229, 231, 235, 0.5)',\n            height: 'fit-content'\n          }}>\n            <h3 style={{ \n              fontSize: '1.25rem', \n              fontWeight: 'bold', \n              color: '#111827', \n              margin: '0 0 1.5rem 0' \n            }}>\n              Quick Actions\n            </h3>\n            \n            <div style={{ display: 'flex', flexDirection: 'column', gap: '0.75rem' }}>\n              <button style={{\n                width: '100%',\n                background: 'linear-gradient(135deg, #22c55e, #16a34a)',\n                color: 'white',\n                fontWeight: '600',\n                padding: '0.875rem 1rem',\n                borderRadius: '0.5rem',\n                border: 'none',\n                cursor: 'pointer',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                transition: 'all 0.2s ease'\n              }}\n              onMouseEnter={(e) => {\n                e.target.style.transform = 'translateY(-1px)';\n                e.target.style.boxShadow = '0 4px 12px rgba(34, 197, 94, 0.4)';\n              }}\n              onMouseLeave={(e) => {\n                e.target.style.transform = 'none';\n                e.target.style.boxShadow = 'none';\n              }}\n              >\n                <DollarSign style={{ width: '1.25rem', height: '1.25rem', marginRight: '0.5rem' }} />\n                Invest Now\n              </button>\n              \n              <button style={{\n                width: '100%',\n                background: 'linear-gradient(135deg, #3b82f6, #2563eb)',\n                color: 'white',\n                fontWeight: '600',\n                padding: '0.875rem 1rem',\n                borderRadius: '0.5rem',\n                border: 'none',\n                cursor: 'pointer',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                transition: 'all 0.2s ease'\n              }}\n              onMouseEnter={(e) => {\n                e.target.style.transform = 'translateY(-1px)';\n                e.target.style.boxShadow = '0 4px 12px rgba(59, 130, 246, 0.4)';\n              }}\n              onMouseLeave={(e) => {\n                e.target.style.transform = 'none';\n                e.target.style.boxShadow = 'none';\n              }}\n              >\n                <Wallet style={{ width: '1.25rem', height: '1.25rem', marginRight: '0.5rem' }} />\n                View Portfolio\n              </button>\n              \n              <button style={{\n                width: '100%',\n                background: 'linear-gradient(135deg, #8b5cf6, #7c3aed)',\n                color: 'white',\n                fontWeight: '600',\n                padding: '0.875rem 1rem',\n                borderRadius: '0.5rem',\n                border: 'none',\n                cursor: 'pointer',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                transition: 'all 0.2s ease'\n              }}\n              onMouseEnter={(e) => {\n                e.target.style.transform = 'translateY(-1px)';\n                e.target.style.boxShadow = '0 4px 12px rgba(139, 92, 246, 0.4)';\n              }}\n              onMouseLeave={(e) => {\n                e.target.style.transform = 'none';\n                e.target.style.boxShadow = 'none';\n              }}\n              >\n                <Users style={{ width: '1.25rem', height: '1.25rem', marginRight: '0.5rem' }} />\n                Referral Tree\n              </button>\n            </div>\n\n            {/* Package Info */}\n            <div style={{\n              marginTop: '2rem',\n              padding: '1rem',\n              backgroundColor: '#f8fafc',\n              borderRadius: '0.5rem',\n              border: '1px solid #e5e7eb'\n            }}>\n              <h4 style={{ \n                fontSize: '0.875rem', \n                fontWeight: '600', \n                color: '#111827', \n                margin: '0 0 0.5rem 0' \n              }}>\n                FS Income Package\n              </h4>\n              <p style={{ \n                fontSize: '0.75rem', \n                color: '#6b7280', \n                margin: '0 0 0.5rem 0' \n              }}>\n                6% Monthly ROI until 2x returns\n              </p>\n              <div style={{ \n                fontSize: '0.75rem', \n                color: '#059669',\n                fontWeight: '600'\n              }}>\n                Minimum: $250 • Duration: ~17 months\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default ModernDashboard;","size_bytes":19961},"client/src/pages/Profile.jsx":{"content":"import { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Sidebar from '../components/Sidebar';\nimport { ObjectUploader } from '../components/ObjectUploader';\n\nexport default function Profile() {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchUserData = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        if (!token) {\n          window.location.href = '/login';\n          return;\n        }\n\n        const userResponse = await axios.get('/api/auth/me', {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n        setUser(userResponse.data);\n      } catch (error) {\n        if (error.response?.status === 401) {\n          localStorage.removeItem('token');\n          window.location.href = '/login';\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchUserData();\n  }, []);\n\n  const handleLogout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/';\n  };\n\n  // KYC Upload handlers\n  const handleGetKycUploadParameters = async () => {\n    const token = localStorage.getItem('token');\n    const response = await axios.post('/api/kyc/upload-url', {}, {\n      headers: { Authorization: `Bearer ${token}` }\n    });\n    return {\n      method: 'PUT',\n      url: response.data.uploadURL,\n    };\n  };\n\n  const handleKycUploadComplete = async (result) => {\n    if (result.successful.length > 0) {\n      const uploadedFile = result.successful[0];\n      const fileUrl = uploadedFile.uploadURL;\n      \n      try {\n        const token = localStorage.getItem('token');\n        await axios.post('/api/kyc/submit', {\n          documentUrl: fileUrl,\n          fileName: uploadedFile.name,\n          fileType: uploadedFile.type\n        }, {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n\n        // Refresh user data\n        const userResponse = await axios.get('/api/auth/me', { \n          headers: { Authorization: `Bearer ${token}` } \n        });\n        setUser(userResponse.data);\n        \n        alert('KYC document submitted successfully! It will be reviewed within 24 hours.');\n      } catch (error) {\n        console.error('Error submitting KYC document:', error);\n        alert('Error submitting KYC document. Please try again.');\n      }\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex h-screen bg-gray-100\">\n        <div className=\"w-64 bg-gray-900\"></div>\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen bg-gray-100\">\n      <Sidebar user={user} onLogout={handleLogout} />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <header className=\"bg-white shadow-sm border-b border-gray-200 px-6 py-4\">\n          <h1 className=\"text-2xl font-bold text-gray-900\">User Profile</h1>\n        </header>\n\n        <main className=\"flex-1 overflow-y-auto p-4 bg-slate-50\">\n          <div className=\"max-w-5xl mx-auto space-y-6\">\n            \n            {/* Profile Header Card */}\n            <div className=\"bg-white rounded-lg p-6 shadow-sm border border-slate-200\">\n              <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between space-y-4 lg:space-y-0\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-16 h-16 bg-slate-600 rounded-lg flex items-center justify-center shadow-sm\">\n                    <span className=\"text-xl font-semibold text-white\">\n                      {user?.firstName?.charAt(0)}{user?.lastName?.charAt(0)}\n                    </span>\n                  </div>\n                  <div>\n                    <h1 className=\"text-2xl font-semibold text-slate-900 mb-2\">\n                      {user?.firstName} {user?.lastName}\n                    </h1>\n                    <p className=\"text-slate-600 font-medium\">{user?.email}</p>\n                    <p className=\"text-slate-500 text-sm mt-1\">Member since {new Date(user?.createdAt).toLocaleDateString()}</p>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"px-3 py-1 bg-green-100 text-green-800 rounded-full text-sm font-medium\">\n                    Active User\n                  </div>\n                  <p className=\"text-sm text-slate-500 mt-2\">ID: {user?.ownSponsorId}</p>\n                </div>\n              </div>\n            </div>\n\n            {/* Stats Overview */}\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\n              <div className=\"bg-white rounded-lg p-4 shadow-sm border border-slate-200\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-slate-600 mb-1\">Total Earnings</p>\n                    <p className=\"text-xl font-semibold text-slate-900\">${(user?.totalEarnings || 0).toFixed(2)}</p>\n                  </div>\n                  <div className=\"w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center\">\n                    <svg className=\"w-5 h-5 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1\" />\n                    </svg>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"bg-white rounded-lg p-4 shadow-sm border border-slate-200\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-slate-600 mb-1\">Referrals</p>\n                    <p className=\"text-xl font-semibold text-slate-900\">{user?.referralCount || 0}</p>\n                  </div>\n                  <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                    <svg className=\"w-5 h-5 text-blue-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 515.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 919.288 0M15 7a3 3 0 11-6 0 3 3 0 616 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z\" />\n                    </svg>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"bg-white rounded-lg p-4 shadow-sm border border-slate-200\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-slate-600 mb-1\">Account Type</p>\n                    <p className=\"text-base font-semibold text-slate-900\">{user?.role === 'admin' ? 'Administrator' : 'Member'}</p>\n                  </div>\n                  <div className=\"w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center\">\n                    <svg className=\"w-5 h-5 text-purple-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\" />\n                    </svg>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"bg-white rounded-lg p-4 shadow-sm border border-slate-200\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-slate-600 mb-1\">Status</p>\n                    <p className=\"text-base font-semibold text-slate-900\">{user?.isActive ? 'Active' : 'Inactive'}</p>\n                  </div>\n                  <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${\n                    user?.isActive ? 'bg-green-100' : 'bg-red-100'\n                  }`}>\n                    <svg className={`w-5 h-5 ${user?.isActive ? 'text-green-600' : 'text-red-600'}`} fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                    </svg>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Personal Information */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <div className=\"bg-white rounded-lg p-6 shadow-sm border border-slate-200\">\n                <div className=\"flex items-center mb-6\">\n                  <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                    <svg className=\"w-5 h-5 text-blue-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\" />\n                    </svg>\n                  </div>\n                  <h2 className=\"text-xl font-semibold text-slate-800 ml-3\">Personal Information</h2>\n                </div>\n                \n                <div className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-slate-600 mb-2\">First Name</label>\n                      <div className=\"p-3 bg-slate-50 border border-slate-200 rounded-lg text-slate-900 font-medium\">\n                        {user?.firstName || 'Not provided'}\n                      </div>\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-slate-600 mb-2\">Last Name</label>\n                      <div className=\"p-3 bg-slate-50 border border-slate-200 rounded-lg text-slate-900 font-medium\">\n                        {user?.lastName || 'Not provided'}\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-600 mb-2\">Email Address</label>\n                    <div className=\"p-3 bg-slate-50 border border-slate-200 rounded-lg text-slate-900 font-medium\">\n                      {user?.email || 'Not provided'}\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-600 mb-2\">Mobile Number</label>\n                    <div className=\"p-3 bg-slate-50 border border-slate-200 rounded-lg text-slate-900 font-medium\">\n                      {user?.mobile || 'Not provided'}\n                    </div>\n                  </div>\n\n                  {/* KYC Document Upload Section */}\n                  <div className=\"border-t border-slate-200 pt-4 mt-6\">\n                    <label className=\"block text-sm font-medium text-slate-600 mb-3\">KYC Document</label>\n                    \n                    {/* KYC Status Display */}\n                    <div className=\"mb-4\">\n                      {user?.kycStatus === 'approved' ? (\n                        <div className=\"flex items-center space-x-2 p-3 bg-green-50 border border-green-200 rounded-lg\">\n                          <svg className=\"w-5 h-5 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                          </svg>\n                          <span className=\"text-green-800 font-medium\">Verified</span>\n                        </div>\n                      ) : user?.kycStatus === 'rejected' ? (\n                        <div className=\"flex items-center space-x-2 p-3 bg-red-50 border border-red-200 rounded-lg mb-3\">\n                          <svg className=\"w-5 h-5 text-red-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\" />\n                          </svg>\n                          <span className=\"text-red-800 font-medium\">Document rejected - Please upload again</span>\n                        </div>\n                      ) : user?.kycStatus === 'pending' ? (\n                        <div className=\"flex items-center space-x-2 p-3 bg-yellow-50 border border-yellow-200 rounded-lg\">\n                          <svg className=\"w-5 h-5 text-yellow-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                          </svg>\n                          <span className=\"text-yellow-800 font-medium\">Under Review</span>\n                        </div>\n                      ) : (\n                        <div className=\"flex items-center space-x-2 p-3 bg-slate-50 border border-slate-200 rounded-lg\">\n                          <svg className=\"w-5 h-5 text-slate-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                          </svg>\n                          <span className=\"text-slate-600 font-medium\">No document uploaded</span>\n                        </div>\n                      )}\n                    </div>\n\n                    {/* Upload Button - Show only if not approved or if rejected */}\n                    {user?.kycStatus !== 'approved' && (\n                      <ObjectUploader\n                        maxNumberOfFiles={1}\n                        maxFileSize={5242880} // 5MB\n                        acceptedFileTypes={['.pdf', '.jpg', '.jpeg', '.png']}\n                        onGetUploadParameters={handleGetKycUploadParameters}\n                        onComplete={handleKycUploadComplete}\n                        buttonClassName=\"w-full\"\n                      >\n                        <div className=\"flex items-center justify-center space-x-2\">\n                          <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12\" />\n                          </svg>\n                          <span>Submit KYC Document</span>\n                        </div>\n                      </ObjectUploader>\n                    )}\n\n                    <p className=\"text-xs text-slate-500 mt-2\">\n                      Accepted formats: PDF, JPG, PNG. Max size: 5MB\n                    </p>\n                  </div>\n                </div>\n              </div>\n\n              {/* Account Details */}\n              <div className=\"bg-white rounded-lg p-6 shadow-sm border border-slate-200\">\n                <div className=\"flex items-center mb-6\">\n                  <div className=\"w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center\">\n                    <svg className=\"w-5 h-5 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n                    </svg>\n                  </div>\n                  <h2 className=\"text-xl font-semibold text-slate-800 ml-3\">Account Details</h2>\n                </div>\n                \n                <div className=\"space-y-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-600 mb-2\">User ID</label>\n                    <div className=\"p-3 bg-slate-50 border border-slate-200 rounded-lg text-slate-900 font-mono text-sm\">\n                      {user?._id || 'Not available'}\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-600 mb-2\">Sponsor ID</label>\n                    <div className=\"p-3 bg-slate-50 border border-slate-200 rounded-lg text-slate-900 font-mono text-sm\">\n                      {user?.ownSponsorId || 'Not available'}\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-600 mb-2\">Referred By</label>\n                    <div className=\"p-3 bg-slate-50 border border-slate-200 rounded-lg text-slate-900 font-mono text-sm\">\n                      {user?.parentSponsorId || 'Direct signup'}\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-slate-600 mb-2\">Registration Date</label>\n                    <div className=\"p-3 bg-slate-50 border border-slate-200 rounded-lg text-slate-900 font-medium\">\n                      {user?.createdAt ? new Date(user.createdAt).toLocaleDateString('en-US', {\n                        year: 'numeric',\n                        month: 'long',\n                        day: 'numeric',\n                        hour: '2-digit',\n                        minute: '2-digit'\n                      }) : 'Not available'}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Earnings Summary */}\n            <div className=\"bg-white rounded-lg p-6 shadow-sm border border-slate-200\">\n              <div className=\"flex items-center mb-6\">\n                <div className=\"w-10 h-10 bg-emerald-100 rounded-lg flex items-center justify-center\">\n                  <svg className=\"w-5 h-5 text-emerald-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\n                  </svg>\n                </div>\n                <h2 className=\"text-xl font-semibold text-slate-800 ml-3\">Earnings Summary</h2>\n              </div>\n              \n              <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-4\">\n                {[1, 2, 3, 4, 5].map(level => {\n                  const count = user?.[`level${level}Count`] || 0;\n                  const earnings = user?.[`level${level}Earnings`] || 0;\n                  const commission = level === 1 ? '1.5%' : level === 2 ? '1.0%' : level === 3 ? '0.75%' : level === 4 ? '0.5%' : '0.25%';\n                  \n                  return (\n                    <div key={level} className=\"bg-slate-50 border border-slate-200 rounded-lg p-4 text-center\">\n                      <div className=\"w-8 h-8 bg-slate-200 rounded-full flex items-center justify-center mx-auto mb-3\">\n                        <span className=\"text-sm font-semibold text-slate-700\">{level}</span>\n                      </div>\n                      <h3 className=\"text-sm font-medium text-slate-600 mb-2\">Level {level}</h3>\n                      <div className=\"text-base font-semibold text-slate-900 mb-1\">{count} users</div>\n                      <div className=\"text-sm font-semibold text-green-600\">${earnings.toFixed(2)}</div>\n                      <div className=\"text-xs text-slate-500\">{commission} rate</div>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":20286},"client/src/pages/ReferralTree.jsx":{"content":"import { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Sidebar from '../components/Sidebar';\n\nexport default function ReferralTree() {\n  const [user, setUser] = useState(null);\n  const [referralData, setReferralData] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        if (!token) {\n          window.location.href = '/login';\n          return;\n        }\n\n        const [userResponse, referralResponse] = await Promise.all([\n          axios.get('/api/auth/me', { headers: { Authorization: `Bearer ${token}` } }),\n          axios.get('/api/user/referrals', { headers: { Authorization: `Bearer ${token}` } })\n        ]);\n\n        setUser(userResponse.data);\n        setReferralData(referralResponse.data);\n      } catch (error) {\n        if (error.response?.status === 401) {\n          localStorage.removeItem('token');\n          window.location.href = '/login';\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const handleLogout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/';\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex h-screen bg-gray-100\">\n        <div className=\"w-64 bg-gray-900\"></div>\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen bg-gray-100\">\n      <Sidebar user={user} onLogout={handleLogout} />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <header className=\"bg-white shadow-sm border-b border-gray-200 px-6 py-4\">\n          <h1 className=\"text-2xl font-bold text-gray-900\">Referral Network</h1>\n        </header>\n\n        <main className=\"flex-1 overflow-y-auto p-4 bg-slate-50\">\n          <div className=\"max-w-5xl mx-auto space-y-6\">\n            {/* Overview Cards */}\n            <div className=\"bg-white rounded-lg p-6 shadow-sm border border-slate-200\">\n              <div className=\"text-center mb-6\">\n                <h1 className=\"text-2xl font-semibold text-slate-800 mb-2\">Referral Network</h1>\n                <p className=\"text-slate-600 text-sm\">Track your multi-level referral network and commission earnings</p>\n              </div>\n              \n              <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\n                <div className=\"bg-slate-50 border border-slate-200 rounded-lg p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-slate-600 mb-1\">Total Referrals</p>\n                      <p className=\"text-xl font-semibold text-slate-900\">{referralData?.referralCount || 0}</p>\n                      <p className=\"text-xs text-slate-500\">Active network</p>\n                    </div>\n                    <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                      <svg className=\"w-5 h-5 text-blue-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 515.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 919.288 0M15 7a3 3 0 11-6 0 3 3 0 616 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z\" />\n                      </svg>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"bg-slate-50 border border-slate-200 rounded-lg p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-slate-600 mb-1\">Total Earnings</p>\n                      <p className=\"text-xl font-semibold text-slate-900\">${(referralData?.totalEarnings || 0).toFixed(2)}</p>\n                      <p className=\"text-xs text-slate-500\">From all referrals</p>\n                    </div>\n                    <div className=\"w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center\">\n                      <svg className=\"w-5 h-5 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1\" />\n                      </svg>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"bg-slate-50 border border-slate-200 rounded-lg p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-slate-600 mb-1\">Your Sponsor ID</p>\n                      <p className=\"text-base font-mono font-semibold text-slate-900\">{referralData?.ownSponsorId}</p>\n                      <p className=\"text-xs text-slate-500\">Share to invite</p>\n                    </div>\n                    <button\n                      onClick={() => {\n                        navigator.clipboard.writeText(referralData?.ownSponsorId || '');\n                        alert('Sponsor ID copied to clipboard!');\n                      }}\n                      className=\"w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center hover:bg-purple-200 transition-colors\"\n                    >\n                      <svg className=\"w-5 h-5 text-purple-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z\" />\n                      </svg>\n                    </button>\n                  </div>\n                </div>\n                \n                <div className=\"bg-slate-50 border border-slate-200 rounded-lg p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-slate-600 mb-1\">Network Depth</p>\n                      <p className=\"text-xl font-semibold text-slate-900\">5 Levels</p>\n                      <p className=\"text-xs text-slate-500\">Maximum earning depth</p>\n                    </div>\n                    <div className=\"w-10 h-10 bg-orange-100 rounded-lg flex items-center justify-center\">\n                      <svg className=\"w-5 h-5 text-orange-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M3.055 11H5a2 2 0 012 2v1a2 2 0 002 2 2 2 0 012 2v2.945M8 3.935V5.5A2.5 2.5 0 0010.5 8h.5a2 2 0 012 2 2 2 0 104 0 2 2 0 012-2h1.064M15 20.488V18a2 2 0 012-2h3.064\" />\n                      </svg>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* 5-Level Commission Structure */}\n            <div className=\"bg-white rounded-lg p-6 shadow-sm border border-slate-200\">\n              <div className=\"flex items-center mb-6\">\n                <div className=\"w-10 h-10 bg-indigo-100 rounded-lg flex items-center justify-center\">\n                  <svg className=\"w-5 h-5 text-indigo-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\n                  </svg>\n                </div>\n                <h2 className=\"text-xl font-semibold text-slate-800 ml-3\">5-Level Commission Structure</h2>\n              </div>\n              \n              <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-4\">\n                {[1, 2, 3, 4, 5].map(level => {\n                  const count = referralData?.[`level${level}Count`] || 0;\n                  const earnings = referralData?.[`level${level}Earnings`] || 0;\n                  const commission = level === 1 ? '1.5%' : level === 2 ? '1.0%' : level === 3 ? '0.75%' : level === 4 ? '0.5%' : '0.25%';\n                  \n                  return (\n                    <div key={level} className=\"bg-slate-50 border border-slate-200 rounded-lg p-4 text-center\">\n                      <div className=\"w-8 h-8 bg-slate-200 rounded-full flex items-center justify-center mx-auto mb-3\">\n                        <span className=\"text-sm font-semibold text-slate-700\">{level}</span>\n                      </div>\n                      <h3 className=\"text-sm font-medium text-slate-600 mb-2\">Level {level}</h3>\n                      <div className=\"text-lg font-semibold text-slate-900 mb-1\">{count}</div>\n                      <div className=\"text-xs text-slate-500 mb-2\">Referrals</div>\n                      <div className=\"bg-white border border-slate-200 rounded p-2\">\n                        <div className=\"text-sm font-semibold text-slate-900\">${earnings.toFixed(2)}</div>\n                        <div className=\"text-xs text-slate-500\">{commission} commission</div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n\n            {/* Direct Referrals List */}\n            <div className=\"bg-white rounded-lg p-6 shadow-sm border border-slate-200\">\n              <div className=\"flex items-center mb-6\">\n                <div className=\"w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center\">\n                  <svg className=\"w-5 h-5 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 515.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 919.288 0M15 7a3 3 0 11-6 0 3 3 0 616 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z\" />\n                  </svg>\n                </div>\n                <h2 className=\"text-xl font-semibold text-slate-800 ml-3\">Your Direct Referrals</h2>\n              </div>\n              \n              <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n                {referralData?.referrals && referralData.referrals.length > 0 ? (\n                  referralData.referrals.map((referral, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-4 bg-slate-50 border border-slate-200 rounded-lg\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-10 h-10 bg-slate-600 rounded-lg flex items-center justify-center\">\n                          <span className=\"text-white font-semibold text-sm\">\n                            {referral.firstName?.charAt(0)}{referral.lastName?.charAt(0)}\n                          </span>\n                        </div>\n                        <div>\n                          <h3 className=\"font-medium text-slate-900\">{referral.firstName} {referral.lastName}</h3>\n                          <p className=\"text-sm text-slate-600\">{referral.email}</p>\n                          <p className=\"text-xs text-slate-500\">ID: {referral.ownSponsorId}</p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className={`px-3 py-1 rounded-full text-xs font-medium ${\n                          referral.isActive \n                            ? 'bg-green-100 text-green-800' \n                            : 'bg-gray-100 text-gray-800'\n                        }`}>\n                          {referral.isActive ? 'Active' : 'Inactive'}\n                        </div>\n                        <p className=\"text-xs text-slate-500 mt-1\">\n                          Joined: {new Date(referral.createdAt).toLocaleDateString()}\n                        </p>\n                      </div>\n                    </div>\n                  ))\n                ) : (\n                  <div className=\"text-center py-12\">\n                    <div className=\"w-16 h-16 bg-slate-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                      <svg className=\"w-8 h-8 text-slate-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 515.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 919.288 0M15 7a3 3 0 11-6 0 3 3 0 616 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z\" />\n                      </svg>\n                    </div>\n                    <h3 className=\"text-lg font-medium text-slate-900 mb-2\">No Direct Referrals Yet</h3>\n                    <p className=\"text-slate-600\">Share your sponsor ID to start building your network!</p>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":13659},"client/src/pages/Register.jsx":{"content":"import { useState } from 'react';\nimport { Link } from 'wouter';\nimport axios from 'axios';\nimport '../styles/login.css';\n\nexport default function Register() {\n  const [formData, setFormData] = useState({\n    sponsorId: '',\n    firstName: '',\n    lastName: '',\n    mobile: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n    acceptTerms: false\n  });\n  const [errors, setErrors] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [success, setSuccess] = useState('');\n\n  const handleInputChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: type === 'checkbox' ? checked : value\n    }));\n    \n    // Clear error when user starts typing\n    if (errors[name]) {\n      setErrors(prev => ({ ...prev, [name]: '' }));\n    }\n  };\n\n  const validateForm = () => {\n    const newErrors = {};\n\n    if (!formData.sponsorId.trim()) {\n      newErrors.sponsorId = 'Sponsor ID is required';\n    }\n\n    if (!formData.firstName.trim()) {\n      newErrors.firstName = 'First name is required';\n    }\n\n    if (!formData.lastName.trim()) {\n      newErrors.lastName = 'Last name is required';\n    }\n\n    if (!formData.mobile.trim()) {\n      newErrors.mobile = 'Mobile number is required';\n    } else if (!/^\\d{10}$/.test(formData.mobile)) {\n      newErrors.mobile = 'Mobile number must be exactly 10 digits';\n    }\n\n    if (!formData.email.trim()) {\n      newErrors.email = 'Email is required';\n    } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(formData.email)) {\n      newErrors.email = 'Please enter a valid email address';\n    }\n\n    if (!formData.password) {\n      newErrors.password = 'Password is required';\n    } else if (formData.password.length < 8) {\n      newErrors.password = 'Password must be at least 8 characters';\n    }\n\n    if (!formData.confirmPassword) {\n      newErrors.confirmPassword = 'Please confirm your password';\n    } else if (formData.password !== formData.confirmPassword) {\n      newErrors.confirmPassword = 'Passwords do not match';\n    }\n\n    if (!formData.acceptTerms) {\n      newErrors.acceptTerms = 'You must accept the terms and conditions';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    if (!validateForm()) {\n      return;\n    }\n\n    setLoading(true);\n    setErrors({});\n    setSuccess('');\n\n    try {\n      const { confirmPassword, acceptTerms, ...submitData } = formData;\n      const response = await axios.post('/api/auth/register', submitData);\n      \n      if (response.data.success) {\n        setSuccess('Account created successfully! Redirecting to login...');\n        // Redirect to login page after 2 seconds\n        setTimeout(() => {\n          window.location.href = '/login';\n        }, 2000);\n      }\n    } catch (error) {\n      const errorMessage = error.response?.data?.error || 'Registration failed. Please try again.';\n      setErrors({ general: errorMessage });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"login-container\">\n      <div className=\"login-card\">\n        <div className=\"login-header\">\n          <img src=\"/logo.png\" alt=\"FXBOT\" className=\"login-logo\" />\n          <h1 className=\"login-title\">Create Account</h1>\n          <p className=\"login-subtitle\">Join FXBOT and start your trading journey</p>\n        </div>\n\n        {success && (\n          <div className=\"success-message\" data-testid=\"success-message\">\n            {success}\n          </div>\n        )}\n\n        {errors.general && (\n          <div className=\"error-message\" data-testid=\"error-message\">\n            {errors.general}\n          </div>\n        )}\n\n        <form onSubmit={handleSubmit} className=\"login-form\">\n          <div className=\"form-group\">\n            <label htmlFor=\"sponsorId\" className=\"form-label\">\n              Sponsor ID <span className=\"required\">*</span>\n            </label>\n            <input\n              type=\"text\"\n              id=\"sponsorId\"\n              name=\"sponsorId\"\n              value={formData.sponsorId}\n              onChange={handleInputChange}\n              className={`form-input ${errors.sponsorId ? 'error' : ''}`}\n              placeholder=\"Enter sponsor ID (e.g., FX123456)\"\n              data-testid=\"input-sponsor-id\"\n            />\n            {errors.sponsorId && <span className=\"error-message\">{errors.sponsorId}</span>}\n            <small style={{ color: '#718096', fontSize: '12px', marginTop: '4px', display: 'block' }}>\n              Ask your referrer for their sponsor ID. For testing: <strong style={{ color: '#667eea' }}>FX123456</strong>\n            </small>\n          </div>\n\n          <div className=\"form-row\">\n            <div className=\"form-group\">\n              <label htmlFor=\"firstName\" className=\"form-label\">\n                First Name <span className=\"required\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                id=\"firstName\"\n                name=\"firstName\"\n                value={formData.firstName}\n                onChange={handleInputChange}\n                className={`form-input ${errors.firstName ? 'error' : ''}`}\n                placeholder=\"Enter first name\"\n                data-testid=\"input-first-name\"\n              />\n              {errors.firstName && <span className=\"error-message\">{errors.firstName}</span>}\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"lastName\" className=\"form-label\">\n                Last Name <span className=\"required\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                id=\"lastName\"\n                name=\"lastName\"\n                value={formData.lastName}\n                onChange={handleInputChange}\n                className={`form-input ${errors.lastName ? 'error' : ''}`}\n                placeholder=\"Enter last name\"\n                data-testid=\"input-last-name\"\n              />\n              {errors.lastName && <span className=\"error-message\">{errors.lastName}</span>}\n            </div>\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"mobile\" className=\"form-label\">\n              Mobile Number <span className=\"required\">*</span>\n            </label>\n            <input\n              type=\"tel\"\n              id=\"mobile\"\n              name=\"mobile\"\n              value={formData.mobile}\n              onChange={handleInputChange}\n              className={`form-input ${errors.mobile ? 'error' : ''}`}\n              placeholder=\"Enter 10-digit mobile number\"\n              maxLength=\"10\"\n              data-testid=\"input-mobile\"\n            />\n            {errors.mobile && <span className=\"error-message\">{errors.mobile}</span>}\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"email\" className=\"form-label\">\n              Email Address <span className=\"required\">*</span>\n            </label>\n            <input\n              type=\"email\"\n              id=\"email\"\n              name=\"email\"\n              value={formData.email}\n              onChange={handleInputChange}\n              className={`form-input ${errors.email ? 'error' : ''}`}\n              placeholder=\"Enter your email\"\n              data-testid=\"input-email\"\n            />\n            {errors.email && <span className=\"error-message\">{errors.email}</span>}\n          </div>\n\n          <div className=\"form-row\">\n            <div className=\"form-group\">\n              <label htmlFor=\"password\" className=\"form-label\">\n                Password <span className=\"required\">*</span>\n              </label>\n              <input\n                type=\"password\"\n                id=\"password\"\n                name=\"password\"\n                value={formData.password}\n                onChange={handleInputChange}\n                className={`form-input ${errors.password ? 'error' : ''}`}\n                placeholder=\"Enter password\"\n                data-testid=\"input-password\"\n              />\n              {errors.password && <span className=\"error-message\">{errors.password}</span>}\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"confirmPassword\" className=\"form-label\">\n                Confirm Password <span className=\"required\">*</span>\n              </label>\n              <input\n                type=\"password\"\n                id=\"confirmPassword\"\n                name=\"confirmPassword\"\n                value={formData.confirmPassword}\n                onChange={handleInputChange}\n                className={`form-input ${errors.confirmPassword ? 'error' : ''}`}\n                placeholder=\"Confirm password\"\n                data-testid=\"input-confirm-password\"\n              />\n              {errors.confirmPassword && <span className=\"error-message\">{errors.confirmPassword}</span>}\n            </div>\n          </div>\n\n          <div className=\"form-group\">\n            <div className=\"checkbox-container\">\n              <input\n                type=\"checkbox\"\n                id=\"acceptTerms\"\n                name=\"acceptTerms\"\n                checked={formData.acceptTerms}\n                onChange={handleInputChange}\n                className={`form-checkbox ${errors.acceptTerms ? 'error' : ''}`}\n                data-testid=\"checkbox-terms\"\n              />\n              <label htmlFor=\"acceptTerms\" className=\"checkbox-label\">\n                I accept the <Link href=\"/terms\" className=\"link\">Terms and Conditions</Link> and{' '}\n                <Link href=\"/privacy\" className=\"link\">Privacy Policy</Link>\n              </label>\n            </div>\n            {errors.acceptTerms && <span className=\"error-message\">{errors.acceptTerms}</span>}\n          </div>\n\n          <button\n            type=\"submit\"\n            disabled={loading}\n            className=\"login-button\"\n            data-testid=\"button-register\"\n          >\n            {loading ? 'Creating Account...' : 'Create Account'}\n          </button>\n        </form>\n\n        <div className=\"login-footer\">\n          <p>\n            Already have an account?{' '}\n            <Link href=\"/login\" className=\"link\" data-testid=\"link-login\">\n              Sign in here\n            </Link>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":10344},"client/src/pages/Withdrawal.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport ModernSidebar from '../components/ModernSidebar';\nimport { CheckCircle, AlertCircle, Lock, ArrowLeft, DollarSign, Shield, Mail } from 'lucide-react';\n\nexport default function Withdrawal() {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [step, setStep] = useState(1); // 1: Form, 2: OTP Verification, 3: Success\n  \n  // Form data\n  const [amount, setAmount] = useState('');\n  const [method, setMethod] = useState('USDT TRC-20');\n  const [walletAddress, setWalletAddress] = useState('');\n  \n  // OTP data\n  const [withdrawalId, setWithdrawalId] = useState('');\n  const [otp, setOtp] = useState('');\n  const [withdrawalDetails, setWithdrawalDetails] = useState(null);\n  \n  // UI states\n  const [submitting, setSubmitting] = useState(false);\n  const [errors, setErrors] = useState({});\n  const [message, setMessage] = useState('');\n  const [walletBalance, setWalletBalance] = useState(0);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        if (!token) {\n          window.location.href = '/login';\n          return;\n        }\n\n        const [userResponse, summaryResponse] = await Promise.all([\n          axios.get('/api/auth/me', { headers: { Authorization: `Bearer ${token}` } }),\n          axios.get('/api/user/investment-summary', { headers: { Authorization: `Bearer ${token}` } })\n        ]);\n        \n        setUser(userResponse.data);\n        setWalletBalance(summaryResponse.data.walletBalance || 0);\n      } catch (error) {\n        if (error.response?.status === 401) {\n          localStorage.removeItem('token');\n          window.location.href = '/login';\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const validateForm = () => {\n    const newErrors = {};\n    \n    if (!amount || parseFloat(amount) < 15) {\n      newErrors.amount = 'Minimum withdrawal amount is $15';\n    }\n    \n    if (parseFloat(amount) > walletBalance) {\n      newErrors.amount = `Insufficient balance. Available: $${walletBalance.toFixed(2)}`;\n    }\n    \n    if (!walletAddress) {\n      newErrors.walletAddress = 'Wallet address is required';\n    }\n    \n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmitWithdrawal = async (e) => {\n    e.preventDefault();\n    \n    if (!validateForm()) return;\n    \n    setSubmitting(true);\n    setErrors({});\n    setMessage('');\n    \n    try {\n      const token = localStorage.getItem('token');\n      const response = await axios.post('/api/withdrawal', {\n        amount: parseFloat(amount),\n        method,\n        walletAddress\n      }, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      \n      if (response.data.success) {\n        setWithdrawalId(response.data.withdrawalId);\n        setWithdrawalDetails(response.data.withdrawalDetails);\n        setMessage(response.data.message);\n        setStep(2);\n      }\n    } catch (error) {\n      setErrors({ general: error.response?.data?.error || 'Failed to submit withdrawal request' });\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  const handleVerifyOTP = async (e) => {\n    e.preventDefault();\n    \n    if (!otp || otp.length !== 6) {\n      setErrors({ otp: 'Please enter a valid 6-digit OTP' });\n      return;\n    }\n    \n    setSubmitting(true);\n    setErrors({});\n    \n    try {\n      const token = localStorage.getItem('token');\n      const response = await axios.post('/api/withdrawal/verify-otp', {\n        withdrawalId,\n        otp\n      }, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      \n      if (response.data.success) {\n        setMessage(response.data.message);\n        setStep(3);\n      }\n    } catch (error) {\n      setErrors({ otp: error.response?.data?.error || 'Failed to verify OTP' });\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  const handleNewWithdrawal = () => {\n    setStep(1);\n    setAmount('');\n    setWalletAddress('');\n    setOtp('');\n    setWithdrawalId('');\n    setWithdrawalDetails(null);\n    setErrors({});\n    setMessage('');\n  };\n\n  const calculateServiceCharge = (amount) => {\n    const amt = parseFloat(amount) || 0;\n    return amt * 0.05;\n  };\n\n  const calculateNetAmount = (amount) => {\n    const amt = parseFloat(amount) || 0;\n    return amt - calculateServiceCharge(amt);\n  };\n\n  if (loading) {\n    return (\n      <div style={{ display: 'flex', minHeight: '100vh', backgroundColor: '#f8fafc' }}>\n        <ModernSidebar />\n        <main style={{ flex: 1, marginLeft: '240px', padding: '2rem', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n          <div style={{ textAlign: 'center' }}>\n            <div style={{\n              width: '3rem',\n              height: '3rem',\n              border: '2px solid #e5e7eb',\n              borderTop: '2px solid #3b82f6',\n              borderRadius: '50%',\n              animation: 'spin 1s linear infinite',\n              margin: '0 auto 1rem'\n            }}></div>\n            <div style={{ fontSize: '1.125rem', color: '#374151' }}>Loading...</div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ display: 'flex', minHeight: '100vh', backgroundColor: '#f8fafc' }}>\n      <ModernSidebar />\n      <main style={{ flex: 1, marginLeft: '240px', padding: '2rem' }}>\n        <div style={{ maxWidth: '600px', margin: '0 auto' }}>\n          {/* Header */}\n          <div style={{ marginBottom: '2rem', textAlign: 'center' }}>\n            <h1 style={{ fontSize: '1.875rem', fontWeight: 'bold', color: '#111827', margin: '0 0 0.5rem 0' }}>\n              Withdrawal Request\n            </h1>\n            <p style={{ color: '#6b7280', margin: 0 }}>\n              {step === 1 && 'Request funds from your wallet balance'}\n              {step === 2 && 'Verify your identity with OTP'}\n              {step === 3 && 'Withdrawal request submitted successfully'}\n            </p>\n          </div>\n\n          {/* Step Indicator */}\n          <div style={{ display: 'flex', justifyContent: 'center', marginBottom: '2rem' }}>\n            <div style={{ display: 'flex', alignItems: 'center', gap: '1rem' }}>\n              <div style={{\n                width: '2rem', height: '2rem', borderRadius: '50%',\n                backgroundColor: step >= 1 ? '#3b82f6' : '#e5e7eb',\n                color: step >= 1 ? 'white' : '#9ca3af',\n                display: 'flex', alignItems: 'center', justifyContent: 'center',\n                fontSize: '0.875rem', fontWeight: '600'\n              }}>1</div>\n              <div style={{ width: '2rem', height: '2px', backgroundColor: step >= 2 ? '#3b82f6' : '#e5e7eb' }}></div>\n              <div style={{\n                width: '2rem', height: '2rem', borderRadius: '50%',\n                backgroundColor: step >= 2 ? '#3b82f6' : '#e5e7eb',\n                color: step >= 2 ? 'white' : '#9ca3af',\n                display: 'flex', alignItems: 'center', justifyContent: 'center',\n                fontSize: '0.875rem', fontWeight: '600'\n              }}>2</div>\n              <div style={{ width: '2rem', height: '2px', backgroundColor: step >= 3 ? '#3b82f6' : '#e5e7eb' }}></div>\n              <div style={{\n                width: '2rem', height: '2rem', borderRadius: '50%',\n                backgroundColor: step >= 3 ? '#10b981' : '#e5e7eb',\n                color: step >= 3 ? 'white' : '#9ca3af',\n                display: 'flex', alignItems: 'center', justifyContent: 'center',\n                fontSize: '0.875rem', fontWeight: '600'\n              }}>✓</div>\n            </div>\n          </div>\n\n          {/* Wallet Balance */}\n          <div style={{\n            backgroundColor: 'white',\n            border: '1px solid #e5e7eb',\n            borderRadius: '0.5rem',\n            padding: '1.5rem',\n            marginBottom: '2rem',\n            textAlign: 'center'\n          }}>\n            <DollarSign size={32} style={{ color: '#10b981', margin: '0 auto 0.5rem' }} />\n            <h3 style={{ fontSize: '1.125rem', fontWeight: '600', color: '#374151', margin: '0 0 0.25rem 0' }}>\n              Available Balance\n            </h3>\n            <div style={{ fontSize: '2rem', fontWeight: 'bold', color: '#10b981' }}>\n              ${walletBalance.toFixed(2)}\n            </div>\n          </div>\n\n          {/* Step Content */}\n          {step === 1 && (\n            <div style={{\n              backgroundColor: 'white',\n              border: '1px solid #e5e7eb',\n              borderRadius: '0.5rem',\n              padding: '2rem'\n            }}>\n              <form onSubmit={handleSubmitWithdrawal}>\n                {/* Amount Input */}\n                <div style={{ marginBottom: '1.5rem' }}>\n                  <label style={{ display: 'block', fontSize: '0.875rem', fontWeight: '600', color: '#374151', marginBottom: '0.5rem' }}>\n                    Withdrawal Amount (Minimum $15)\n                  </label>\n                  <input\n                    type=\"number\"\n                    min=\"15\"\n                    step=\"0.01\"\n                    value={amount}\n                    onChange={(e) => setAmount(e.target.value)}\n                    style={{\n                      width: '100%',\n                      padding: '0.75rem',\n                      border: errors.amount ? '1px solid #ef4444' : '1px solid #d1d5db',\n                      borderRadius: '0.375rem',\n                      fontSize: '1rem'\n                    }}\n                    placeholder=\"Enter amount to withdraw\"\n                  />\n                  {errors.amount && (\n                    <p style={{ color: '#ef4444', fontSize: '0.875rem', marginTop: '0.25rem' }}>\n                      {errors.amount}\n                    </p>\n                  )}\n                  {amount && (\n                    <div style={{ marginTop: '0.5rem', fontSize: '0.875rem', color: '#6b7280' }}>\n                      Service charge (5%): ${calculateServiceCharge(amount).toFixed(2)}\n                      <br />\n                      You will receive: ${calculateNetAmount(amount).toFixed(2)}\n                    </div>\n                  )}\n                </div>\n\n                {/* Method Selection */}\n                <div style={{ marginBottom: '1.5rem' }}>\n                  <label style={{ display: 'block', fontSize: '0.875rem', fontWeight: '600', color: '#374151', marginBottom: '0.5rem' }}>\n                    Withdrawal Method\n                  </label>\n                  <select\n                    value={method}\n                    onChange={(e) => setMethod(e.target.value)}\n                    style={{\n                      width: '100%',\n                      padding: '0.75rem',\n                      border: '1px solid #d1d5db',\n                      borderRadius: '0.375rem',\n                      fontSize: '1rem'\n                    }}\n                  >\n                    <option value=\"USDT TRC-20\">USDT TRC-20</option>\n                    <option value=\"USDT ERC-20\">USDT ERC-20</option>\n                    <option value=\"Bitcoin\">Bitcoin</option>\n                  </select>\n                </div>\n\n                {/* Wallet Address */}\n                <div style={{ marginBottom: '1.5rem' }}>\n                  <label style={{ display: 'block', fontSize: '0.875rem', fontWeight: '600', color: '#374151', marginBottom: '0.5rem' }}>\n                    Wallet Address\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={walletAddress}\n                    onChange={(e) => setWalletAddress(e.target.value)}\n                    style={{\n                      width: '100%',\n                      padding: '0.75rem',\n                      border: errors.walletAddress ? '1px solid #ef4444' : '1px solid #d1d5db',\n                      borderRadius: '0.375rem',\n                      fontSize: '1rem'\n                    }}\n                    placeholder=\"Enter your wallet address\"\n                  />\n                  {errors.walletAddress && (\n                    <p style={{ color: '#ef4444', fontSize: '0.875rem', marginTop: '0.25rem' }}>\n                      {errors.walletAddress}\n                    </p>\n                  )}\n                </div>\n\n                {/* Error Message */}\n                {errors.general && (\n                  <div style={{ \n                    backgroundColor: '#fef2f2', \n                    border: '1px solid #fecaca', \n                    borderRadius: '0.375rem', \n                    padding: '1rem', \n                    marginBottom: '1rem',\n                    display: 'flex',\n                    alignItems: 'center',\n                    gap: '0.5rem'\n                  }}>\n                    <AlertCircle size={20} style={{ color: '#ef4444' }} />\n                    <span style={{ color: '#dc2626', fontSize: '0.875rem' }}>{errors.general}</span>\n                  </div>\n                )}\n\n                {/* Submit Button */}\n                <button\n                  type=\"submit\"\n                  disabled={submitting}\n                  style={{\n                    width: '100%',\n                    padding: '0.875rem',\n                    backgroundColor: submitting ? '#9ca3af' : '#3b82f6',\n                    color: 'white',\n                    border: 'none',\n                    borderRadius: '0.5rem',\n                    fontSize: '1rem',\n                    fontWeight: '600',\n                    cursor: submitting ? 'not-allowed' : 'pointer',\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    gap: '0.5rem'\n                  }}\n                >\n                  {submitting ? 'Processing...' : 'Submit Withdrawal Request'}\n                </button>\n              </form>\n            </div>\n          )}\n\n          {step === 2 && (\n            <div style={{\n              backgroundColor: 'white',\n              border: '1px solid #e5e7eb',\n              borderRadius: '0.5rem',\n              padding: '2rem'\n            }}>\n              <div style={{ textAlign: 'center', marginBottom: '2rem' }}>\n                <Mail size={48} style={{ color: '#3b82f6', margin: '0 auto 1rem' }} />\n                <h3 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#374151', margin: '0 0 0.5rem 0' }}>\n                  OTP Sent to Your Email\n                </h3>\n                <p style={{ color: '#6b7280', marginBottom: '1rem' }}>\n                  We've sent a 6-digit verification code to {user?.email}\n                </p>\n                <p style={{ fontSize: '0.875rem', color: '#ef4444' }}>\n                  OTP expires in 10 minutes\n                </p>\n              </div>\n\n              {withdrawalDetails && (\n                <div style={{\n                  backgroundColor: '#f3f4f6',\n                  border: '1px solid #e5e7eb',\n                  borderRadius: '0.375rem',\n                  padding: '1rem',\n                  marginBottom: '2rem'\n                }}>\n                  <h4 style={{ fontSize: '1rem', fontWeight: '600', color: '#374151', margin: '0 0 0.75rem 0' }}>\n                    Withdrawal Summary\n                  </h4>\n                  <div style={{ fontSize: '0.875rem', color: '#6b7280', lineHeight: '1.5' }}>\n                    <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '0.25rem' }}>\n                      <span>Requested Amount:</span>\n                      <span>${withdrawalDetails.requestedAmount.toFixed(2)}</span>\n                    </div>\n                    <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '0.25rem' }}>\n                      <span>Service Charge (5%):</span>\n                      <span>-${withdrawalDetails.serviceCharge.toFixed(2)}</span>\n                    </div>\n                    <hr style={{ border: 'none', borderTop: '1px solid #d1d5db', margin: '0.5rem 0' }} />\n                    <div style={{ display: 'flex', justifyContent: 'space-between', fontWeight: '600', color: '#374151' }}>\n                      <span>You will receive:</span>\n                      <span>${withdrawalDetails.netAmount.toFixed(2)}</span>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              <form onSubmit={handleVerifyOTP}>\n                <div style={{ marginBottom: '1.5rem' }}>\n                  <label style={{ display: 'block', fontSize: '0.875rem', fontWeight: '600', color: '#374151', marginBottom: '0.5rem' }}>\n                    Enter 6-Digit OTP\n                  </label>\n                  <input\n                    type=\"text\"\n                    maxLength=\"6\"\n                    value={otp}\n                    onChange={(e) => setOtp(e.target.value.replace(/\\D/g, ''))}\n                    style={{\n                      width: '100%',\n                      padding: '0.875rem',\n                      border: errors.otp ? '1px solid #ef4444' : '1px solid #d1d5db',\n                      borderRadius: '0.375rem',\n                      fontSize: '1.125rem',\n                      textAlign: 'center',\n                      letterSpacing: '0.25rem'\n                    }}\n                    placeholder=\"000000\"\n                  />\n                  {errors.otp && (\n                    <p style={{ color: '#ef4444', fontSize: '0.875rem', marginTop: '0.25rem' }}>\n                      {errors.otp}\n                    </p>\n                  )}\n                </div>\n\n                <div style={{ display: 'flex', gap: '1rem' }}>\n                  <button\n                    type=\"button\"\n                    onClick={() => setStep(1)}\n                    style={{\n                      flex: 1,\n                      padding: '0.875rem',\n                      backgroundColor: 'white',\n                      color: '#374151',\n                      border: '1px solid #d1d5db',\n                      borderRadius: '0.5rem',\n                      fontSize: '1rem',\n                      fontWeight: '600',\n                      cursor: 'pointer',\n                      display: 'flex',\n                      alignItems: 'center',\n                      justifyContent: 'center',\n                      gap: '0.5rem'\n                    }}\n                  >\n                    <ArrowLeft size={16} />\n                    Back\n                  </button>\n                  <button\n                    type=\"submit\"\n                    disabled={submitting || otp.length !== 6}\n                    style={{\n                      flex: 2,\n                      padding: '0.875rem',\n                      backgroundColor: (submitting || otp.length !== 6) ? '#9ca3af' : '#10b981',\n                      color: 'white',\n                      border: 'none',\n                      borderRadius: '0.5rem',\n                      fontSize: '1rem',\n                      fontWeight: '600',\n                      cursor: (submitting || otp.length !== 6) ? 'not-allowed' : 'pointer',\n                      display: 'flex',\n                      alignItems: 'center',\n                      justifyContent: 'center',\n                      gap: '0.5rem'\n                    }}\n                  >\n                    <Shield size={16} />\n                    {submitting ? 'Verifying...' : 'Verify OTP'}\n                  </button>\n                </div>\n              </form>\n            </div>\n          )}\n\n          {step === 3 && (\n            <div style={{\n              backgroundColor: 'white',\n              border: '1px solid #e5e7eb',\n              borderRadius: '0.5rem',\n              padding: '2rem',\n              textAlign: 'center'\n            }}>\n              <CheckCircle size={64} style={{ color: '#10b981', margin: '0 auto 1rem' }} />\n              <h3 style={{ fontSize: '1.5rem', fontWeight: '600', color: '#10b981', margin: '0 0 1rem 0' }}>\n                Withdrawal Request Submitted!\n              </h3>\n              <p style={{ color: '#6b7280', marginBottom: '2rem', lineHeight: '1.5' }}>\n                Your withdrawal request has been successfully submitted for admin approval.\n                You will receive an email notification once the admin reviews your request.\n              </p>\n              \n              <div style={{\n                backgroundColor: '#f0f9ff',\n                border: '1px solid #bae6fd',\n                borderRadius: '0.375rem',\n                padding: '1rem',\n                marginBottom: '2rem'\n              }}>\n                <h4 style={{ fontSize: '1rem', fontWeight: '600', color: '#0369a1', margin: '0 0 0.5rem 0' }}>\n                  What's Next?\n                </h4>\n                <ul style={{ fontSize: '0.875rem', color: '#374151', textAlign: 'left', paddingLeft: '1.25rem', margin: 0 }}>\n                  <li>Admin will review your withdrawal request</li>\n                  <li>You'll receive an email with the decision</li>\n                  <li>If approved, funds will be processed within 24-48 hours</li>\n                  <li>Track your request in the Transaction History</li>\n                </ul>\n              </div>\n\n              <button\n                onClick={handleNewWithdrawal}\n                style={{\n                  padding: '0.875rem 1.5rem',\n                  backgroundColor: '#3b82f6',\n                  color: 'white',\n                  border: 'none',\n                  borderRadius: '0.5rem',\n                  fontSize: '1rem',\n                  fontWeight: '600',\n                  cursor: 'pointer'\n                }}\n              >\n                Make Another Withdrawal\n              </button>\n            </div>\n          )}\n\n          {/* Success Message */}\n          {message && step !== 3 && (\n            <div style={{ \n              backgroundColor: '#f0f9ff', \n              border: '1px solid #bae6fd', \n              borderRadius: '0.375rem', \n              padding: '1rem', \n              marginTop: '1rem',\n              display: 'flex',\n              alignItems: 'center',\n              gap: '0.5rem'\n            }}>\n              <CheckCircle size={20} style={{ color: '#0369a1' }} />\n              <span style={{ color: '#0369a1', fontSize: '0.875rem' }}>{message}</span>\n            </div>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":22417},"client/src/styles/login.css":{"content":".login-container {\n  min-height: 100vh;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 20px;\n  font-family: 'Inter', sans-serif;\n}\n\n.login-card {\n  background: white;\n  border-radius: 20px;\n  padding: 50px 40px;\n  max-width: 450px;\n  width: 100%;\n  box-shadow: 0 25px 50px rgba(0, 0, 0, 0.15);\n  text-align: center;\n}\n\n.login-logo {\n  margin-bottom: 40px;\n}\n\n.login-logo img {\n  width: 80px;\n  height: 80px;\n  margin-bottom: 15px;\n  border-radius: 50%;\n  object-fit: cover;\n}\n\n.login-logo h1 {\n  font-size: 32px;\n  font-weight: 700;\n  color: #2d3748;\n  margin: 0;\n  letter-spacing: -0.5px;\n}\n\n.login-form h2 {\n  font-size: 24px;\n  font-weight: 600;\n  color: #2d3748;\n  margin-bottom: 30px;\n}\n\n.form-group {\n  margin-bottom: 25px;\n  text-align: left;\n}\n\n.form-group label {\n  display: block;\n  margin-bottom: 8px;\n  font-weight: 500;\n  color: #4a5568;\n  font-size: 14px;\n}\n\n.form-group input {\n  width: 100%;\n  padding: 12px 16px;\n  border: 2px solid #e2e8f0;\n  border-radius: 10px;\n  font-size: 16px;\n  transition: all 0.3s ease;\n  background: #f8fafc;\n  box-sizing: border-box;\n  color: #2d3748;\n}\n\n.form-group input:focus {\n  outline: none;\n  border-color: #667eea;\n  background: white;\n  box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);\n  color: #2d3748;\n}\n\n.form-actions {\n  text-align: right;\n  margin-bottom: 30px;\n}\n\n.forgot-password-link {\n  color: #667eea;\n  text-decoration: none;\n  font-size: 14px;\n  font-weight: 500;\n  transition: color 0.3s ease;\n}\n\n.forgot-password-link:hover {\n  color: #5a67d8;\n  text-decoration: underline;\n}\n\n.login-button, .submit-button {\n  width: 100%;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  color: white;\n  border: none;\n  padding: 14px;\n  border-radius: 10px;\n  font-size: 16px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  margin-bottom: 30px;\n}\n\n.login-button:hover:not(:disabled), .submit-button:hover:not(:disabled) {\n  transform: translateY(-2px);\n  box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);\n}\n\n.login-button:disabled, .submit-button:disabled {\n  opacity: 0.7;\n  cursor: not-allowed;\n}\n\n.error-message {\n  background: #fed7d7;\n  color: #c53030;\n  padding: 12px 16px;\n  border-radius: 8px;\n  margin-bottom: 20px;\n  font-size: 14px;\n  border: 1px solid #feb2b2;\n}\n\n.success-message {\n  background: #c6f6d5;\n  color: #22543d;\n  padding: 12px 16px;\n  border-radius: 8px;\n  margin-bottom: 20px;\n  font-size: 14px;\n  border: 1px solid #9ae6b4;\n}\n\n.back-to-home, .back-to-login {\n  border-top: 1px solid #e2e8f0;\n  padding-top: 20px;\n}\n\n.back-to-home a, .back-to-login a {\n  color: #718096;\n  text-decoration: none;\n  font-size: 14px;\n  font-weight: 500;\n  transition: color 0.3s ease;\n}\n\n.back-to-home a:hover, .back-to-login a:hover {\n  color: #4a5568;\n}\n\n/* Forgot Password Specific Styles */\n.forgot-password-container {\n  min-height: 100vh;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 20px;\n  font-family: 'Inter', sans-serif;\n}\n\n.forgot-password-card {\n  background: white;\n  border-radius: 20px;\n  padding: 50px 40px;\n  max-width: 450px;\n  width: 100%;\n  box-shadow: 0 25px 50px rgba(0, 0, 0, 0.15);\n  text-align: center;\n}\n\n.logo {\n  margin-bottom: 40px;\n}\n\n.logo img {\n  width: 80px;\n  height: 80px;\n  margin-bottom: 15px;\n  border-radius: 50%;\n  object-fit: cover;\n}\n\n.logo h1 {\n  font-size: 32px;\n  font-weight: 700;\n  color: #2d3748;\n  margin: 0;\n  letter-spacing: -0.5px;\n}\n\n.forgot-password-form h2 {\n  font-size: 24px;\n  font-weight: 600;\n  color: #2d3748;\n  margin-bottom: 15px;\n}\n\n.description {\n  color: #718096;\n  margin-bottom: 30px;\n  font-size: 14px;\n  line-height: 1.5;\n}\n\n/* Registration form specific styles */\n.form-row {\n  display: flex;\n  gap: 1rem;\n}\n\n.form-row .form-group {\n  flex: 1;\n}\n\n/* Required field indicator */\n.required {\n  color: #ef4444;\n}\n\n/* Form labels */\n.form-label {\n  display: block;\n  margin-bottom: 8px;\n  font-weight: 500;\n  color: #4a5568;\n  font-size: 14px;\n}\n\n/* Form inputs */\n.form-input {\n  width: 100%;\n  padding: 12px 16px;\n  border: 2px solid #e2e8f0;\n  border-radius: 10px;\n  font-size: 16px;\n  transition: all 0.3s ease;\n  background: #f8fafc;\n  box-sizing: border-box;\n  color: #2d3748;\n}\n\n.form-input:focus {\n  outline: none;\n  border-color: #667eea;\n  background: white;\n  box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);\n  color: #2d3748;\n}\n\n.form-input.error {\n  border-color: #ef4444;\n  background: #fef2f2;\n}\n\n/* Error messages */\n.error-message {\n  display: block;\n  color: #ef4444;\n  font-size: 12px;\n  margin-top: 4px;\n  font-weight: 500;\n}\n\n/* Checkbox styling */\n.checkbox-container {\n  display: flex;\n  align-items: flex-start;\n  gap: 0.5rem;\n  margin-top: 8px;\n}\n\n.form-checkbox {\n  width: 18px;\n  height: 18px;\n  margin: 0;\n  cursor: pointer;\n  accent-color: #667eea;\n  margin-top: 2px;\n}\n\n.checkbox-label {\n  font-size: 14px;\n  color: #374151;\n  line-height: 1.4;\n  cursor: pointer;\n  margin: 0;\n}\n\n.checkbox-label .link {\n  color: #667eea;\n  text-decoration: none;\n  font-weight: 500;\n}\n\n.checkbox-label .link:hover {\n  text-decoration: underline;\n}\n\n/* Login/register page headers */\n.login-header {\n  text-align: center;\n  margin-bottom: 40px;\n}\n\n.login-logo {\n  width: 80px;\n  height: 80px;\n  margin: 0 auto 20px;\n  border-radius: 50%;\n  object-fit: cover;\n}\n\n.login-title {\n  font-size: 32px;\n  font-weight: 700;\n  color: #2d3748;\n  margin: 0 0 10px 0;\n  letter-spacing: -0.5px;\n}\n\n.login-subtitle {\n  color: #718096;\n  margin: 0;\n  font-size: 16px;\n}\n\n.login-footer {\n  border-top: 1px solid #e2e8f0;\n  padding-top: 20px;\n  text-align: center;\n}\n\n.login-footer .link {\n  color: #667eea;\n  text-decoration: none;\n  font-weight: 500;\n}\n\n.login-footer .link:hover {\n  text-decoration: underline;\n}\n\n@media (max-width: 768px) {\n  .login-container, .forgot-password-container {\n    padding: 10px;\n  }\n  \n  .login-card, .forgot-password-card {\n    padding: 40px 30px;\n    max-width: 500px;\n  }\n\n  .login-logo h1, .logo h1, .login-title {\n    font-size: 28px;\n  }\n\n  .login-form h2, .forgot-password-form h2 {\n    font-size: 22px;\n  }\n  \n  .form-row {\n    flex-direction: column;\n    gap: 0;\n  }\n  \n  .checkbox-container {\n    align-items: flex-start;\n  }\n  \n  .checkbox-label {\n    font-size: 13px;\n  }\n}","size_bytes":6376},"client/src/pages/AdminDashboard.jsx":{"content":"import { useState, useEffect } from 'react';\nimport { \n  Users, \n  DollarSign, \n  TrendingUp, \n  UserCheck,\n  Eye,\n  CheckCircle,\n  XCircle,\n  Clock,\n  FileText,\n  Search,\n  Filter\n} from 'lucide-react';\nimport axios from 'axios';\nimport Sidebar from '../components/Sidebar';\n\nexport default function AdminDashboard() {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [activeTab, setActiveTab] = useState('users');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [users, setUsers] = useState([]);\n  const [deposits, setDeposits] = useState([]);\n  const [withdrawals, setWithdrawals] = useState([]);\n  const [kycSubmissions, setKycSubmissions] = useState([]);\n  const [userHistory, setUserHistory] = useState(null);\n  const [searchLoading, setSearchLoading] = useState(false);\n  const [stats, setStats] = useState({\n    totalUsers: 0,\n    totalDeposits: 0,\n    pendingDeposits: 0,\n    totalVolume: 0,\n    totalWithdrawals: 0,\n    pendingWithdrawals: 0\n  });\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        if (!token) {\n          window.location.href = '/login';\n          return;\n        }\n\n        // Fetch user data\n        const userResponse = await axios.get('/api/auth/me', {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n        \n        if (!userResponse.data.isAdmin) {\n          alert('Access denied. Admin privileges required.');\n          window.location.href = '/dashboard';\n          return;\n        }\n        \n        setUser(userResponse.data);\n\n        // Fetch admin data\n        const [usersResponse, depositsResponse, withdrawalsResponse, kycResponse] = await Promise.all([\n          axios.get('/api/admin/users', {\n            headers: { Authorization: `Bearer ${token}` }\n          }),\n          axios.get('/api/admin/deposits', {\n            headers: { Authorization: `Bearer ${token}` }\n          }),\n          axios.get('/api/admin/withdrawals', {\n            headers: { Authorization: `Bearer ${token}` }\n          }),\n          axios.get('/api/admin/kyc', {\n            headers: { Authorization: `Bearer ${token}` }\n          })\n        ]);\n\n        setUsers(usersResponse.data);\n        setDeposits(depositsResponse.data);\n        setWithdrawals(withdrawalsResponse.data);\n        setKycSubmissions(kycResponse.data);\n\n        // Calculate stats\n        const totalDeposits = depositsResponse.data.length;\n        const pendingDeposits = depositsResponse.data.filter(d => d.status === 'pending').length;\n        const totalVolume = depositsResponse.data\n          .filter(d => d.status === 'confirmed')\n          .reduce((sum, d) => sum + d.amount, 0);\n\n        const totalWithdrawals = withdrawalsResponse.data.length;\n        const pendingWithdrawals = withdrawalsResponse.data.filter(w => w.status === 'pending_admin').length;\n\n        setStats({\n          totalUsers: usersResponse.data.length,\n          totalDeposits,\n          pendingDeposits,\n          totalVolume,\n          totalWithdrawals,\n          pendingWithdrawals\n        });\n\n      } catch (error) {\n        if (error.response?.status === 401) {\n          localStorage.removeItem('token');\n          window.location.href = '/login';\n        }\n        console.error('Error fetching admin data:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const handleLogout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/';\n  };\n\n  // KYC Management Functions\n  const handleViewKycDocument = async (userId) => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`/api/kyc/document/${userId}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      window.open(url, '_blank');\n    } catch (error) {\n      console.error('Error viewing KYC document:', error);\n      alert('Failed to load KYC document. Please try again.');\n    }\n  };\n\n  const handleKycApproval = async (userId, action) => {\n    try {\n      const token = localStorage.getItem('token');\n      let reason = null;\n      \n      if (action === 'reject') {\n        reason = prompt('Please provide a reason for rejection:');\n        if (!reason) return; // User cancelled\n      }\n      \n      const endpoint = action === 'approve' ? \n        `/api/admin/kyc/${userId}/approve` : \n        `/api/admin/kyc/${userId}/reject`;\n      \n      await axios.post(endpoint, { reason }, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      \n      // Refresh KYC and users data\n      const [usersResponse, kycResponse] = await Promise.all([\n        axios.get('/api/admin/users', {\n          headers: { Authorization: `Bearer ${token}` }\n        }),\n        axios.get('/api/admin/kyc', {\n          headers: { Authorization: `Bearer ${token}` }\n        })\n      ]);\n      setUsers(usersResponse.data);\n      setKycSubmissions(kycResponse.data);\n      \n      alert(`KYC document ${action === 'approve' ? 'approved' : 'rejected'} successfully!`);\n    } catch (error) {\n      console.error(`Error ${action}ing KYC document:`, error);\n      alert(`Failed to ${action} KYC document. Please try again.`);\n    }\n  };\n\n  const handleDepositAction = async (depositId, action, notes = '') => {\n    try {\n      const token = localStorage.getItem('token');\n      await axios.post(`/api/admin/deposits/${depositId}/action`, {\n        action,\n        notes: notes.trim()\n      }, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      \n      // Refresh deposits\n      const depositsResponse = await axios.get('/api/admin/deposits', {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      setDeposits(depositsResponse.data);\n      \n      // Update stats\n      const totalDeposits = depositsResponse.data.length;\n      const pendingDeposits = depositsResponse.data.filter(d => d.status === 'pending').length;\n      const totalVolume = depositsResponse.data\n        .filter(d => d.status === 'confirmed')\n        .reduce((sum, d) => sum + d.amount, 0);\n\n      setStats(prev => ({\n        ...prev,\n        totalDeposits,\n        pendingDeposits,\n        totalVolume\n      }));\n\n      alert(`Deposit ${action}d successfully!`);\n    } catch (error) {\n      console.error('Error updating deposit:', error);\n      alert('Error updating deposit status');\n    }\n  };\n\n  const handleViewDepositScreenshot = async (deposit) => {\n    if (!deposit.screenshotPath) {\n      alert('No screenshot available for this deposit');\n      return;\n    }\n    \n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`/deposits/screenshot${deposit.screenshotPath}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      \n      if (response.ok) {\n        const blob = await response.blob();\n        const url = URL.createObjectURL(blob);\n        window.open(url, '_blank', 'width=800,height=600');\n      } else {\n        alert('Failed to load screenshot. Please try again.');\n      }\n    } catch (error) {\n      console.error('Error viewing screenshot:', error);\n      alert('Error loading screenshot');\n    }\n  };\n\n  const handleWithdrawalAction = async (withdrawalId, action, notes) => {\n    if (!notes?.trim()) {\n      alert('Please provide notes for this action');\n      return;\n    }\n\n    try {\n      const token = localStorage.getItem('token');\n      await axios.post(`/api/admin/withdrawals/${withdrawalId}/action`, {\n        action,\n        notes: notes.trim()\n      }, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n\n      // Refresh withdrawals\n      const withdrawalsResponse = await axios.get('/api/admin/withdrawals', {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      setWithdrawals(withdrawalsResponse.data);\n\n      // Update stats\n      const pendingWithdrawals = withdrawalsResponse.data.filter(w => w.status === 'pending_admin').length;\n      setStats(prev => ({\n        ...prev,\n        pendingWithdrawals\n      }));\n\n      alert(`Withdrawal ${action}d successfully!`);\n    } catch (error) {\n      console.error('Error processing withdrawal:', error);\n      alert('Error processing withdrawal action');\n    }\n  };\n\n  const handleUserSearch = async (searchTerm) => {\n    if (!searchTerm.trim()) {\n      alert('Please enter an email or mobile number');\n      return;\n    }\n\n    setSearchLoading(true);\n    try {\n      const token = localStorage.getItem('token');\n      const response = await axios.get(`/api/admin/user-history/${encodeURIComponent(searchTerm)}`, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      setUserHistory(response.data);\n    } catch (error) {\n      console.error('Error searching user:', error);\n      alert('User not found or error occurred');\n      setUserHistory(null);\n    } finally {\n      setSearchLoading(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div style={{ display: 'flex', height: '100vh', backgroundColor: '#f3f4f6' }}>\n        <div style={{ width: '16rem', backgroundColor: '#1f2937' }}></div>\n        <div style={{ flex: 1, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n          <div style={{\n            width: '3rem',\n            height: '3rem',\n            border: '2px solid #e5e7eb',\n            borderTop: '2px solid #3b82f6',\n            borderRadius: '50%',\n            animation: 'spin 1s linear infinite'\n          }}></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ display: 'flex', height: '100vh', backgroundColor: '#f3f4f6' }}>\n      <Sidebar user={user} onLogout={handleLogout} />\n      \n      <div style={{ flex: 1, display: 'flex', flexDirection: 'column', overflow: 'hidden' }}>\n        <header style={{\n          backgroundColor: '#ffffff',\n          boxShadow: '0 1px 3px 0 rgba(0, 0, 0, 0.1)',\n          borderBottom: '1px solid #e5e7eb',\n          padding: '1rem 1.5rem'\n        }}>\n          <h1 style={{\n            fontSize: '1.5rem',\n            fontWeight: 'bold',\n            color: '#111827',\n            margin: 0,\n            display: 'flex',\n            alignItems: 'center',\n            gap: '0.5rem'\n          }}>\n            <UserCheck style={{ width: '1.5rem', height: '1.5rem', color: '#f59e0b' }} />\n            Admin Dashboard\n          </h1>\n        </header>\n\n        <main style={{\n          flex: 1,\n          overflowY: 'auto',\n          backgroundColor: '#f9fafb',\n          padding: '1.5rem'\n        }}>\n          {/* Stats Cards */}\n          <div style={{\n            display: 'grid',\n            gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\n            gap: '1.5rem',\n            marginBottom: '2rem'\n          }}>\n            <div style={{\n              backgroundColor: '#ffffff',\n              borderRadius: '1rem',\n              padding: '1.5rem',\n              boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)',\n              border: '1px solid #e5e7eb'\n            }}>\n              <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <div>\n                  <p style={{ fontSize: '0.875rem', color: '#6b7280', margin: 0 }}>Total Users</p>\n                  <p style={{ fontSize: '2rem', fontWeight: 'bold', color: '#111827', margin: 0 }}>\n                    {stats.totalUsers}\n                  </p>\n                </div>\n                <Users style={{ width: '2.5rem', height: '2.5rem', color: '#3b82f6' }} />\n              </div>\n            </div>\n\n            <div style={{\n              backgroundColor: '#ffffff',\n              borderRadius: '1rem',\n              padding: '1.5rem',\n              boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)',\n              border: '1px solid #e5e7eb'\n            }}>\n              <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <div>\n                  <p style={{ fontSize: '0.875rem', color: '#6b7280', margin: 0 }}>Total Deposits</p>\n                  <p style={{ fontSize: '2rem', fontWeight: 'bold', color: '#111827', margin: 0 }}>\n                    {stats.totalDeposits}\n                  </p>\n                </div>\n                <DollarSign style={{ width: '2.5rem', height: '2.5rem', color: '#10b981' }} />\n              </div>\n            </div>\n\n            <div style={{\n              backgroundColor: '#ffffff',\n              borderRadius: '1rem',\n              padding: '1.5rem',\n              boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)',\n              border: '1px solid #e5e7eb'\n            }}>\n              <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <div>\n                  <p style={{ fontSize: '0.875rem', color: '#6b7280', margin: 0 }}>Pending Deposits</p>\n                  <p style={{ fontSize: '2rem', fontWeight: 'bold', color: '#111827', margin: 0 }}>\n                    {stats.pendingDeposits}\n                  </p>\n                </div>\n                <Clock style={{ width: '2.5rem', height: '2.5rem', color: '#f59e0b' }} />\n              </div>\n            </div>\n\n            <div style={{\n              backgroundColor: '#ffffff',\n              borderRadius: '1rem',\n              padding: '1.5rem',\n              boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)',\n              border: '1px solid #e5e7eb'\n            }}>\n              <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <div>\n                  <p style={{ fontSize: '0.875rem', color: '#6b7280', margin: 0 }}>Total Volume</p>\n                  <p style={{ fontSize: '2rem', fontWeight: 'bold', color: '#111827', margin: 0 }}>\n                    ${stats.totalVolume.toLocaleString()}\n                  </p>\n                </div>\n                <TrendingUp style={{ width: '2.5rem', height: '2.5rem', color: '#8b5cf6' }} />\n              </div>\n            </div>\n          </div>\n\n          {/* Navigation Tabs */}\n          <div style={{\n            backgroundColor: '#ffffff',\n            borderRadius: '1rem',\n            boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)',\n            border: '1px solid #e5e7eb',\n            overflow: 'hidden'\n          }}>\n            <div style={{\n              display: 'flex',\n              borderBottom: '1px solid #e5e7eb',\n              overflowX: 'auto'\n            }}>\n              {[\n                { id: 'users', label: 'User List' },\n                { id: 'kyc', label: 'KYC Status' },\n                { id: 'deposits', label: 'Deposit Requests' },\n                { id: 'withdrawals', label: 'Withdrawal Requests' },\n                { id: 'investments', label: 'Investments' },\n                { id: 'engagement', label: 'Engagement' }\n              ].map((tab) => (\n                <button\n                  key={tab.id}\n                  onClick={() => setActiveTab(tab.id)}\n                  style={{\n                    padding: '1rem 1.5rem',\n                    backgroundColor: activeTab === tab.id ? '#f59e0b' : 'transparent',\n                    color: activeTab === tab.id ? 'white' : '#6b7280',\n                    border: 'none',\n                    fontSize: '0.875rem',\n                    fontWeight: '600',\n                    cursor: 'pointer',\n                    transition: 'all 0.2s ease',\n                    whiteSpace: 'nowrap'\n                  }}\n                >\n                  {tab.label}\n                </button>\n              ))}\n            </div>\n\n            <div style={{ padding: '1.5rem' }}>\n              {activeTab === 'users' && (\n                <div>\n                  <h3 style={{\n                    fontSize: '1.125rem',\n                    fontWeight: 'bold',\n                    color: '#111827',\n                    marginBottom: '1rem'\n                  }}>\n                    User Management\n                  </h3>\n                  \n                  <div style={{ overflowX: 'auto' }}>\n                    <table style={{\n                      width: '100%',\n                      borderCollapse: 'collapse',\n                      fontSize: '0.875rem'\n                    }}>\n                      <thead>\n                        <tr style={{ backgroundColor: '#f9fafb' }}>\n                          <th style={{\n                            padding: '0.75rem',\n                            textAlign: 'left',\n                            fontWeight: '600',\n                            color: '#374151',\n                            borderBottom: '1px solid #e5e7eb'\n                          }}>Name</th>\n                          <th style={{\n                            padding: '0.75rem',\n                            textAlign: 'left',\n                            fontWeight: '600',\n                            color: '#374151',\n                            borderBottom: '1px solid #e5e7eb'\n                          }}>Email</th>\n                          <th style={{\n                            padding: '0.75rem',\n                            textAlign: 'left',\n                            fontWeight: '600',\n                            color: '#374151',\n                            borderBottom: '1px solid #e5e7eb'\n                          }}>Sponsor ID</th>\n                          <th style={{\n                            padding: '0.75rem',\n                            textAlign: 'left',\n                            fontWeight: '600',\n                            color: '#374151',\n                            borderBottom: '1px solid #e5e7eb'\n                          }}>Referrals</th>\n                          <th style={{\n                            padding: '0.75rem',\n                            textAlign: 'left',\n                            fontWeight: '600',\n                            color: '#374151',\n                            borderBottom: '1px solid #e5e7eb'\n                          }}>DAS Status</th>\n                          <th style={{\n                            padding: '0.75rem',\n                            textAlign: 'left',\n                            fontWeight: '600',\n                            color: '#374151',\n                            borderBottom: '1px solid #e5e7eb'\n                          }}>Joined</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {users.length === 0 ? (\n                          <tr>\n                            <td colSpan=\"6\" style={{\n                              padding: '2rem',\n                              textAlign: 'center',\n                              color: '#6b7280'\n                            }}>\n                              No users found\n                            </td>\n                          </tr>\n                        ) : (\n                          users.map((userData, index) => (\n                            <tr key={userData._id} style={{\n                              backgroundColor: index % 2 === 0 ? '#ffffff' : '#f9fafb'\n                            }}>\n                              <td style={{\n                                padding: '0.75rem',\n                                borderBottom: '1px solid #e5e7eb'\n                              }}>\n                                {userData.firstName && userData.lastName \n                                  ? `${userData.firstName} ${userData.lastName}` \n                                  : userData.email || 'N/A'}\n                              </td>\n                              <td style={{\n                                padding: '0.75rem',\n                                borderBottom: '1px solid #e5e7eb'\n                              }}>\n                                {userData.email || 'N/A'}\n                              </td>\n                              <td style={{\n                                padding: '0.75rem',\n                                borderBottom: '1px solid #e5e7eb',\n                                fontFamily: 'monospace',\n                                color: '#3b82f6'\n                              }}>\n                                {userData.ownSponsorId || 'N/A'}\n                              </td>\n                              <td style={{\n                                padding: '0.75rem',\n                                borderBottom: '1px solid #e5e7eb'\n                              }}>\n                                {userData.referralCount || 0}\n                              </td>\n                              <td style={{\n                                padding: '0.75rem',\n                                borderBottom: '1px solid #e5e7eb'\n                              }}>\n                                <span style={{\n                                  padding: '0.25rem 0.5rem',\n                                  borderRadius: '0.25rem',\n                                  fontSize: '0.75rem',\n                                  fontWeight: '600',\n                                  backgroundColor: userData.isEnrolledInDas ? '#dcfce7' : '#f3f4f6',\n                                  color: userData.isEnrolledInDas ? '#166534' : '#6b7280'\n                                }}>\n                                  {userData.isEnrolledInDas ? 'Enrolled' : 'Not Enrolled'}\n                                </span>\n                              </td>\n                              <td style={{\n                                padding: '0.75rem',\n                                borderBottom: '1px solid #e5e7eb',\n                                color: '#6b7280'\n                              }}>\n                                {userData.createdAt ? new Date(userData.createdAt).toLocaleDateString() : 'N/A'}\n                              </td>\n                            </tr>\n                          ))\n                        )}\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              )}\n\n              {activeTab === 'kyc' && (\n                <div>\n                  <h3 style={{\n                    fontSize: '1.125rem',\n                    fontWeight: 'bold',\n                    color: '#111827',\n                    marginBottom: '1rem'\n                  }}>\n                    KYC Document Management\n                  </h3>\n                  \n                  <div style={{ overflowX: 'auto' }}>\n                    <table style={{\n                      width: '100%',\n                      borderCollapse: 'collapse',\n                      fontSize: '0.875rem'\n                    }}>\n                      <thead>\n                        <tr style={{ backgroundColor: '#f9fafb' }}>\n                          <th style={{\n                            padding: '0.75rem',\n                            textAlign: 'left',\n                            fontWeight: '600',\n                            color: '#374151',\n                            borderBottom: '1px solid #e5e7eb'\n                          }}>User</th>\n                          <th style={{\n                            padding: '0.75rem',\n                            textAlign: 'left',\n                            fontWeight: '600',\n                            color: '#374151',\n                            borderBottom: '1px solid #e5e7eb'\n                          }}>Status</th>\n                          <th style={{\n                            padding: '0.75rem',\n                            textAlign: 'left',\n                            fontWeight: '600',\n                            color: '#374151',\n                            borderBottom: '1px solid #e5e7eb'\n                          }}>Document</th>\n                          <th style={{\n                            padding: '0.75rem',\n                            textAlign: 'left',\n                            fontWeight: '600',\n                            color: '#374151',\n                            borderBottom: '1px solid #e5e7eb'\n                          }}>Submitted</th>\n                          <th style={{\n                            padding: '0.75rem',\n                            textAlign: 'left',\n                            fontWeight: '600',\n                            color: '#374151',\n                            borderBottom: '1px solid #e5e7eb'\n                          }}>Actions</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {kycSubmissions.length === 0 ? (\n                          <tr>\n                            <td colSpan=\"5\" style={{\n                              padding: '2rem',\n                              textAlign: 'center',\n                              color: '#6b7280'\n                            }}>\n                              No KYC submissions found\n                            </td>\n                          </tr>\n                        ) : (\n                          kycSubmissions.map((userData, index) => (\n                          <tr key={userData._id} style={{\n                            backgroundColor: index % 2 === 0 ? '#ffffff' : '#f9fafb'\n                          }}>\n                            <td style={{\n                              padding: '0.75rem',\n                              borderBottom: '1px solid #e5e7eb'\n                            }}>\n                              <div>\n                                <div style={{ fontWeight: '600' }}>\n                                  {userData.firstName} {userData.lastName}\n                                </div>\n                                <div style={{ color: '#6b7280', fontSize: '0.75rem' }}>\n                                  {userData.email}\n                                </div>\n                              </div>\n                            </td>\n                            <td style={{\n                              padding: '0.75rem',\n                              borderBottom: '1px solid #e5e7eb'\n                            }}>\n                              <span style={{\n                                padding: '0.25rem 0.5rem',\n                                borderRadius: '0.25rem',\n                                fontSize: '0.75rem',\n                                fontWeight: '600',\n                                backgroundColor: \n                                  userData.kycStatus === 'approved' ? '#dcfce7' :\n                                  userData.kycStatus === 'rejected' ? '#fef2f2' :\n                                  '#fef3c7',\n                                color: \n                                  userData.kycStatus === 'approved' ? '#166534' :\n                                  userData.kycStatus === 'rejected' ? '#dc2626' :\n                                  '#d97706'\n                              }}>\n                                {userData.kycStatus === 'approved' ? 'Approved' :\n                                 userData.kycStatus === 'rejected' ? 'Rejected' :\n                                 'Pending'}\n                              </span>\n                            </td>\n                            <td style={{\n                              padding: '0.75rem',\n                              borderBottom: '1px solid #e5e7eb'\n                            }}>\n                              <button\n                                onClick={() => handleViewKycDocument(userData._id)}\n                                style={{\n                                  padding: '0.25rem 0.5rem',\n                                  backgroundColor: '#3b82f6',\n                                  color: 'white',\n                                  border: 'none',\n                                  borderRadius: '0.25rem',\n                                  fontSize: '0.75rem',\n                                  cursor: 'pointer',\n                                  display: 'flex',\n                                  alignItems: 'center',\n                                  gap: '0.25rem'\n                                }}\n                              >\n                                <Eye size={12} />\n                                View\n                              </button>\n                            </td>\n                            <td style={{\n                              padding: '0.75rem',\n                              borderBottom: '1px solid #e5e7eb',\n                              color: '#6b7280',\n                              fontSize: '0.75rem'\n                            }}>\n                              {userData.kycSubmittedAt ? \n                                new Date(userData.kycSubmittedAt).toLocaleDateString() : \n                                'N/A'}\n                            </td>\n                            <td style={{\n                              padding: '0.75rem',\n                              borderBottom: '1px solid #e5e7eb'\n                            }}>\n                              {userData.kycStatus === 'pending' && (\n                                <div style={{ display: 'flex', gap: '0.5rem' }}>\n                                  <button\n                                    onClick={() => handleKycApproval(userData._id, 'approve')}\n                                    style={{\n                                      padding: '0.25rem 0.5rem',\n                                      backgroundColor: '#10b981',\n                                      color: 'white',\n                                      border: 'none',\n                                      borderRadius: '0.25rem',\n                                      fontSize: '0.75rem',\n                                      cursor: 'pointer',\n                                      display: 'flex',\n                                      alignItems: 'center',\n                                      gap: '0.25rem'\n                                    }}\n                                  >\n                                    <CheckCircle size={12} />\n                                    Approve\n                                  </button>\n                                  <button\n                                    onClick={() => handleKycApproval(userData._id, 'reject')}\n                                    style={{\n                                      padding: '0.25rem 0.5rem',\n                                      backgroundColor: '#ef4444',\n                                      color: 'white',\n                                      border: 'none',\n                                      borderRadius: '0.25rem',\n                                      fontSize: '0.75rem',\n                                      cursor: 'pointer',\n                                      display: 'flex',\n                                      alignItems: 'center',\n                                      gap: '0.25rem'\n                                    }}\n                                  >\n                                    <XCircle size={12} />\n                                    Reject\n                                  </button>\n                                </div>\n                              )}\n                              {userData.kycStatus === 'approved' && (\n                                <span style={{ color: '#10b981', fontSize: '0.75rem', fontWeight: '600' }}>\n                                  Approved\n                                </span>\n                              )}\n                              {userData.kycStatus === 'rejected' && (\n                                <span style={{ color: '#ef4444', fontSize: '0.75rem', fontWeight: '600' }}>\n                                  Rejected\n                                </span>\n                              )}\n                            </td>\n                          </tr>\n                          ))\n                        )}\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              )}\n\n              {activeTab === 'deposits' && (\n                <div>\n                  <h3 style={{\n                    fontSize: '1.125rem',\n                    fontWeight: 'bold',\n                    color: '#111827',\n                    marginBottom: '1rem'\n                  }}>\n                    Deposit Management\n                  </h3>\n                  \n                  <div style={{ overflowX: 'auto' }}>\n                    <table style={{\n                      width: '100%',\n                      borderCollapse: 'collapse',\n                      fontSize: '0.875rem'\n                    }}>\n                      <thead>\n                        <tr style={{ backgroundColor: '#f9fafb' }}>\n                          <th style={{\n                            padding: '0.75rem',\n                            textAlign: 'left',\n                            fontWeight: '600',\n                            color: '#374151',\n                            borderBottom: '1px solid #e5e7eb'\n                          }}>User</th>\n                          <th style={{\n                            padding: '0.75rem',\n                            textAlign: 'left',\n                            fontWeight: '600',\n                            color: '#374151',\n                            borderBottom: '1px solid #e5e7eb'\n                          }}>Amount</th>\n                          <th style={{\n                            padding: '0.75rem',\n                            textAlign: 'left',\n                            fontWeight: '600',\n                            color: '#374151',\n                            borderBottom: '1px solid #e5e7eb'\n                          }}>Method</th>\n                          <th style={{\n                            padding: '0.75rem',\n                            textAlign: 'left',\n                            fontWeight: '600',\n                            color: '#374151',\n                            borderBottom: '1px solid #e5e7eb'\n                          }}>Status</th>\n                          <th style={{\n                            padding: '0.75rem',\n                            textAlign: 'left',\n                            fontWeight: '600',\n                            color: '#374151',\n                            borderBottom: '1px solid #e5e7eb'\n                          }}>Date</th>\n                          <th style={{\n                            padding: '0.75rem',\n                            textAlign: 'left',\n                            fontWeight: '600',\n                            color: '#374151',\n                            borderBottom: '1px solid #e5e7eb'\n                          }}>Screenshot</th>\n                          <th style={{\n                            padding: '0.75rem',\n                            textAlign: 'left',\n                            fontWeight: '600',\n                            color: '#374151',\n                            borderBottom: '1px solid #e5e7eb'\n                          }}>Actions</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {deposits.map((deposit, index) => (\n                          <tr key={deposit._id} style={{\n                            backgroundColor: index % 2 === 0 ? '#ffffff' : '#f9fafb'\n                          }}>\n                            <td style={{\n                              padding: '0.75rem',\n                              borderBottom: '1px solid #e5e7eb'\n                            }}>\n                              {deposit.userId?.firstName} {deposit.userId?.lastName}\n                              <br />\n                              <span style={{ fontSize: '0.75rem', color: '#6b7280' }}>\n                                {deposit.userId?.email}\n                              </span>\n                            </td>\n                            <td style={{\n                              padding: '0.75rem',\n                              borderBottom: '1px solid #e5e7eb',\n                              fontWeight: '600',\n                              color: '#111827'\n                            }}>\n                              ${deposit.amount}\n                            </td>\n                            <td style={{\n                              padding: '0.75rem',\n                              borderBottom: '1px solid #e5e7eb'\n                            }}>\n                              {deposit.paymentMethod}\n                            </td>\n                            <td style={{\n                              padding: '0.75rem',\n                              borderBottom: '1px solid #e5e7eb'\n                            }}>\n                              <span style={{\n                                padding: '0.25rem 0.5rem',\n                                borderRadius: '0.25rem',\n                                fontSize: '0.75rem',\n                                fontWeight: '600',\n                                backgroundColor: deposit.status === 'confirmed' ? '#dcfce7' : \n                                                deposit.status === 'pending' ? '#fef3c7' : '#fee2e2',\n                                color: deposit.status === 'confirmed' ? '#166534' : \n                                       deposit.status === 'pending' ? '#92400e' : '#dc2626'\n                              }}>\n                                {deposit.status.charAt(0).toUpperCase() + deposit.status.slice(1)}\n                              </span>\n                            </td>\n                            <td style={{\n                              padding: '0.75rem',\n                              borderBottom: '1px solid #e5e7eb',\n                              color: '#6b7280'\n                            }}>\n                              {new Date(deposit.createdAt).toLocaleDateString()}\n                            </td>\n                            <td style={{\n                              padding: '0.75rem',\n                              borderBottom: '1px solid #e5e7eb'\n                            }}>\n                              {deposit.screenshotPath ? (\n                                <button\n                                  onClick={() => handleViewDepositScreenshot(deposit)}\n                                  style={{\n                                    padding: '0.25rem 0.5rem',\n                                    backgroundColor: '#3b82f6',\n                                    color: 'white',\n                                    border: 'none',\n                                    borderRadius: '0.25rem',\n                                    fontSize: '0.75rem',\n                                    cursor: 'pointer',\n                                    display: 'flex',\n                                    alignItems: 'center',\n                                    gap: '0.25rem'\n                                  }}\n                                >\n                                  <Eye style={{ width: '0.75rem', height: '0.75rem' }} />\n                                  View\n                                </button>\n                              ) : (\n                                <span style={{ color: '#6b7280', fontSize: '0.75rem' }}>\n                                  No screenshot\n                                </span>\n                              )}\n                            </td>\n                            <td style={{\n                              padding: '0.75rem',\n                              borderBottom: '1px solid #e5e7eb'\n                            }}>\n                              {deposit.status === 'pending' && (\n                                <div style={{ display: 'flex', gap: '0.5rem' }}>\n                                  <button\n                                    onClick={() => handleDepositAction(deposit._id, 'approve')}\n                                    style={{\n                                      padding: '0.25rem 0.5rem',\n                                      backgroundColor: '#10b981',\n                                      color: 'white',\n                                      border: 'none',\n                                      borderRadius: '0.25rem',\n                                      fontSize: '0.75rem',\n                                      cursor: 'pointer',\n                                      display: 'flex',\n                                      alignItems: 'center',\n                                      gap: '0.25rem'\n                                    }}\n                                  >\n                                    <CheckCircle style={{ width: '0.75rem', height: '0.75rem' }} />\n                                    Approve\n                                  </button>\n                                  <button\n                                    onClick={() => handleDepositAction(deposit._id, 'reject')}\n                                    style={{\n                                      padding: '0.25rem 0.5rem',\n                                      backgroundColor: '#ef4444',\n                                      color: 'white',\n                                      border: 'none',\n                                      borderRadius: '0.25rem',\n                                      fontSize: '0.75rem',\n                                      cursor: 'pointer',\n                                      display: 'flex',\n                                      alignItems: 'center',\n                                      gap: '0.25rem'\n                                    }}\n                                  >\n                                    <XCircle style={{ width: '0.75rem', height: '0.75rem' }} />\n                                    Reject\n                                  </button>\n                                </div>\n                              )}\n                              {deposit.status !== 'pending' && (\n                                <span style={{ color: '#6b7280', fontSize: '0.75rem' }}>\n                                  {deposit.adminNotes && (\n                                    <span style={{ fontSize: '0.75rem', fontStyle: 'italic' }}>\n                                      {deposit.adminNotes}\n                                    </span>\n                                  )}\n                                </span>\n                              )}\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              )}\n\n              {activeTab === 'withdrawals' && (\n                <div>\n                  <h3 style={{\n                    fontSize: '1.125rem',\n                    fontWeight: 'bold',\n                    color: '#111827',\n                    marginBottom: '1rem'\n                  }}>\n                    Withdrawal Management\n                  </h3>\n                  \n                  <div style={{ overflowX: 'auto' }}>\n                    <table style={{\n                      width: '100%',\n                      borderCollapse: 'collapse',\n                      fontSize: '0.875rem'\n                    }}>\n                      <thead>\n                        <tr style={{ backgroundColor: '#f9fafb' }}>\n                          <th style={{\n                            padding: '0.75rem',\n                            textAlign: 'left',\n                            fontWeight: '600',\n                            color: '#374151',\n                            borderBottom: '1px solid #e5e7eb'\n                          }}>User</th>\n                          <th style={{\n                            padding: '0.75rem',\n                            textAlign: 'left',\n                            fontWeight: '600',\n                            color: '#374151',\n                            borderBottom: '1px solid #e5e7eb'\n                          }}>Requested</th>\n                          <th style={{\n                            padding: '0.75rem',\n                            textAlign: 'left',\n                            fontWeight: '600',\n                            color: '#374151',\n                            borderBottom: '1px solid #e5e7eb'\n                          }}>Service Charge</th>\n                          <th style={{\n                            padding: '0.75rem',\n                            textAlign: 'left',\n                            fontWeight: '600',\n                            color: '#374151',\n                            borderBottom: '1px solid #e5e7eb'\n                          }}>Net Amount</th>\n                          <th style={{\n                            padding: '0.75rem',\n                            textAlign: 'left',\n                            fontWeight: '600',\n                            color: '#374151',\n                            borderBottom: '1px solid #e5e7eb'\n                          }}>Method & Address</th>\n                          <th style={{\n                            padding: '0.75rem',\n                            textAlign: 'left',\n                            fontWeight: '600',\n                            color: '#374151',\n                            borderBottom: '1px solid #e5e7eb'\n                          }}>Status</th>\n                          <th style={{\n                            padding: '0.75rem',\n                            textAlign: 'left',\n                            fontWeight: '600',\n                            color: '#374151',\n                            borderBottom: '1px solid #e5e7eb'\n                          }}>Date</th>\n                          <th style={{\n                            padding: '0.75rem',\n                            textAlign: 'left',\n                            fontWeight: '600',\n                            color: '#374151',\n                            borderBottom: '1px solid #e5e7eb'\n                          }}>Actions</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {withdrawals.length === 0 ? (\n                          <tr>\n                            <td colSpan=\"8\" style={{\n                              padding: '2rem',\n                              textAlign: 'center',\n                              color: '#6b7280'\n                            }}>\n                              No withdrawal requests found\n                            </td>\n                          </tr>\n                        ) : (\n                          withdrawals.map((withdrawal, index) => (\n                            <tr key={withdrawal._id} style={{\n                              backgroundColor: index % 2 === 0 ? '#ffffff' : '#f9fafb'\n                            }}>\n                              <td style={{\n                                padding: '0.75rem',\n                                borderBottom: '1px solid #e5e7eb'\n                              }}>\n                                <div>\n                                  <div style={{ fontWeight: '600' }}>\n                                    {withdrawal.user?.name || 'Unknown User'}\n                                  </div>\n                                  <div style={{ color: '#6b7280', fontSize: '0.75rem' }}>\n                                    {withdrawal.user?.email || 'No email'}\n                                  </div>\n                                  <div style={{ color: '#3b82f6', fontSize: '0.75rem' }}>\n                                    {withdrawal.user?.sponsorId || 'No ID'}\n                                  </div>\n                                </div>\n                              </td>\n                              <td style={{\n                                padding: '0.75rem',\n                                borderBottom: '1px solid #e5e7eb',\n                                fontWeight: '600',\n                                color: '#111827'\n                              }}>\n                                ${withdrawal.requestedAmount}\n                              </td>\n                              <td style={{\n                                padding: '0.75rem',\n                                borderBottom: '1px solid #e5e7eb',\n                                color: '#ef4444',\n                                fontWeight: '500'\n                              }}>\n                                -${withdrawal.serviceCharge}\n                              </td>\n                              <td style={{\n                                padding: '0.75rem',\n                                borderBottom: '1px solid #e5e7eb',\n                                fontWeight: '600',\n                                color: '#059669'\n                              }}>\n                                ${withdrawal.netAmount || withdrawal.amount}\n                              </td>\n                              <td style={{\n                                padding: '0.75rem',\n                                borderBottom: '1px solid #e5e7eb'\n                              }}>\n                                <div>\n                                  <div style={{ fontWeight: '500' }}>\n                                    {withdrawal.method}\n                                  </div>\n                                  <div style={{ \n                                    color: '#6b7280', \n                                    fontSize: '0.75rem',\n                                    wordBreak: 'break-all'\n                                  }}>\n                                    {withdrawal.walletAddress}\n                                  </div>\n                                </div>\n                              </td>\n                              <td style={{\n                                padding: '0.75rem',\n                                borderBottom: '1px solid #e5e7eb'\n                              }}>\n                                <span style={{\n                                  padding: '0.25rem 0.5rem',\n                                  borderRadius: '0.25rem',\n                                  fontSize: '0.75rem',\n                                  fontWeight: '600',\n                                  backgroundColor: \n                                    withdrawal.status === 'approved' ? '#dcfce7' :\n                                    withdrawal.status === 'rejected' ? '#fef2f2' :\n                                    withdrawal.status === 'pending_admin' ? '#fef3c7' :\n                                    '#f3f4f6',\n                                  color: \n                                    withdrawal.status === 'approved' ? '#166534' :\n                                    withdrawal.status === 'rejected' ? '#dc2626' :\n                                    withdrawal.status === 'pending_admin' ? '#d97706' :\n                                    '#6b7280'\n                                }}>\n                                  {withdrawal.status === 'approved' ? 'Approved' :\n                                   withdrawal.status === 'rejected' ? 'Rejected' :\n                                   withdrawal.status === 'pending_admin' ? 'Pending Admin' :\n                                   withdrawal.status === 'pending_otp' ? 'Awaiting OTP' :\n                                   'Unknown'}\n                                </span>\n                                {withdrawal.otpVerified && (\n                                  <div style={{ \n                                    fontSize: '0.75rem', \n                                    color: '#059669', \n                                    marginTop: '0.25rem' \n                                  }}>\n                                    OTP Verified\n                                  </div>\n                                )}\n                              </td>\n                              <td style={{\n                                padding: '0.75rem',\n                                borderBottom: '1px solid #e5e7eb',\n                                color: '#6b7280',\n                                fontSize: '0.75rem'\n                              }}>\n                                <div>\n                                  {new Date(withdrawal.createdAt).toLocaleDateString()}\n                                </div>\n                                <div>\n                                  {new Date(withdrawal.createdAt).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}\n                                </div>\n                              </td>\n                              <td style={{\n                                padding: '0.75rem',\n                                borderBottom: '1px solid #e5e7eb'\n                              }}>\n                                {withdrawal.status === 'pending_admin' && (\n                                  <div style={{ display: 'flex', flexDirection: 'column', gap: '0.5rem' }}>\n                                    <button\n                                      onClick={() => {\n                                        const notes = prompt('Enter approval notes:');\n                                        if (notes) handleWithdrawalAction(withdrawal._id, 'approve', notes);\n                                      }}\n                                      style={{\n                                        padding: '0.25rem 0.5rem',\n                                        backgroundColor: '#10b981',\n                                        color: 'white',\n                                        border: 'none',\n                                        borderRadius: '0.25rem',\n                                        fontSize: '0.75rem',\n                                        cursor: 'pointer',\n                                        display: 'flex',\n                                        alignItems: 'center',\n                                        justifyContent: 'center',\n                                        gap: '0.25rem'\n                                      }}\n                                    >\n                                      <CheckCircle size={12} />\n                                      Approve\n                                    </button>\n                                    <button\n                                      onClick={() => {\n                                        const notes = prompt('Enter rejection reason:');\n                                        if (notes) handleWithdrawalAction(withdrawal._id, 'reject', notes);\n                                      }}\n                                      style={{\n                                        padding: '0.25rem 0.5rem',\n                                        backgroundColor: '#ef4444',\n                                        color: 'white',\n                                        border: 'none',\n                                        borderRadius: '0.25rem',\n                                        fontSize: '0.75rem',\n                                        cursor: 'pointer',\n                                        display: 'flex',\n                                        alignItems: 'center',\n                                        justifyContent: 'center',\n                                        gap: '0.25rem'\n                                      }}\n                                    >\n                                      <XCircle size={12} />\n                                      Reject\n                                    </button>\n                                  </div>\n                                )}\n                                {withdrawal.status !== 'pending_admin' && (\n                                  <div style={{ fontSize: '0.75rem', color: '#6b7280' }}>\n                                    {withdrawal.adminNotes && (\n                                      <div style={{\n                                        backgroundColor: '#f9fafb',\n                                        padding: '0.5rem',\n                                        borderRadius: '0.25rem',\n                                        maxWidth: '200px'\n                                      }}>\n                                        <strong>Notes:</strong><br />\n                                        {withdrawal.adminNotes}\n                                      </div>\n                                    )}\n                                    {withdrawal.adminActionBy && (\n                                      <div style={{ marginTop: '0.25rem', fontSize: '0.75rem' }}>\n                                        By: {withdrawal.adminActionBy.name}\n                                      </div>\n                                    )}\n                                  </div>\n                                )}\n                              </td>\n                            </tr>\n                          ))\n                        )}\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              )}\n\n              {activeTab === 'investments' && (\n                <div>\n                  <h3 style={{\n                    fontSize: '1.125rem',\n                    fontWeight: 'bold',\n                    color: '#111827',\n                    marginBottom: '1rem'\n                  }}>\n                    Investment Tracking\n                  </h3>\n                  <p style={{ color: '#6b7280', textAlign: 'center', padding: '2rem' }}>\n                    Investment tracking system coming soon...\n                  </p>\n                </div>\n              )}\n\n              {activeTab === 'engagement' && (\n                <div>\n                  <h3 style={{\n                    fontSize: '1.125rem',\n                    fontWeight: 'bold',\n                    color: '#111827',\n                    marginBottom: '1rem'\n                  }}>\n                    User Engagement Analytics\n                  </h3>\n                  \n                  {/* Search Section */}\n                  <div style={{\n                    backgroundColor: '#f9fafb',\n                    borderRadius: '0.5rem',\n                    padding: '1.5rem',\n                    marginBottom: '1.5rem',\n                    border: '1px solid #e5e7eb'\n                  }}>\n                    <h4 style={{\n                      fontSize: '1rem',\n                      fontWeight: '600',\n                      color: '#111827',\n                      marginBottom: '1rem'\n                    }}>\n                      Search User by Email or Mobile\n                    </h4>\n                    \n                    <div style={{\n                      display: 'flex',\n                      gap: '1rem',\n                      alignItems: 'center'\n                    }}>\n                      <div style={{ position: 'relative', flex: 1 }}>\n                        <Search style={{\n                          position: 'absolute',\n                          left: '0.75rem',\n                          top: '50%',\n                          transform: 'translateY(-50%)',\n                          width: '1rem',\n                          height: '1rem',\n                          color: '#6b7280'\n                        }} />\n                        <input\n                          type=\"text\"\n                          placeholder=\"Enter email or mobile number...\"\n                          value={searchTerm}\n                          onChange={(e) => setSearchTerm(e.target.value)}\n                          style={{\n                            width: '100%',\n                            padding: '0.75rem 0.75rem 0.75rem 2.5rem',\n                            border: '1px solid #d1d5db',\n                            borderRadius: '0.5rem',\n                            fontSize: '0.875rem',\n                            outline: 'none'\n                          }}\n                          onFocus={(e) => e.target.style.borderColor = '#f59e0b'}\n                          onBlur={(e) => e.target.style.borderColor = '#d1d5db'}\n                        />\n                      </div>\n                      <button\n                        onClick={() => handleUserSearch(searchTerm)}\n                        style={{\n                          padding: '0.75rem 1.5rem',\n                          backgroundColor: '#f59e0b',\n                          color: 'white',\n                          border: 'none',\n                          borderRadius: '0.5rem',\n                          fontSize: '0.875rem',\n                          fontWeight: '600',\n                          cursor: 'pointer',\n                          transition: 'all 0.2s ease'\n                        }}\n                        onMouseEnter={(e) => e.target.style.backgroundColor = '#d97706'}\n                        onMouseLeave={(e) => e.target.style.backgroundColor = '#f59e0b'}\n                      >\n                        Search\n                      </button>\n                    </div>\n                  </div>\n\n                  {/* User History Display */}\n                  <div style={{\n                    backgroundColor: '#ffffff',\n                    borderRadius: '0.5rem',\n                    border: '1px solid #e5e7eb',\n                    minHeight: '300px',\n                    padding: '1.5rem'\n                  }}>\n                    {searchLoading ? (\n                      <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', height: '200px' }}>\n                        <div style={{\n                          width: '2rem',\n                          height: '2rem',\n                          border: '2px solid #e5e7eb',\n                          borderTop: '2px solid #f59e0b',\n                          borderRadius: '50%',\n                          animation: 'spin 1s linear infinite'\n                        }}></div>\n                      </div>\n                    ) : userHistory ? (\n                      <div>\n                        {/* User Info */}\n                        <div style={{\n                          backgroundColor: '#f9fafb',\n                          borderRadius: '0.5rem',\n                          padding: '1rem',\n                          marginBottom: '1.5rem',\n                          border: '1px solid #e5e7eb'\n                        }}>\n                          <h4 style={{\n                            fontSize: '1.125rem',\n                            fontWeight: 'bold',\n                            color: '#111827',\n                            marginBottom: '0.5rem'\n                          }}>\n                            {userHistory.firstName} {userHistory.lastName}\n                          </h4>\n                          <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '1rem' }}>\n                            <div>\n                              <p style={{ fontSize: '0.875rem', color: '#6b7280', margin: 0 }}>Email</p>\n                              <p style={{ fontSize: '0.875rem', fontWeight: '600', color: '#111827', margin: 0 }}>\n                                {userHistory.email}\n                              </p>\n                            </div>\n                            <div>\n                              <p style={{ fontSize: '0.875rem', color: '#6b7280', margin: 0 }}>Mobile</p>\n                              <p style={{ fontSize: '0.875rem', fontWeight: '600', color: '#111827', margin: 0 }}>\n                                {userHistory.mobile || 'N/A'}\n                              </p>\n                            </div>\n                            <div>\n                              <p style={{ fontSize: '0.875rem', color: '#6b7280', margin: 0 }}>Sponsor ID</p>\n                              <p style={{ fontSize: '0.875rem', fontWeight: '600', color: '#3b82f6', margin: 0 }}>\n                                {userHistory.ownSponsorId}\n                              </p>\n                            </div>\n                            <div>\n                              <p style={{ fontSize: '0.875rem', color: '#6b7280', margin: 0 }}>DAS Status</p>\n                              <span style={{\n                                padding: '0.25rem 0.5rem',\n                                borderRadius: '0.25rem',\n                                fontSize: '0.75rem',\n                                fontWeight: '600',\n                                backgroundColor: userHistory.isEnrolledInDas ? '#dcfce7' : '#f3f4f6',\n                                color: userHistory.isEnrolledInDas ? '#166534' : '#6b7280'\n                              }}>\n                                {userHistory.isEnrolledInDas ? 'Enrolled' : 'Not Enrolled'}\n                              </span>\n                            </div>\n                          </div>\n                        </div>\n\n                        {/* Income Summary Cards */}\n                        <div style={{\n                          display: 'grid',\n                          gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',\n                          gap: '1rem',\n                          marginBottom: '1.5rem'\n                        }}>\n                          <div style={{\n                            backgroundColor: '#f0f9ff',\n                            borderRadius: '0.5rem',\n                            padding: '1rem',\n                            border: '1px solid #bae6fd'\n                          }}>\n                            <h5 style={{ fontSize: '0.875rem', color: '#0369a1', margin: '0 0 0.5rem 0' }}>FS Income</h5>\n                            <p style={{ fontSize: '1.25rem', fontWeight: 'bold', color: '#111827', margin: 0 }}>\n                              ${userHistory.fsIncome || 0}\n                            </p>\n                          </div>\n                          <div style={{\n                            backgroundColor: '#f0fdf4',\n                            borderRadius: '0.5rem',\n                            padding: '1rem',\n                            border: '1px solid #bbf7d0'\n                          }}>\n                            <h5 style={{ fontSize: '0.875rem', color: '#059669', margin: '0 0 0.5rem 0' }}>Smart Line Income</h5>\n                            <p style={{ fontSize: '1.25rem', fontWeight: 'bold', color: '#111827', margin: 0 }}>\n                              ${userHistory.smartLineIncome || 0}\n                            </p>\n                          </div>\n                          <div style={{\n                            backgroundColor: '#fef7ff',\n                            borderRadius: '0.5rem',\n                            padding: '1rem',\n                            border: '1px solid #e9d5ff'\n                          }}>\n                            <h5 style={{ fontSize: '0.875rem', color: '#7c3aed', margin: '0 0 0.5rem 0' }}>DRI Income</h5>\n                            <p style={{ fontSize: '1.25rem', fontWeight: 'bold', color: '#111827', margin: 0 }}>\n                              ${userHistory.driIncome || 0}\n                            </p>\n                          </div>\n                          <div style={{\n                            backgroundColor: '#fffbeb',\n                            borderRadius: '0.5rem',\n                            padding: '1rem',\n                            border: '1px solid #fed7aa'\n                          }}>\n                            <h5 style={{ fontSize: '0.875rem', color: '#d97706', margin: '0 0 0.5rem 0' }}>DAS Monthly Earnings</h5>\n                            <p style={{ fontSize: '1.25rem', fontWeight: 'bold', color: '#111827', margin: 0 }}>\n                              ${userHistory.dasMonthlyEarnings || 0}\n                            </p>\n                          </div>\n                        </div>\n\n                        {/* Investment History */}\n                        <div>\n                          <h5 style={{\n                            fontSize: '1rem',\n                            fontWeight: '600',\n                            color: '#111827',\n                            marginBottom: '1rem'\n                          }}>\n                            Investment History\n                          </h5>\n                          <div style={{\n                            backgroundColor: '#f9fafb',\n                            borderRadius: '0.5rem',\n                            padding: '1rem',\n                            textAlign: 'center'\n                          }}>\n                            <p style={{ color: '#6b7280', margin: 0 }}>\n                              Total Investment Volume: <strong>${userHistory.totalInvestmentVolume || 0}</strong>\n                            </p>\n                            <p style={{ color: '#6b7280', margin: '0.5rem 0 0 0', fontSize: '0.875rem' }}>\n                              Detailed investment history will be available once investment tracking is implemented.\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n                    ) : (\n                      <div style={{ \n                        display: 'flex', \n                        alignItems: 'center', \n                        justifyContent: 'center',\n                        height: '250px'\n                      }}>\n                        <div style={{ textAlign: 'center', color: '#6b7280' }}>\n                          <FileText style={{ width: '3rem', height: '3rem', margin: '0 auto 1rem', opacity: 0.5 }} />\n                          <p style={{ fontSize: '1rem', fontWeight: '500' }}>\n                            Enter a user's email or mobile number to view their complete history\n                          </p>\n                          <p style={{ fontSize: '0.875rem', marginTop: '0.5rem' }}>\n                            View: Investment History • FS Income • Smart Line Income • DRI Income • DAS Status\n                          </p>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":70395},"server/emailService.js":{"content":"import sgMail from '@sendgrid/mail';\n\n// Initialize SendGrid\nif (!process.env.SENDGRID_API_KEY) {\n  console.warn('SENDGRID_API_KEY not found in environment variables');\n} else {\n  sgMail.setApiKey(process.env.SENDGRID_API_KEY);\n}\n\nclass EmailService {\n  constructor() {\n    this.fromEmail = 'noreply@fxbot.co.in'; // Default sender email\n  }\n\n  async sendWelcomeEmail(userEmail, userData) {\n    try {\n      const msg = {\n        to: userEmail,\n        from: {\n          email: this.fromEmail,\n          name: 'FXBOT Team'\n        },\n        subject: 'Welcome to FXBOT - Your Forex Investment Journey Begins!',\n        html: this.generateWelcomeEmailTemplate(userData)\n      };\n\n      const result = await sgMail.send(msg);\n      console.log('Welcome email sent successfully to:', userEmail);\n      return { success: true, messageId: result[0].headers['x-message-id'] };\n    } catch (error) {\n      console.error('Error sending welcome email:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  async sendPasswordResetEmail(userEmail, resetToken, userName) {\n    try {\n      const resetLink = `https://fxbot.co.in/reset-password?token=${resetToken}`;\n      \n      const msg = {\n        to: userEmail,\n        from: {\n          email: this.fromEmail,\n          name: 'FXBOT Team'\n        },\n        subject: 'Reset Your FXBOT Password',\n        html: this.generatePasswordResetEmailTemplate(resetLink, userName)\n      };\n\n      const result = await sgMail.send(msg);\n      console.log('Password reset email sent successfully to:', userEmail);\n      return { success: true, messageId: result[0].headers['x-message-id'] };\n    } catch (error) {\n      console.error('Error sending password reset email:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  generateWelcomeEmailTemplate(userData) {\n    return `\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <meta charset=\"utf-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <title>Welcome to FXBOT</title>\n      <style>\n        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 0; padding: 0; background-color: #f5f5f5; }\n        .container { max-width: 600px; margin: 0 auto; background-color: #ffffff; }\n        .header { background: linear-gradient(135deg, #f59e0b, #d97706); padding: 30px; text-align: center; }\n        .logo { color: #ffffff; font-size: 28px; font-weight: bold; margin: 0; }\n        .content { padding: 40px 30px; }\n        .welcome-title { color: #111827; font-size: 24px; font-weight: bold; margin-bottom: 20px; }\n        .user-info { background-color: #f9fafb; border-radius: 8px; padding: 20px; margin: 20px 0; border-left: 4px solid #f59e0b; }\n        .info-row { display: flex; justify-content: space-between; margin-bottom: 10px; }\n        .label { font-weight: 600; color: #374151; }\n        .value { color: #111827; }\n        .sponsor-id { background-color: #f59e0b; color: white; padding: 8px 16px; border-radius: 6px; font-weight: bold; display: inline-block; }\n        .next-steps { background-color: #ecfdf5; border-radius: 8px; padding: 20px; margin: 20px 0; }\n        .step { margin-bottom: 10px; padding-left: 20px; position: relative; }\n        .step:before { content: \"✓\"; position: absolute; left: 0; color: #059669; font-weight: bold; }\n        .footer { background-color: #374151; color: #d1d5db; text-align: center; padding: 20px; font-size: 14px; }\n        .button { background-color: #f59e0b; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; font-weight: bold; display: inline-block; margin: 20px 0; }\n        .button:hover { background-color: #d97706; }\n      </style>\n    </head>\n    <body>\n      <div class=\"container\">\n        <div class=\"header\">\n          <h1 class=\"logo\">FXBOT</h1>\n          <p style=\"color: #fbbf24; margin: 10px 0 0 0;\">Professional Forex Investment Platform</p>\n        </div>\n        \n        <div class=\"content\">\n          <h2 class=\"welcome-title\">Welcome to FXBOT, ${userData.firstName}!</h2>\n          \n          <p>Congratulations on taking the first step towards your forex investment journey. Your account has been successfully created and you're now part of the FXBOT community.</p>\n          \n          <div class=\"user-info\">\n            <h3 style=\"margin-top: 0; color: #111827;\">Your Account Details</h3>\n            <div class=\"info-row\">\n              <span class=\"label\">Name:</span>\n              <span class=\"value\">${userData.firstName} ${userData.lastName}</span>\n            </div>\n            <div class=\"info-row\">\n              <span class=\"label\">Email:</span>\n              <span class=\"value\">${userData.email}</span>\n            </div>\n            <div class=\"info-row\">\n              <span class=\"label\">Mobile:</span>\n              <span class=\"value\">${userData.mobile || 'Not provided'}</span>\n            </div>\n            <div class=\"info-row\">\n              <span class=\"label\">Your Sponsor ID:</span>\n              <span class=\"sponsor-id\">${userData.ownSponsorId}</span>\n            </div>\n            ${userData.sponsorId ? `\n            <div class=\"info-row\">\n              <span class=\"label\">Referred by:</span>\n              <span class=\"value\">${userData.sponsorId}</span>\n            </div>\n            ` : ''}\n          </div>\n          \n          <div class=\"next-steps\">\n            <h3 style=\"margin-top: 0; color: #059669;\">What's Next?</h3>\n            <div class=\"step\">Complete your profile verification</div>\n            <div class=\"step\">Explore our investment packages</div>\n            <div class=\"step\">Make your first deposit to start earning</div>\n            <div class=\"step\">Refer friends and earn commission rewards</div>\n            <div class=\"step\">Access the DAS program for enhanced earnings</div>\n          </div>\n          \n          <p>Ready to start your investment journey?</p>\n          <a href=\"https://fxbot.co.in/login\" class=\"button\">Access Your Dashboard</a>\n          \n          <p style=\"margin-top: 30px; color: #6b7280; font-size: 14px;\">\n            <strong>Important:</strong> Keep your login credentials secure and never share them with anyone. \n            Our team will never ask for your password via email or phone.\n          </p>\n        </div>\n        \n        <div class=\"footer\">\n          <p>&copy; 2025 FXBOT. All rights reserved.</p>\n          <p>Professional Forex Investment Platform</p>\n          <p>Need help? Contact us at support@fxbot.co.in</p>\n        </div>\n      </div>\n    </body>\n    </html>\n    `;\n  }\n\n  generatePasswordResetEmailTemplate(resetLink, userName) {\n    return `\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <meta charset=\"utf-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <title>Reset Your FXBOT Password</title>\n      <style>\n        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 0; padding: 0; background-color: #f5f5f5; }\n        .container { max-width: 600px; margin: 0 auto; background-color: #ffffff; }\n        .header { background: linear-gradient(135deg, #dc2626, #b91c1c); padding: 30px; text-align: center; }\n        .logo { color: #ffffff; font-size: 28px; font-weight: bold; margin: 0; }\n        .content { padding: 40px 30px; }\n        .reset-title { color: #111827; font-size: 24px; font-weight: bold; margin-bottom: 20px; }\n        .security-notice { background-color: #fef3c7; border-radius: 8px; padding: 20px; margin: 20px 0; border-left: 4px solid #f59e0b; }\n        .button { background-color: #dc2626; color: white; padding: 15px 30px; text-decoration: none; border-radius: 8px; font-weight: bold; display: inline-block; margin: 25px 0; font-size: 16px; }\n        .button:hover { background-color: #b91c1c; }\n        .expiry-notice { background-color: #f3f4f6; border-radius: 8px; padding: 15px; margin: 20px 0; text-align: center; }\n        .footer { background-color: #374151; color: #d1d5db; text-align: center; padding: 20px; font-size: 14px; }\n        .link-text { word-break: break-all; color: #6b7280; font-size: 12px; }\n      </style>\n    </head>\n    <body>\n      <div class=\"container\">\n        <div class=\"header\">\n          <h1 class=\"logo\">FXBOT</h1>\n          <p style=\"color: #fca5a5; margin: 10px 0 0 0;\">Password Reset Request</p>\n        </div>\n        \n        <div class=\"content\">\n          <h2 class=\"reset-title\">Reset Your Password</h2>\n          \n          <p>Hello ${userName},</p>\n          \n          <p>We received a request to reset your FXBOT account password. If you made this request, please click the button below to create a new password:</p>\n          \n          <div style=\"text-align: center;\">\n            <a href=\"${resetLink}\" class=\"button\">Reset My Password</a>\n          </div>\n          \n          <div class=\"expiry-notice\">\n            <p style=\"margin: 0; color: #374151; font-weight: 600;\">⏰ This link will expire in 1 hour</p>\n            <p style=\"margin: 5px 0 0 0; color: #6b7280; font-size: 14px;\">For your security, this reset link can only be used once.</p>\n          </div>\n          \n          <div class=\"security-notice\">\n            <h4 style=\"margin-top: 0; color: #92400e;\">🔒 Security Notice</h4>\n            <ul style=\"margin: 10px 0; color: #78350f;\">\n              <li>If you didn't request this password reset, please ignore this email</li>\n              <li>Your current password will remain unchanged until you create a new one</li>\n              <li>Never share your password or reset links with anyone</li>\n              <li>Always log in from our official website: fxbot.co.in</li>\n            </ul>\n          </div>\n          \n          <p style=\"color: #6b7280; font-size: 14px; margin-top: 30px;\">\n            <strong>Can't click the button?</strong><br>\n            Copy and paste this link into your browser:\n          </p>\n          <p class=\"link-text\">${resetLink}</p>\n          \n          <p style=\"margin-top: 30px; color: #6b7280; font-size: 14px;\">\n            If you're having trouble or didn't request this reset, please contact our support team at support@fxbot.co.in\n          </p>\n        </div>\n        \n        <div class=\"footer\">\n          <p>&copy; 2025 FXBOT. All rights reserved.</p>\n          <p>Professional Forex Investment Platform</p>\n          <p>This email was sent because a password reset was requested for your account.</p>\n        </div>\n      </div>\n    </body>\n    </html>\n    `;\n  }\n\n  async sendPasswordResetEmail(toEmail, resetToken, userName) {\n    try {\n      // Create the reset link - use current domain for development\n      const baseUrl = process.env.NODE_ENV === 'production' \n        ? 'https://fxbot.co.in' \n        : `http://localhost:5000`;\n      const resetLink = `${baseUrl}/reset-password?token=${resetToken}`;\n      \n      const msg = {\n        to: toEmail,\n        from: {\n          email: this.fromEmail,\n          name: 'FXBOT Security Team'\n        },\n        subject: 'Reset Your FXBOT Password',\n        html: this.generatePasswordResetEmailTemplate(resetLink, userName)\n      };\n\n      const result = await sgMail.send(msg);\n      console.log('Password reset email sent successfully to:', toEmail);\n      return { success: true, messageId: result[0].headers['x-message-id'] };\n    } catch (error) {\n      console.error('Error sending password reset email:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  async sendTestEmail(toEmail) {\n    try {\n      const msg = {\n        to: toEmail,\n        from: {\n          email: this.fromEmail,\n          name: 'FXBOT Team'\n        },\n        subject: 'FXBOT Email Service Test',\n        html: `\n          <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n            <h2 style=\"color: #f59e0b;\">Email Service Test</h2>\n            <p>This is a test email to verify that the FXBOT email service is working correctly.</p>\n            <p>If you received this email, the integration is successful!</p>\n            <hr>\n            <p style=\"color: #666; font-size: 12px;\">FXBOT - Professional Forex Investment Platform</p>\n          </div>\n        `\n      };\n\n      const result = await sgMail.send(msg);\n      console.log('Test email sent successfully to:', toEmail);\n      return { success: true, messageId: result[0].headers['x-message-id'] };\n    } catch (error) {\n      console.error('Error sending test email:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  // Deposit notification email to admin\n  async sendDepositNotificationEmail(depositData, userData) {\n    try {\n      const adminEmail = 'vijay@fxbot.co.in'; // Admin email\n      \n      const msg = {\n        to: adminEmail,\n        from: {\n          email: this.fromEmail,\n          name: 'FXBOT System'\n        },\n        subject: `New Deposit Request - $${depositData.amount} from ${userData.firstName} ${userData.lastName}`,\n        html: this.generateDepositNotificationTemplate(depositData, userData)\n      };\n\n      const result = await sgMail.send(msg);\n      console.log('Deposit notification email sent successfully to admin:', adminEmail);\n      return { success: true, messageId: result[0].headers['x-message-id'] };\n    } catch (error) {\n      console.error('Error sending deposit notification email:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  // Deposit approval email to user\n  async sendDepositApprovalEmail(userEmail, depositData, userName) {\n    try {\n      const msg = {\n        to: userEmail,\n        from: {\n          email: this.fromEmail,\n          name: 'FXBOT Team'\n        },\n        subject: 'Deposit Approved - Investment Activated - FXBOT',\n        html: this.generateDepositApprovalTemplate(depositData, userName)\n      };\n\n      const result = await sgMail.send(msg);\n      console.log('Deposit approval email sent successfully to:', userEmail);\n      return { success: true, messageId: result[0].headers['x-message-id'] };\n    } catch (error) {\n      console.error('Error sending deposit approval email:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  // Deposit rejection email to user\n  async sendDepositRejectionEmail(userEmail, depositData, userName) {\n    try {\n      const msg = {\n        to: userEmail,\n        from: {\n          email: this.fromEmail,\n          name: 'FXBOT Team'\n        },\n        subject: 'Deposit Request Rejected - FXBOT',\n        html: this.generateDepositRejectionTemplate(depositData, userName)\n      };\n\n      const result = await sgMail.send(msg);\n      console.log('Deposit rejection email sent successfully to:', userEmail);\n      return { success: true, messageId: result[0].headers['x-message-id'] };\n    } catch (error) {\n      console.error('Error sending deposit rejection email:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  generateDepositNotificationTemplate(depositData, userData) {\n    return `\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <meta charset=\"utf-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <title>New Deposit Request</title>\n    </head>\n    <body style=\"font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 0; padding: 0; background-color: #f5f5f5;\">\n      <div style=\"max-width: 600px; margin: 0 auto; background-color: #ffffff;\">\n        <div style=\"background: linear-gradient(135deg, #f59e0b, #d97706); padding: 30px; text-align: center;\">\n          <h1 style=\"color: #ffffff; font-size: 28px; font-weight: bold; margin: 0;\">FXBOT</h1>\n          <p style=\"color: #ffffff; font-size: 16px; margin: 10px 0 0 0;\">Admin Notification</p>\n        </div>\n        \n        <div style=\"padding: 40px 30px;\">\n          <h2 style=\"color: #111827; font-size: 24px; font-weight: bold; margin-bottom: 20px;\">New Deposit Request</h2>\n          \n          <div style=\"background-color: #f9fafb; border-radius: 8px; padding: 20px; margin: 20px 0; border-left: 4px solid #f59e0b;\">\n            <h3 style=\"color: #f59e0b; margin: 0 0 15px 0;\">User Details</h3>\n            <p style=\"margin: 5px 0;\"><strong>Name:</strong> ${userData.firstName} ${userData.lastName}</p>\n            <p style=\"margin: 5px 0;\"><strong>Email:</strong> ${userData.email}</p>\n            <p style=\"margin: 5px 0;\"><strong>Sponsor ID:</strong> ${userData.ownSponsorId}</p>\n            <p style=\"margin: 5px 0;\"><strong>Mobile:</strong> ${userData.mobile}</p>\n          </div>\n\n          <div style=\"background-color: #f0f9ff; border-radius: 8px; padding: 20px; margin: 20px 0; border-left: 4px solid #3b82f6;\">\n            <h3 style=\"color: #3b82f6; margin: 0 0 15px 0;\">Deposit Details</h3>\n            <p style=\"margin: 5px 0;\"><strong>Amount:</strong> $${depositData.amount}</p>\n            <p style=\"margin: 5px 0;\"><strong>Payment Method:</strong> ${depositData.paymentMethod}</p>\n            <p style=\"margin: 5px 0;\"><strong>Wallet Type:</strong> ${depositData.walletType}</p>\n            <p style=\"margin: 5px 0;\"><strong>Submitted:</strong> ${new Date().toLocaleString()}</p>\n          </div>\n\n          <div style=\"background-color: #f0fdf4; border-radius: 8px; padding: 20px; margin: 20px 0; border-left: 4px solid #10b981;\">\n            <h3 style=\"color: #10b981; margin: 0 0 15px 0;\">Action Required</h3>\n            <p style=\"margin: 5px 0;\">Please review the payment screenshot and approve or reject this deposit request from the admin dashboard.</p>\n            <p style=\"margin: 5px 0;\"><strong>Status:</strong> Pending Review</p>\n          </div>\n\n          <div style=\"text-align: center; margin: 30px 0;\">\n            <p style=\"color: #6b7280; font-size: 14px;\">\n              Login to admin dashboard to review and process this deposit request.\n            </p>\n          </div>\n        </div>\n\n        <div style=\"background-color: #f9fafb; padding: 20px; text-align: center; border-top: 1px solid #e5e7eb;\">\n          <p style=\"color: #6b7280; font-size: 12px; margin: 0;\">\n            FXBOT - Professional Forex Investment Platform<br>\n            This is an automated system notification.\n          </p>\n        </div>\n      </div>\n    </body>\n    </html>\n    `;\n  }\n\n  generateDepositApprovalTemplate(depositData, userName) {\n    return `\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <meta charset=\"utf-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <title>Deposit Approved</title>\n    </head>\n    <body style=\"font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 0; padding: 0; background-color: #f5f5f5;\">\n      <div style=\"max-width: 600px; margin: 0 auto; background-color: #ffffff;\">\n        <div style=\"background: linear-gradient(135deg, #10b981, #059669); padding: 30px; text-align: center;\">\n          <h1 style=\"color: #ffffff; font-size: 28px; font-weight: bold; margin: 0;\">FXBOT</h1>\n          <p style=\"color: #ffffff; font-size: 16px; margin: 10px 0 0 0;\">Deposit Approved</p>\n        </div>\n        \n        <div style=\"padding: 40px 30px;\">\n          <h2 style=\"color: #111827; font-size: 24px; font-weight: bold; margin-bottom: 20px;\">Great News! Your Deposit is Approved</h2>\n          <p style=\"color: #6b7280; font-size: 16px; margin-bottom: 20px;\">Dear ${userName},</p>\n          \n          <div style=\"background-color: #f0fdf4; border-radius: 8px; padding: 20px; margin: 20px 0; border-left: 4px solid #10b981;\">\n            <h3 style=\"color: #10b981; margin: 0 0 15px 0;\">✓ Investment Activated</h3>\n            <p style=\"margin: 5px 0;\"><strong>Amount:</strong> $${depositData.amount}</p>\n            <p style=\"margin: 5px 0;\"><strong>Status:</strong> Approved & Active</p>\n            <p style=\"margin: 5px 0;\"><strong>Investment Package:</strong> FS Income (6% Monthly)</p>\n          </div>\n\n          <p style=\"color: #6b7280; font-size: 16px; line-height: 1.5;\">\n            Your deposit has been successfully verified and your investment is now active. You'll start earning FS Income \n            at 6% monthly, distributed daily over 22 weekdays at 11:59 PM IST.\n          </p>\n\n          <div style=\"text-align: center; margin: 30px 0;\">\n            <p style=\"color: #6b7280; font-size: 14px;\">\n              Check your dashboard to monitor your investment performance and earnings.\n            </p>\n          </div>\n        </div>\n\n        <div style=\"background-color: #f9fafb; padding: 20px; text-align: center; border-top: 1px solid #e5e7eb;\">\n          <p style=\"color: #6b7280; font-size: 12px; margin: 0;\">\n            FXBOT - Professional Forex Investment Platform<br>\n            Thank you for trusting us with your investment.\n          </p>\n        </div>\n      </div>\n    </body>\n    </html>\n    `;\n  }\n\n  generateDepositRejectionTemplate(depositData, userName) {\n    return `\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <meta charset=\"utf-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <title>Deposit Rejected</title>\n    </head>\n    <body style=\"font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 0; padding: 0; background-color: #f5f5f5;\">\n      <div style=\"max-width: 600px; margin: 0 auto; background-color: #ffffff;\">\n        <div style=\"background: linear-gradient(135deg, #ef4444, #dc2626); padding: 30px; text-align: center;\">\n          <h1 style=\"color: #ffffff; font-size: 28px; font-weight: bold; margin: 0;\">FXBOT</h1>\n          <p style=\"color: #ffffff; font-size: 16px; margin: 10px 0 0 0;\">Deposit Update</p>\n        </div>\n        \n        <div style=\"padding: 40px 30px;\">\n          <h2 style=\"color: #111827; font-size: 24px; font-weight: bold; margin-bottom: 20px;\">Deposit Request Not Approved</h2>\n          <p style=\"color: #6b7280; font-size: 16px; margin-bottom: 20px;\">Dear ${userName},</p>\n          \n          <div style=\"background-color: #fef2f2; border-radius: 8px; padding: 20px; margin: 20px 0; border-left: 4px solid #ef4444;\">\n            <h3 style=\"color: #ef4444; margin: 0 0 15px 0;\">Deposit Details</h3>\n            <p style=\"margin: 5px 0;\"><strong>Amount:</strong> $${depositData.amount}</p>\n            <p style=\"margin: 5px 0;\"><strong>Status:</strong> Not Approved</p>\n            ${depositData.adminNotes ? `<p style=\"margin: 10px 0 5px 0;\"><strong>Reason:</strong> ${depositData.adminNotes}</p>` : ''}\n          </div>\n\n          <p style=\"color: #6b7280; font-size: 16px; line-height: 1.5;\">\n            Unfortunately, we were unable to verify your payment. This could be due to unclear payment screenshot, \n            incorrect payment amount, or other verification issues.\n          </p>\n\n          <p style=\"color: #6b7280; font-size: 16px; line-height: 1.5;\">\n            Please contact our support team or resubmit your deposit request with a clear payment screenshot.\n          </p>\n\n          <div style=\"text-align: center; margin: 30px 0;\">\n            <p style=\"color: #6b7280; font-size: 14px;\">\n              Contact support: support@fxbot.co.in\n            </p>\n          </div>\n        </div>\n\n        <div style=\"background-color: #f9fafb; padding: 20px; text-align: center; border-top: 1px solid #e5e7eb;\">\n          <p style=\"color: #6b7280; font-size: 12px; margin: 0;\">\n            FXBOT - Professional Forex Investment Platform<br>\n            We're here to help with any questions.\n          </p>\n        </div>\n      </div>\n    </body>\n    </html>\n    `;\n  }\n\n  // Generic email sending method\n  async sendEmail(to, subject, htmlContent) {\n    try {\n      const msg = {\n        to: to,\n        from: {\n          email: this.fromEmail,\n          name: 'FXBOT Team'\n        },\n        subject: subject,\n        html: htmlContent\n      };\n\n      const result = await sgMail.send(msg);\n      console.log('Email sent successfully to:', to);\n      return { success: true, messageId: result[0].headers['x-message-id'] };\n    } catch (error) {\n      console.error('Error sending email:', error);\n      return { success: false, error: error.message };\n    }\n  }\n}\n\nexport { EmailService };\nexport default EmailService;\nexport const emailService = new EmailService();","size_bytes":24167},"server/objectStorage.js":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { randomUUID } from \"crypto\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// Object storage client for Replit\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Get private object directory for uploads\n  getPrivateObjectDir() {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Object storage not configured.\"\n      );\n    }\n    return dir;\n  }\n\n  // Generate upload URL for deposit screenshots\n  async getDepositScreenshotUploadURL() {\n    const privateObjectDir = this.getPrivateObjectDir();\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/deposits/${objectId}`;\n\n    const { bucketName, objectName } = this.parseObjectPath(fullPath);\n\n    return this.signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900, // 15 minutes\n    });\n  }\n\n  // Get deposit screenshot file from object path\n  async getDepositScreenshotFile(objectPath) {\n    if (!objectPath.startsWith(\"/deposits/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    // Construct the full object path: private directory + object path\n    let privateDir = this.getPrivateObjectDir();\n    if (!privateDir.endsWith(\"/\")) {\n      privateDir = `${privateDir}/`;\n    }\n    \n    // Remove leading slash from objectPath before concatenating\n    const cleanObjectPath = objectPath.startsWith(\"/\") ? objectPath.slice(1) : objectPath;\n    const fullObjectPath = `${privateDir}${cleanObjectPath}`;\n    \n    console.log('Debug - Object path:', objectPath);\n    console.log('Debug - Private dir:', privateDir);\n    console.log('Debug - Full object path:', fullObjectPath);\n    \n    const { bucketName, objectName } = this.parseObjectPath(fullObjectPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    \n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      console.log('Debug - File does not exist:', objectName, 'in bucket:', bucketName);\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  // Download object file to response\n  async downloadObject(file, res, cacheTtlSec = 3600) {\n    try {\n      const [metadata] = await file.getMetadata();\n      \n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `private, max-age=${cacheTtlSec}`,\n      });\n\n      const stream = file.createReadStream();\n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  // Normalize deposit screenshot path from upload URL\n  normalizeDepositScreenshotPath(rawPath) {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n\n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n\n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n\n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n\n    // Extract the entity ID from the path\n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/${entityId}`;\n  }\n\n  // Parse object path helper\n  parseObjectPath(path) {\n    if (!path.startsWith(\"/\")) {\n      path = `/${path}`;\n    }\n    const pathParts = path.split(\"/\");\n    if (pathParts.length < 3) {\n      throw new Error(\"Invalid path: must contain at least a bucket name\");\n    }\n\n    const bucketName = pathParts[1];\n    const objectName = pathParts.slice(2).join(\"/\");\n\n    return {\n      bucketName,\n      objectName,\n    };\n  }\n\n  // Sign object URL for upload/download\n  async signObjectURL({ bucketName, objectName, method, ttlSec }) {\n    const request = {\n      bucket_name: bucketName,\n      object_name: objectName,\n      method,\n      expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n    };\n    \n    const response = await fetch(\n      `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(request),\n      }\n    );\n    \n    if (!response.ok) {\n      throw new Error(\n        `Failed to sign object URL, errorcode: ${response.status}, ` +\n          `make sure you're running on Replit`\n      );\n    }\n\n    const { signed_url: signedURL } = await response.json();\n    return signedURL;\n  }\n}","size_bytes":5578},"client/src/components/ObjectUploader.jsx":{"content":"import { useState } from 'react';\nimport { Upload, CheckCircle, AlertCircle } from 'lucide-react';\n\nexport function ObjectUploader({\n  maxNumberOfFiles = 1,\n  maxFileSize = 10485760, // 10MB default\n  onGetUploadParameters,\n  onComplete,\n  buttonClassName,\n  children,\n  acceptedFileTypes = \"image/*\"\n}) {\n  const [isUploading, setIsUploading] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [error, setError] = useState(null);\n  const [uploadedFile, setUploadedFile] = useState(null);\n\n  const handleFileSelect = async (event) => {\n    const file = event.target.files[0];\n    if (!file) return;\n\n    // Validate file size\n    if (file.size > maxFileSize) {\n      setError(`File size must be less than ${(maxFileSize / 1024 / 1024).toFixed(1)}MB`);\n      return;\n    }\n\n    // Validate file type\n    if (acceptedFileTypes !== \"*\" && !file.type.match(acceptedFileTypes)) {\n      setError('Please select a valid image file (JPG, PNG, GIF)');\n      return;\n    }\n\n    setError(null);\n    setIsUploading(true);\n    setUploadProgress(0);\n\n    try {\n      // Get upload parameters from parent component\n      const { url } = await onGetUploadParameters();\n\n      // Upload file to object storage\n      const xhr = new XMLHttpRequest();\n      \n      xhr.upload.addEventListener('progress', (e) => {\n        if (e.lengthComputable) {\n          const progress = (e.loaded / e.total) * 100;\n          setUploadProgress(progress);\n        }\n      });\n\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === 4) {\n          setIsUploading(false);\n          if (xhr.status === 200) {\n            setUploadedFile(file);\n            setUploadProgress(100);\n            \n            // Call completion callback with upload URL\n            if (onComplete) {\n              onComplete({\n                successful: [{\n                  uploadURL: url,\n                  name: file.name,\n                  size: file.size\n                }]\n              });\n            }\n          } else {\n            setError('Upload failed. Please try again.');\n            setUploadProgress(0);\n          }\n        }\n      };\n\n      xhr.open('PUT', url);\n      xhr.setRequestHeader('Content-Type', file.type);\n      xhr.send(file);\n\n    } catch (uploadError) {\n      console.error('Upload error:', uploadError);\n      setError('Upload failed. Please try again.');\n      setIsUploading(false);\n      setUploadProgress(0);\n    }\n  };\n\n  const resetUploader = () => {\n    setUploadedFile(null);\n    setError(null);\n    setUploadProgress(0);\n    setIsUploading(false);\n    // Reset file input\n    const fileInput = document.getElementById('file-upload-input');\n    if (fileInput) {\n      fileInput.value = '';\n    }\n  };\n\n  return (\n    <div style={{ width: '100%' }}>\n      <input\n        type=\"file\"\n        id=\"file-upload-input\"\n        accept={acceptedFileTypes}\n        onChange={handleFileSelect}\n        style={{ display: 'none' }}\n        disabled={isUploading || uploadedFile}\n      />\n      \n      <button\n        type=\"button\"\n        onClick={() => {\n          if (uploadedFile) {\n            resetUploader();\n          } else {\n            document.getElementById('file-upload-input').click();\n          }\n        }}\n        disabled={isUploading}\n        className={buttonClassName}\n        style={{\n          width: '100%',\n          padding: '12px',\n          border: `2px dashed ${error ? '#ef4444' : uploadedFile ? '#10b981' : '#d1d5db'}`,\n          borderRadius: '8px',\n          backgroundColor: error ? '#fef2f2' : uploadedFile ? '#f0fdf4' : '#f9fafb',\n          color: error ? '#ef4444' : uploadedFile ? '#10b981' : '#6b7280',\n          cursor: isUploading ? 'not-allowed' : 'pointer',\n          transition: 'all 0.2s ease',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          gap: '8px',\n          fontSize: '14px',\n          fontWeight: '500',\n          ...(!children && { minHeight: '120px', flexDirection: 'column' })\n        }}\n        data-testid=\"button-upload-screenshot\"\n      >\n        {children || (\n          <>\n            {isUploading ? (\n              <>\n                <div style={{\n                  width: '20px',\n                  height: '20px',\n                  border: '2px solid #e5e7eb',\n                  borderTop: '2px solid #3b82f6',\n                  borderRadius: '50%',\n                  animation: 'spin 1s linear infinite'\n                }} />\n                <span>Uploading... {Math.round(uploadProgress)}%</span>\n              </>\n            ) : uploadedFile ? (\n              <>\n                <CheckCircle size={20} />\n                <div style={{ textAlign: 'center' }}>\n                  <div>{uploadedFile.name}</div>\n                  <div style={{ fontSize: '12px', opacity: 0.7 }}>\n                    {(uploadedFile.size / 1024 / 1024).toFixed(2)} MB - Click to change\n                  </div>\n                </div>\n              </>\n            ) : (\n              <>\n                <Upload size={24} />\n                <div style={{ textAlign: 'center' }}>\n                  <div>Upload Payment Screenshot</div>\n                  <div style={{ fontSize: '12px', opacity: 0.7 }}>\n                    Click to select file (Max {(maxFileSize / 1024 / 1024).toFixed(1)}MB)\n                  </div>\n                </div>\n              </>\n            )}\n          </>\n        )}\n      </button>\n\n      {error && (\n        <div style={{\n          marginTop: '8px',\n          padding: '8px 12px',\n          backgroundColor: '#fef2f2',\n          border: '1px solid #fecaca',\n          borderRadius: '6px',\n          color: '#ef4444',\n          fontSize: '14px',\n          display: 'flex',\n          alignItems: 'center',\n          gap: '8px'\n        }}>\n          <AlertCircle size={16} />\n          {error}\n        </div>\n      )}\n\n      {isUploading && (\n        <div style={{\n          marginTop: '8px',\n          backgroundColor: '#f3f4f6',\n          borderRadius: '6px',\n          overflow: 'hidden'\n        }}>\n          <div style={{\n            height: '4px',\n            backgroundColor: '#3b82f6',\n            width: `${uploadProgress}%`,\n            transition: 'width 0.3s ease'\n          }} />\n        </div>\n      )}\n\n      <style jsx>{`\n        @keyframes spin {\n          0% { transform: rotate(0deg); }\n          100% { transform: rotate(360deg); }\n        }\n      `}</style>\n    </div>\n  );\n}","size_bytes":6451}}}