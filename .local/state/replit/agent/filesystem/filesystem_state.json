{"file_contents":{"README.md":{"content":"# FXBOT - Professional Forex Investment Platform\n\nA modern, fully responsive React application for a forex investment platform featuring investment packages, ROI calculators, and professional design.\n\n## 🚀 Features\n\n- **Responsive Design** - Fully responsive across all devices\n- **Professional Theme** - Dark theme with gold/blue colors matching the FXBOT brand\n- **Investment Packages** - Display of various investment plans and returns\n- **ROI Calculator** - Interactive calculator for investment returns\n- **Affiliate Income Calculator** - Calculate potential affiliate earnings\n- **Contact Forms** - Professional contact and newsletter signup forms\n- **FAQ Section** - Comprehensive frequently asked questions\n- **Legal Pages** - Terms of service and privacy policy\n\n## 🛠 Technology Stack\n\n- **Frontend**: React 18, JavaScript (ES6+), Vite\n- **Backend**: Node.js, Express.js\n- **Styling**: Tailwind CSS with custom design system\n- **Icons**: Lucide React\n- **Routing**: Wouter\n- **State Management**: TanStack Query (React Query)\n- **Forms**: React Hook Form with Zod validation\n\n## 📁 Project Structure\n\n```\n├── client/\n│   ├── src/\n│   │   ├── components/     # React components\n│   │   ├── pages/         # Page components\n│   │   ├── hooks/         # Custom React hooks\n│   │   ├── lib/          # Utility functions\n│   │   ├── App.jsx       # Main app component\n│   │   └── main.jsx      # App entry point\n│   └── index.html        # HTML template\n├── server/\n│   ├── index.js          # Express server\n│   ├── routes.js         # API routes\n│   ├── storage.js        # Data storage layer\n│   └── vite.js          # Vite development server\n├── shared/\n│   └── schema.js         # Shared validation schemas\n├── attached_assets/      # Logo and asset files\n├── vite.config.js        # Vite configuration\n├── tailwind.config.js    # Tailwind CSS configuration\n└── start.js             # JavaScript server startup script\n```\n\n## 🚀 Getting Started\n\n### Prerequisites\n\n- Node.js (v18 or higher)\n- npm or yarn\n\n### Installation\n\n1. Clone the repository:\n```bash\ngit clone <repository-url>\ncd fxbot\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Start the development server:\n```bash\nnpm run dev\n```\n\nOr manually start the JavaScript server:\n```bash\nnode start.js\n```\n\nThe application will be available at `http://localhost:5000`\n\n### Production Build\n\n1. Build the application:\n```bash\nnpm run build\n```\n\n2. Start the production server:\n```bash\nnpm start\n```\n\n## 🎨 Design System\n\nThe application uses a custom design system with:\n- **Primary Colors**: Gold (#F59E0B) and Blue (#3B82F6)\n- **Typography**: Inter font family\n- **Dark Theme**: Professional dark background with golden accents\n- **Components**: Custom UI components built with Tailwind CSS\n\n## 📱 Responsive Features\n\n- Mobile-first design approach\n- Touch-friendly navigation\n- Responsive grid layouts\n- Optimized images and assets\n- Progressive enhancement\n\n## 🔧 Development\n\n### Available Scripts\n\n- `npm run dev` - Start development server (currently uses TypeScript, use `node start.js` for JavaScript)\n- `npm run build` - Build for production\n- `npm start` - Start production server\n- `node start.js` - Start JavaScript development server\n\n### Project Conversion\n\nThis project has been converted from TypeScript to pure JavaScript:\n- All `.ts` and `.tsx` files have been removed\n- JavaScript equivalents created for all components\n- Server runs on pure Node.js without TypeScript compilation\n- Maintained all functionality and features\n\n## 🌐 Deployment\n\nThe project is ready for deployment on any Node.js hosting platform:\n\n1. **Replit**: Ready to deploy using Replit's deployment system\n2. **Vercel**: Configure build commands in `vercel.json`\n3. **Netlify**: Set up build and start commands\n4. **Heroku**: Add `Procfile` with `web: node server/index.js`\n\n## 📄 License\n\nThis project is licensed under the MIT License.\n\n## 🤝 Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Commit your changes\n4. Push to the branch\n5. Create a Pull Request\n\n## 📞 Support\n\nFor support and questions, please use the contact form on the website or reach out through the provided channels.","size_bytes":4358},"postcss.config.js":{"content":"export default {\n  plugins: {\n    '@tailwindcss/postcss': {},\n    autoprefixer: {},\n  },\n}","size_bytes":90},"replit.md":{"content":"# FXBOT - Professional Forex Investment Platform\n\n## Overview\n\nFXBOT is a modern full-stack web application for a Forex investment platform. The system provides a professional interface for users to view investment packages, track returns, and engage with Forex investment services. Built with React/JavaScript on the frontend and Express.js on the backend, it offers a comprehensive solution for Forex investment management with real-time data capabilities. \n\n## Recent Changes\n\n- ✅ **Complete TypeScript to JavaScript conversion** - All components and server files converted\n- ✅ **Complete Tailwind CSS to regular CSS conversion** - All styling converted to custom CSS classes\n- ✅ **Fixed server configuration** - Application now properly runs on port 5000\n- ✅ **Git-ready project structure** - Project prepared for version control and deployment\n- ✅ **Backend foundation** - Storage interface and API routes ready for database integration\n- ✅ **Registration system with referral structure** - Users get unique sponsor IDs and parent-child relationships\n- ✅ **User dashboard** - Shows own sponsor ID, referral count, and referred users list\n- ✅ **MongoDB Atlas integration** - Live database with user authentication and referral tracking\n- ✅ **Multi-level referral tracking** - 5-tier system with parent-child relationships up to 5 levels deep\n- ✅ **Reward distribution system** - Automated percentage-based rewards (1.5%, 1.0%, 0.75%, 0.50%, 0.25%)\n- ✅ **Enhanced dashboard UI** - Modern card-based interface showing multi-level stats and earnings\n- ✅ **Investment simulation** - Testing tool for reward distribution validation\n- ✅ **Sidebar navigation system** - Dark modern sidebar matching screenshot design with Profile, Fund, Referral Tree, Deposit, Withdrawal, Logout options\n- ✅ **Fixed sponsor ID copy functionality** - Resolved \"undefined\" issue when copying sponsor ID\n- ✅ **Complete sidebar pages** - All navigation pages (Profile, Fund, ReferralTree, Deposit, Withdrawal) implemented with proper layouts\n- ✅ **Dashboard redesign to match reference** - Created clean dashboard layout exactly matching the reference screenshot with correct FXBOT branding\n- ✅ **Fixed branding throughout application** - Corrected from \"FCX Trade\" to \"FXBOT\" in all components and pages\n- ✅ **Modern dashboard with Tailwind CSS** - Implemented complete redesign with professional sidebar, gradient cards, and perfect alignment\n- ✅ **Enhanced UI features** - Added gradient backgrounds, hover animations, glassmorphism effects, professional SVG icons, and interactive elements\n- ✅ **Investment simulation and commission calculator** - Real-time calculations for referral earnings across 5-tier system\n- ✅ **Professional trading accounts table** - Enhanced with gradient headers, animated status indicators, and comprehensive account information\n- ✅ **Complete admin dashboard system** - Full 6-tab navigation with User List, KYC Status, Deposit Requests, Withdrawal Requests, Investments, and Engagement\n- ✅ **Admin authentication fixed** - Proper `isAdmin` field recognition and routing from login to admin dashboard\n- ✅ **Engagement analytics tab** - User search by email/mobile with complete history display including FS Income, Smart Line Income, DRI Income, DAS status and investment volume\n- ✅ **Email integration system** - SendGrid-powered welcome email service with professional HTML templates, automatic sending on registration, and admin testing interface\n- ✅ **Password reset system** - Complete forgot/reset password functionality with secure token generation, email notifications, and comprehensive frontend pages\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\nPreferred language: JavaScript/JSX (not TypeScript) - all components and server files converted to JavaScript.\nPreferred styling: Regular CSS (not Tailwind CSS) - all components converted to use custom CSS classes and inline styles.\nDeveloper level: Beginner - needs detailed step-by-step instructions for local setup and Git workflow.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with JavaScript (ES6+) and Vite for fast development and hot module replacement\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **UI Framework**: Custom components with regular CSS classes and inline styles\n- **Styling**: Regular CSS with custom CSS variables for theming, responsive design, and Inter font\n- **Form Handling**: React Hook Form with Zod validation for forms and API requests\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: JavaScript with ES modules (converted from TypeScript)\n- **Build System**: ESBuild for production bundling, Node.js for development\n- **Development Server**: Custom Vite integration with middleware mode for SSR-style development\n- **Storage Interface**: Abstracted storage layer with in-memory implementation, designed for easy database integration\n- **Error Handling**: Centralized error middleware with proper HTTP status codes\n\n### Data Layer\n- **Storage**: In-memory storage implementation for development (ready for database integration)\n- **Schema Management**: Centralized schema definitions in shared directory with Zod validation\n- **Data Validation**: Zod schemas for runtime validation and API request/response handling\n- **API Design**: RESTful API endpoints for contact forms, newsletter, and investment data\n\n### Authentication & Security\n- **Session Management**: Connect-pg-simple for PostgreSQL session storage\n- **CORS**: Configured for cross-origin requests with credentials support\n- **Environment Variables**: Secure configuration management for database URLs and API keys\n\n### Development Environment\n- **Replit Integration**: Custom Vite plugin for Replit-specific development features\n- **Hot Reload**: Full-stack hot reloading with Vite middleware integration\n- **JavaScript**: ES6+ modules with path aliases for clean imports\n- **Code Organization**: Monorepo structure with shared schemas and utilities\n- **Git Ready**: All TypeScript files removed, project ready for Git deployment\n\n## External Dependencies\n\n### Database & Storage\n- **Neon Database**: PostgreSQL-compatible serverless database with @neondatabase/serverless driver\n- **Connect-pg-Simple**: PostgreSQL session store for Express sessions\n\n### UI & Styling\n- **Custom CSS**: Regular CSS classes with CSS variables for consistent theming\n- **Lucide React**: Modern icon library for React components\n- **Responsive Design**: Mobile-first approach with media queries\n- **CSS Grid & Flexbox**: Modern layout techniques for responsive design\n\n### Development Tools\n- **Vite**: Next-generation frontend build tool with plugin ecosystem\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **Drizzle Kit**: Database migration and introspection toolkit\n\n### Data & Forms\n- **TanStack Query**: Server state management with caching and synchronization\n- **React Hook Form**: Performant forms with minimal re-renders\n- **Zod**: TypeScript-first schema validation library\n- **Date-fns**: Modern JavaScript date utility library\n\n### Utilities\n- **Class Variance Authority**: Utility for creating variant-based component APIs\n- **CLSX**: Conditional className utility for dynamic styling\n- **Nanoid**: Secure URL-friendly unique string ID generator","size_bytes":7490},"start.js":{"content":"#!/usr/bin/env node\n\n// Simple JavaScript start script\nprocess.env.NODE_ENV = process.env.NODE_ENV || 'development';\n\n// Start the server\nimport('./server/index.js');","size_bytes":166},"tailwind.config.js":{"content":"/** @type {import('tailwindcss').Config} */\nexport default {\n  content: [\n    \"./client/index.html\",\n    \"./client/src/**/*.{js,ts,jsx,tsx}\",\n  ],\n  theme: {\n    extend: {\n      fontFamily: {\n        sans: ['Inter', 'system-ui', 'sans-serif'],\n      },\n      colors: {\n        primary: {\n          50: '#eff6ff',\n          500: '#3b82f6',\n          600: '#2563eb',\n          700: '#1d4ed8',\n        }\n      }\n    },\n  },\n  plugins: [],\n}","size_bytes":437},"vite.config.js":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n  assetsInclude: [\"**/*.PNG\", \"**/*.jpg\", \"**/*.jpeg\", \"**/*.gif\", \"**/*.svg\"]\n});","size_bytes":815},"server/index.js":{"content":"import express from \"express\";\nimport { registerRoutes } from \"./routes.js\";\nimport { setupVite, serveStatic, log } from \"./vite.js\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err, _req, res, _next) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();","size_bytes":1958},"server/routes.js":{"content":"import { createServer } from \"http\";\nimport { z } from \"zod\";\nimport { getStorage } from \"./storage.js\";\nimport { generateToken, authenticateToken, requireAdmin } from \"./auth.js\";\nimport { DasService } from \"./dasService.js\";\n\n// User registration validation schema\nconst userRegistrationSchema = z.object({\n  sponsorId: z.string().min(1, \"Sponsor ID is required\"),\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  mobile: z.string().min(10, \"Valid mobile number is required\"),\n  email: z.string().email(\"Valid email is required\"),\n  password: z.string().min(8, \"Password must be at least 8 characters\")\n});\n\nexport async function registerRoutes(app) {\n  const storage = getStorage();\n  const server = createServer(app);\n\n  // API Routes\n  app.get(\"/api/health\", (req, res) => {\n    res.json({ status: \"ok\", message: \"FXBOT API is running\" });\n  });\n\n  // Investment packages endpoint\n  app.get(\"/api/packages\", async (req, res) => {\n    try {\n      const packages = [\n        {\n          id: 1,\n          name: \"FS Income (FixSix)\",\n          type: \"fixed\",\n          return: \"6% Monthly until 2x\",\n          minimum: 250,\n          duration: \"~17 months\"\n        },\n        {\n          id: 2,\n          name: \"SmartLine Income\",\n          type: \"affiliate\",\n          levels: 5,\n          commission: \"1.5% to 0.25%\"\n        },\n        {\n          id: 3,\n          name: \"DRI Income\",\n          type: \"direct\",\n          commission: \"6%\",\n          frequency: \"Per Investment\"\n        },\n        {\n          id: 4,\n          name: \"DAS Income\",\n          type: \"salary\",\n          tiers: 3,\n          rewards: \"$300 to 2% CTO\"\n        }\n      ];\n      res.json(packages);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch packages\" });\n    }\n  });\n\n  // Contact form endpoint\n  app.post(\"/api/contact\", async (req, res) => {\n    try {\n      const { firstName, lastName, email, subject, message } = req.body;\n      \n      if (!firstName || !lastName || !email || !message) {\n        return res.status(400).json({ error: \"All fields are required\" });\n      }\n\n      // In a real application, you would save this to a database\n      console.log(\"Contact form submission:\", { firstName, lastName, email, subject, message });\n      \n      res.json({ success: true, message: \"Thank you for your message! We will get back to you soon.\" });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to send message\" });\n    }\n  });\n\n  // Newsletter subscription endpoint\n  app.post(\"/api/newsletter\", async (req, res) => {\n    try {\n      const { email } = req.body;\n      \n      if (!email) {\n        return res.status(400).json({ error: \"Email is required\" });\n      }\n\n      await storage.createSubscriber(email);\n      \n      res.json({ success: true, message: \"Successfully subscribed to newsletter!\" });\n    } catch (error) {\n      if (error.code === 11000) {\n        res.status(400).json({ error: \"Email already subscribed\" });\n      } else {\n        res.status(500).json({ error: \"Failed to subscribe\" });\n      }\n    }\n  });\n\n  // Authentication endpoints\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const result = userRegistrationSchema.safeParse(req.body);\n      if (!result.success) {\n        const errorMessage = result.error.errors?.[0]?.message || 'Validation failed';\n        return res.status(400).json({ error: errorMessage });\n      }\n\n      const { sponsorId, firstName, lastName, mobile, email, password } = result.data;\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ error: \"User with this email already exists\" });\n      }\n\n      // Validate sponsor ID format (FX + 6 digits)\n      const sponsorIdPattern = /^FX\\d{6}$/;\n      if (!sponsorIdPattern.test(sponsorId)) {\n        return res.status(400).json({ error: \"Sponsor ID must be in format FX123456 (FX followed by 6 digits)\" });\n      }\n\n      // Verify sponsor ID exists in the system\n      const sponsor = await storage.findSponsor(sponsorId);\n      if (!sponsor) {\n        return res.status(400).json({ error: \"Invalid sponsor ID. Please check the sponsor ID and try again.\" });\n      }\n\n      // Create new user\n      const userData = {\n        sponsorId,\n        firstName,\n        lastName,\n        mobile,\n        email,\n        password,\n        role: 'user'\n      };\n\n      const newUser = await storage.createUser(userData);\n      \n      // Send welcome email\n      try {\n        const { emailService } = await import('./emailService.js');\n        await emailService.sendWelcomeEmail(newUser.email, {\n          firstName: newUser.firstName,\n          lastName: newUser.lastName,\n          email: newUser.email,\n          mobile: newUser.mobile,\n          ownSponsorId: newUser.ownSponsorId,\n          sponsorId: sponsorId\n        });\n        console.log('Welcome email sent to:', newUser.email);\n      } catch (emailError) {\n        console.error('Failed to send welcome email:', emailError);\n        // Don't fail registration if email fails\n      }\n      \n      res.status(201).json({ \n        success: true, \n        message: \"Account created successfully! Please check your email for welcome message and login to continue.\",\n        user: newUser\n      });\n    } catch (error) {\n      console.error('Registration error:', error);\n      if (error.code === 11000) {\n        if (error.message.includes('email')) {\n          res.status(400).json({ error: \"Email already exists\" });\n        } else {\n          res.status(400).json({ error: \"Registration failed - duplicate entry\" });\n        }\n      } else {\n        res.status(500).json({ error: \"Registration failed\" });\n      }\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = req.body;\n      \n      // Basic validation\n      if (!email || !password) {\n        return res.status(400).json({ error: \"Email and password are required\" });\n      }\n      const user = await storage.getUserByEmail(email);\n      \n      if (!user) {\n        return res.status(401).json({ error: \"Invalid email or password\" });\n      }\n\n      const isValidPassword = await storage.verifyPassword(password, user.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ error: \"Invalid email or password\" });\n      }\n\n      if (!user.isActive) {\n        return res.status(401).json({ error: \"Account is disabled\" });\n      }\n\n      const token = generateToken(user._id);\n      const { password: _, ...userWithoutPassword } = user.toObject();\n      \n      res.json({ \n        success: true, \n        token, \n        user: userWithoutPassword,\n        message: \"Login successful\" \n      });\n    } catch (error) {\n      console.error('Login error:', error);\n      res.status(500).json({ error: \"Login failed\" });\n    }\n  });\n\n  // Get current user\n  app.get(\"/api/auth/me\", authenticateToken, async (req, res) => {\n    try {\n      const user = await storage.getUserById(req.userId);\n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to get user data\" });\n    }\n  });\n\n  // Get user referral information\n  app.get(\"/api/user/referrals\", authenticateToken, async (req, res) => {\n    try {\n      const user = await storage.getUserById(req.userId);\n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n\n      // Get children (referred users)\n      const children = await storage.getUserReferrals(req.userId);\n      \n      // Get detailed referral statistics\n      const { referralService } = await import('./referralService.js');\n      const referralStats = await referralService.getReferralStats(req.userId);\n      \n      res.json({\n        ownSponsorId: user.ownSponsorId,\n        referralCount: user.referralCount || 0,\n        children: children.map(child => ({\n          id: child._id,\n          name: `${child.firstName} ${child.lastName}`,\n          email: child.email,\n          registeredAt: child.createdAt\n        })),\n        stats: referralStats\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to get referral information\" });\n    }\n  });\n\n  // Get referral tree\n  app.get(\"/api/user/referral-tree\", authenticateToken, async (req, res) => {\n    try {\n      const { referralService } = await import('./referralService.js');\n      const tree = await referralService.getReferralTree(req.userId);\n      res.json(tree);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to get referral tree\" });\n    }\n  });\n\n  // Simulate investment for testing rewards (remove in production)\n  app.post(\"/api/user/simulate-investment\", authenticateToken, async (req, res) => {\n    try {\n      const { amount } = req.body;\n      if (!amount || amount <= 0) {\n        return res.status(400).json({ error: \"Invalid investment amount\" });\n      }\n\n      const { referralService } = await import('./referralService.js');\n      const rewards = await referralService.distributeRewards(req.userId, amount);\n      \n      res.json({\n        message: \"Investment processed and rewards distributed\",\n        amount: amount,\n        rewards: rewards\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to process investment\" });\n    }\n  });\n\n\n\n  // Deposit endpoint\n  app.post(\"/api/deposit\", authenticateToken, async (req, res) => {\n    try {\n      const { amount, walletType, walletAddress } = req.body;\n      const userId = req.userId;\n\n      // Basic validation\n      if (!amount || amount < 250 || amount % 250 !== 0) {\n        return res.status(400).json({ error: \"Invalid deposit amount. Minimum $250 in multiples of $250.\" });\n      }\n\n      // Create deposit record\n      const depositData = {\n        userId,\n        amount: parseInt(amount),\n        walletType,\n        walletAddress,\n        status: 'pending',\n        createdAt: new Date(),\n        paymentMethod: 'USDT TRC-20'\n      };\n\n      // Store deposit request\n      await storage.createDeposit(depositData);\n      \n      res.json({\n        success: true,\n        message: \"Deposit request submitted successfully. Admin will review and confirm your transaction.\",\n        depositData\n      });\n    } catch (error) {\n      console.error(\"Deposit error:\", error);\n      res.status(500).json({ error: \"Failed to submit deposit request\" });\n    }\n  });\n\n  // Admin endpoints\n  app.get(\"/api/admin/users\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const users = await storage.getUsers();\n      res.json(users);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to get users\" });\n    }\n  });\n\n  app.get(\"/api/admin/deposits\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const deposits = await storage.getAllDeposits();\n      res.json(deposits);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to get deposits\" });\n    }\n  });\n\n  app.post(\"/api/admin/deposits/:id/approve\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const deposit = await storage.updateDepositStatus(req.params.id, 'confirmed');\n      res.json({ success: true, deposit });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to approve deposit\" });\n    }\n  });\n\n  app.post(\"/api/admin/deposits/:id/reject\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const deposit = await storage.updateDepositStatus(req.params.id, 'rejected');\n      res.json({ success: true, deposit });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to reject deposit\" });\n    }\n  });\n\n  app.get(\"/api/admin/user-history/:searchTerm\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const { searchTerm } = req.params;\n      \n      // Search by email or mobile number\n      let user = await storage.getUserByEmail(searchTerm);\n      if (!user) {\n        user = await storage.getUserByMobile(searchTerm);\n      }\n      \n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n\n      // Add mock income data for now (to be replaced with real data later)\n      const userHistory = {\n        ...user.toObject(),\n        fsIncome: 0, // Will be calculated from actual FS income system\n        smartLineIncome: 0, // Will be calculated from smart line system\n        driIncome: 0 // Will be calculated from DRI system\n      };\n\n      res.json(userHistory);\n    } catch (error) {\n      console.error('Error fetching user history:', error);\n      res.status(500).json({ error: \"Failed to fetch user history\" });\n    }\n  });\n\n  app.get(\"/api/admin/contacts\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const contacts = await storage.getContacts();\n      res.json(contacts);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to get contacts\" });\n    }\n  });\n\n  app.get(\"/api/admin/subscribers\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const subscribers = await storage.getSubscribers();\n      res.json(subscribers);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to get subscribers\" });\n    }\n  });\n\n  // Email testing endpoint for admin\n  app.post(\"/api/admin/test-email\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const { email } = req.body;\n      \n      if (!email) {\n        return res.status(400).json({ error: \"Email address is required\" });\n      }\n\n      const { emailService } = await import('./emailService.js');\n      const result = await emailService.sendTestEmail(email);\n      \n      if (result.success) {\n        res.json({ \n          success: true, \n          message: \"Test email sent successfully\",\n          messageId: result.messageId \n        });\n      } else {\n        res.status(500).json({ \n          success: false, \n          error: \"Failed to send test email: \" + result.error \n        });\n      }\n    } catch (error) {\n      console.error('Email test error:', error);\n      res.status(500).json({ error: \"Email test failed\" });\n    }\n  });\n\n  // Password Reset Routes\n  app.post(\"/api/auth/forgot-password\", async (req, res) => {\n    try {\n      const { email } = req.body;\n      \n      if (!email) {\n        return res.status(400).json({ error: \"Email is required\" });\n      }\n\n      // Check if user exists\n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        // Don't reveal if user exists or not for security\n        return res.json({ \n          success: true, \n          message: \"If an account with that email exists, a password reset link has been sent.\" \n        });\n      }\n\n      // Generate reset token\n      const resetToken = await storage.generateResetToken();\n      \n      // Save token to user\n      await storage.setResetToken(email, resetToken);\n\n      // Send password reset email\n      try {\n        const { emailService } = await import('./emailService.js');\n        await emailService.sendPasswordResetEmail(\n          user.email, \n          resetToken, \n          `${user.firstName} ${user.lastName}`\n        );\n        console.log('Password reset email sent to:', user.email);\n      } catch (emailError) {\n        console.error('Failed to send password reset email:', emailError);\n        // Don't fail the request if email fails\n      }\n\n      res.json({ \n        success: true, \n        message: \"If an account with that email exists, a password reset link has been sent to your email address.\" \n      });\n    } catch (error) {\n      console.error('Forgot password error:', error);\n      res.status(500).json({ error: \"Password reset failed\" });\n    }\n  });\n\n  app.post(\"/api/auth/reset-password\", async (req, res) => {\n    try {\n      const { token, newPassword } = req.body;\n      \n      if (!token || !newPassword) {\n        return res.status(400).json({ error: \"Token and new password are required\" });\n      }\n\n      if (newPassword.length < 8) {\n        return res.status(400).json({ error: \"Password must be at least 8 characters long\" });\n      }\n\n      // Verify reset token\n      const user = await storage.getUserByResetToken(token);\n      if (!user) {\n        return res.status(400).json({ error: \"Invalid or expired reset token\" });\n      }\n\n      // Update password and clear reset token\n      await storage.updatePassword(user._id, newPassword);\n\n      res.json({ \n        success: true, \n        message: \"Password has been successfully reset. You can now login with your new password.\" \n      });\n    } catch (error) {\n      console.error('Reset password error:', error);\n      res.status(500).json({ error: \"Password reset failed\" });\n    }\n  });\n\n  // DAS Program API Routes\n  app.post(\"/api/das/enroll\", authenticateToken, async (req, res) => {\n    try {\n      const { userId } = req.body;\n      const result = await DasService.enrollUserInDas(userId);\n      \n      if (result) {\n        res.json({ success: true, message: \"Successfully enrolled in DAS program\" });\n      } else {\n        res.status(400).json({ error: \"Failed to enroll in DAS program\" });\n      }\n    } catch (error) {\n      console.error(\"DAS enrollment error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/das/countdown/:userId\", authenticateToken, async (req, res) => {\n    try {\n      const { userId } = req.params;\n      \n      // Check if the authenticated user is requesting their own data or is admin\n      if (req.userId !== userId && req.user?.role !== 'admin') {\n        return res.status(403).json({ error: \"Access denied\" });\n      }\n      \n      const countdownData = await DasService.getDasCountdown(userId);\n      res.json(countdownData);\n    } catch (error) {\n      console.error(\"DAS countdown error:\", error);\n      res.status(500).json({ error: \"Failed to fetch countdown data\" });\n    }\n  });\n\n  app.post(\"/api/das/complete-task\", authenticateToken, async (req, res) => {\n    try {\n      const { userId, taskNumber } = req.body;\n      const result = await DasService.updateTaskCompletion(userId, taskNumber);\n      \n      if (result) {\n        res.json({ success: true, message: `Task ${taskNumber} completed successfully` });\n      } else {\n        res.status(400).json({ error: \"Task requirements not met or already completed\" });\n      }\n    } catch (error) {\n      console.error(\"DAS task completion error:\", error);\n      res.status(500).json({ error: \"Failed to complete task\" });\n    }\n  });\n\n  app.post(\"/api/das/add-investment\", authenticateToken, async (req, res) => {\n    try {\n      const { userId, amount, packageType } = req.body;\n      const result = await DasService.addInvestment(userId, amount, packageType);\n      \n      if (result) {\n        res.json({ success: true, message: \"Investment added successfully\" });\n      } else {\n        res.status(400).json({ error: \"Failed to add investment\" });\n      }\n    } catch (error) {\n      console.error(\"DAS investment error:\", error);\n      res.status(500).json({ error: \"Failed to add investment\" });\n    }\n  });\n\n  return server;\n}","size_bytes":19252},"server/storage.js":{"content":"import connectDB, { User, Contact, Newsletter, Deposit } from './database.js';\nimport bcrypt from 'bcryptjs';\n\n// MongoDB Storage implementation\nclass MongoStorage {\n  constructor() {\n    // Initialize database connection\n    connectDB();\n  }\n\n  // Contact form submissions\n  async createContact(contactData) {\n    const contact = new Contact(contactData);\n    await contact.save();\n    return contact;\n  }\n\n  async getContacts() {\n    return await Contact.find().sort({ createdAt: -1 });\n  }\n\n  // Newsletter subscriptions\n  async createSubscriber(email) {\n    const subscriber = new Newsletter({ email });\n    await subscriber.save();\n    return subscriber;\n  }\n\n  async getSubscribers() {\n    return await Newsletter.find().sort({ createdAt: -1 });\n  }\n\n  // Generate unique sponsor ID\n  async generateUniqueSponsorId() {\n    let sponsorId;\n    let isUnique = false;\n    \n    while (!isUnique) {\n      // Generate 6-digit random number\n      const randomNumber = Math.floor(100000 + Math.random() * 900000);\n      sponsorId = `FX${randomNumber}`;\n      \n      // Check if this ID already exists\n      const existing = await User.findOne({ ownSponsorId: sponsorId });\n      if (!existing) {\n        isUnique = true;\n      }\n    }\n    \n    return sponsorId;\n  }\n\n  // Find sponsor by their sponsor ID\n  async findSponsor(sponsorId) {\n    return await User.findOne({ ownSponsorId: sponsorId });\n  }\n\n  // User management\n  async createUser(userData) {\n    // Hash password before saving\n    const saltRounds = 10;\n    const hashedPassword = await bcrypt.hash(userData.password, saltRounds);\n    \n    // Generate unique sponsor ID for this user\n    const ownSponsorId = await this.generateUniqueSponsorId();\n    \n    // Find the sponsor (parent) if sponsorId is provided\n    let parent = null;\n    if (userData.sponsorId) {\n      parent = await this.findSponsor(userData.sponsorId);\n    }\n    \n    const user = new User({\n      ...userData,\n      password: hashedPassword,\n      ownSponsorId,\n      parent: parent ? parent._id : null\n    });\n    \n    await user.save();\n    \n    // Update parent's children array and referral count\n    if (parent) {\n      await User.findByIdAndUpdate(parent._id, {\n        $push: { children: user._id },\n        $inc: { referralCount: 1 }\n      });\n    }\n\n    // Update multi-level referral counts\n    const { referralService } = await import('./referralService.js');\n    await referralService.updateReferralCounts(user._id);\n    \n    // Return user without password\n    const { password, ...userWithoutPassword } = user.toObject();\n    return userWithoutPassword;\n  }\n\n  async getUserByEmail(email) {\n    return await User.findOne({ email: email.toLowerCase() });\n  }\n\n  async getUserByMobile(mobile) {\n    return await User.findOne({ mobile: mobile });\n  }\n\n  async getUserById(id) {\n    return await User.findById(id).select('-password');\n  }\n\n  async getUsers() {\n    return await User.find().select('-password').sort({ createdAt: -1 });\n  }\n\n  async verifyPassword(plainPassword, hashedPassword) {\n    return await bcrypt.compare(plainPassword, hashedPassword);\n  }\n\n  async getUserReferrals(userId) {\n    const user = await User.findById(userId).populate('children', 'firstName lastName email createdAt');\n    return user ? user.children : [];\n  }\n\n  // Deposit methods\n  async createDeposit(depositData) {\n    try {\n      const deposit = new Deposit(depositData);\n      await deposit.save();\n      return deposit;\n    } catch (error) {\n      console.error('Error creating deposit:', error);\n      throw error;\n    }\n  }\n\n  async getDepositsByUserId(userId) {\n    try {\n      return await Deposit.find({ userId }).sort({ createdAt: -1 });\n    } catch (error) {\n      console.error('Error fetching deposits:', error);\n      throw error;\n    }\n  }\n\n  async getAllDeposits() {\n    try {\n      return await Deposit.find().populate('userId', 'email firstName lastName').sort({ createdAt: -1 });\n    } catch (error) {\n      console.error('Error fetching all deposits:', error);\n      throw error;\n    }\n  }\n\n  async updateDepositStatus(depositId, status) {\n    try {\n      return await Deposit.findByIdAndUpdate(depositId, { status, updatedAt: new Date() }, { new: true });\n    } catch (error) {\n      console.error('Error updating deposit status:', error);\n      throw error;\n    }\n  }\n\n  // Password Reset Functions\n  async generateResetToken() {\n    // Generate secure random token\n    const crypto = await import('crypto');\n    return crypto.default.randomBytes(32).toString('hex');\n  }\n\n  async setResetToken(email, token) {\n    const expiry = new Date(Date.now() + 60 * 60 * 1000); // 1 hour from now\n    return await User.findOneAndUpdate(\n      { email: email.toLowerCase() },\n      {\n        resetToken: token,\n        resetTokenExpiry: expiry\n      },\n      { new: true }\n    );\n  }\n\n  async getUserByResetToken(token) {\n    return await User.findOne({\n      resetToken: token,\n      resetTokenExpiry: { $gt: new Date() } // Token not expired\n    });\n  }\n\n  async clearResetToken(userId) {\n    return await User.findByIdAndUpdate(userId, {\n      resetToken: null,\n      resetTokenExpiry: null\n    });\n  }\n\n  async updatePassword(userId, newPassword) {\n    const saltRounds = 10;\n    const hashedPassword = await bcrypt.hash(newPassword, saltRounds);\n    \n    return await User.findByIdAndUpdate(userId, {\n      password: hashedPassword,\n      resetToken: null,\n      resetTokenExpiry: null\n    });\n  }\n}\n\nlet storage = null;\n\nexport function getStorage() {\n  if (!storage) {\n    storage = new MongoStorage();\n  }\n  return storage;\n}","size_bytes":5575},"server/vite.js":{"content":"import express from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { nanoid } from \"nanoid\";\nimport viteConfig from \"../vite.config.js\";\n\nconst viteLogger = createLogger();\n\nexport function log(message, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app, server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        path.dirname(new URL(import.meta.url).pathname),\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.jsx\"`,\n        `src=\"/src/main.jsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app) {\n  const distPath = path.resolve(path.dirname(new URL(import.meta.url).pathname), \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}","size_bytes":2215},"shared/schema.js":{"content":"import { z } from \"zod\";\n\n// Contact form schema\nexport const contactSchema = z.object({\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  email: z.string().email(\"Valid email is required\"),\n  subject: z.string().min(1, \"Subject is required\"),\n  message: z.string().min(10, \"Message must be at least 10 characters\")\n});\n\n// Newsletter subscription schema\nexport const newsletterSchema = z.object({\n  email: z.string().email(\"Valid email is required\")\n});\n\n// User login schema\nexport const loginSchema = z.object({\n  email: z.string().email(\"Valid email is required\"),\n  password: z.string().min(1, \"Password is required\")\n});\n\n// User registration schema (for server validation)\nexport const userRegistrationSchema = z.object({\n  sponsorId: z.string().min(1, \"Sponsor ID is required\"),\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  mobile: z.string().regex(/^\\d{10}$/, \"Mobile number must be exactly 10 digits\"),\n  email: z.string().email(\"Valid email is required\"),\n  password: z.string().min(8, \"Password must be at least 8 characters\")\n});\n\n// Forgot password schema\nexport const forgotPasswordSchema = z.object({\n  email: z.string().email(\"Valid email is required\")\n});\n\n// Investment package schema\nexport const investmentPackageSchema = z.object({\n  id: z.number(),\n  name: z.string(),\n  type: z.enum(['fixed', 'affiliate', 'direct', 'salary']),\n  minimum: z.number().optional(),\n  return: z.string().optional(),\n  commission: z.string().optional(),\n  duration: z.string().optional()\n});","size_bytes":1630},"client/src/App.jsx":{"content":"import { Switch, Route } from \"wouter\";\nimport Home from \"./pages/Home\";\nimport Login from \"./pages/Login\";\nimport Register from \"./pages/Register\";\nimport ForgotPassword from \"./pages/ForgotPassword\";\nimport ResetPassword from \"./pages/ResetPassword\";\nimport ModernDashboard from \"./pages/ModernDashboard\";\nimport Profile from \"./pages/Profile\";\nimport Fund from \"./pages/Fund\";\nimport ReferralTree from \"./pages/ReferralTree\";\nimport Deposit from \"./pages/Deposit\";\nimport Withdrawal from \"./pages/Withdrawal\";\nimport AdminDashboard from \"./pages/AdminDashboard\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Switch>\n        <Route path=\"/\" component={Home} />\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/register\" component={Register} />\n        <Route path=\"/forgot-password\" component={ForgotPassword} />\n        <Route path=\"/reset-password\" component={ResetPassword} />\n        <Route path=\"/dashboard\" component={ModernDashboard} />\n        <Route path=\"/profile\" component={Profile} />\n        <Route path=\"/fund\" component={Fund} />\n        <Route path=\"/referral-tree\" component={ReferralTree} />\n        <Route path=\"/deposit\" component={Deposit} />\n        <Route path=\"/withdrawal\" component={Withdrawal} />\n        <Route path=\"/admin\" component={AdminDashboard} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","size_bytes":1381},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* CSS Variables for Website Theme */\n:root {\n  --primary-gold: #FFD700;\n  --hover-gold: #FFC000;\n  --dark-bg: #0A0A0A;\n  --dark-card: #1A1A1A;\n  --text-primary: #FFFFFF;\n  --text-secondary: #B0B0B0;\n  --border-color: rgba(255, 215, 0, 0.2);\n}\n\n/* Clean CSS for modern dashboard */\nbody {\n  font-family: 'Inter', sans-serif;\n  margin: 0;\n  padding: 0;\n}\n\n* {\n  box-sizing: border-box;\n}\n\n/* Website Styling Classes */\n.bg-dark-bg { background-color: var(--dark-bg); }\n.bg-dark-card { background-color: var(--dark-card); }\n.bg-secondary { background-color: #1A1A1A; }\n.text-primary { color: var(--text-primary); }\n.text-secondary { color: var(--text-secondary); }\n.text-gold { color: var(--primary-gold); }\n.text-white { color: #FFFFFF; }\n\n/* Layout Classes */\n.container {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 0 1.5rem;\n}\n\n.section {\n  padding: 4rem 0;\n}\n\n.min-h-screen {\n  min-height: 100vh;\n}\n\n/* Grid Classes */\n.grid {\n  display: grid;\n}\n\n.grid-cols-1 {\n  grid-template-columns: repeat(1, minmax(0, 1fr));\n}\n\n.gap-8 {\n  gap: 2rem;\n}\n\n.gap-4 {\n  gap: 1rem;\n}\n\n.gap-6 {\n  gap: 1.5rem;\n}\n\n/* Button Classes */\n.btn {\n  padding: 0.75rem 1.5rem;\n  border-radius: 0.5rem;\n  font-weight: 600;\n  transition: all 0.2s ease;\n  border: none;\n  cursor: pointer;\n  text-decoration: none;\n  display: inline-block;\n  text-align: center;\n}\n\n.btn-primary {\n  background: linear-gradient(135deg, var(--primary-gold), var(--hover-gold));\n  color: var(--dark-bg);\n}\n\n.btn-primary:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 12px rgba(255, 215, 0, 0.4);\n}\n\n.btn-secondary {\n  background: transparent;\n  color: var(--primary-gold);\n  border: 1px solid var(--primary-gold);\n}\n\n.btn-secondary:hover {\n  background: var(--primary-gold);\n  color: var(--dark-bg);\n}\n\n.btn-lg {\n  padding: 1rem 2rem;\n  font-size: 1.125rem;\n}\n\n.btn.w-full {\n  width: 100%;\n}\n\n/* Card Classes */\n.card {\n  background: var(--dark-card);\n  border-radius: 1rem;\n  padding: 2rem;\n  border: 1px solid var(--border-color);\n  transition: all 0.3s ease;\n}\n\n.card:hover {\n  border-color: var(--primary-gold);\n  box-shadow: 0 8px 25px rgba(255, 215, 0, 0.15);\n}\n\n.package-card {\n  background: var(--dark-card);\n  border-radius: 1rem;\n  padding: 2rem;\n  border: 1px solid var(--border-color);\n  transition: all 0.3s ease;\n}\n\n.package-card:hover {\n  border-color: var(--primary-gold);\n  box-shadow: 0 8px 25px rgba(255, 215, 0, 0.15);\n  transform: translateY(-4px);\n}\n\n/* Typography Classes */\n.text-xl { font-size: 1.25rem; }\n.text-2xl { font-size: 1.5rem; }\n.text-3xl { font-size: 1.875rem; }\n.text-4xl { font-size: 2.25rem; }\n.text-5xl { font-size: 3rem; }\n.text-lg { font-size: 1.125rem; }\n.text-sm { font-size: 0.875rem; }\n\n.font-bold { font-weight: 700; }\n.font-semibold { font-weight: 600; }\n\n/* Margin and Padding Classes */\n.mb-4 { margin-bottom: 1rem; }\n.mb-6 { margin-bottom: 1.5rem; }\n.mb-8 { margin-bottom: 2rem; }\n.mb-12 { margin-bottom: 3rem; }\n.mb-16 { margin-bottom: 4rem; }\n\n.p-3 { padding: 0.75rem; }\n.p-6 { padding: 1.5rem; }\n.p-8 { padding: 2rem; }\n\n.px-3 { padding-left: 0.75rem; padding-right: 0.75rem; }\n.py-1 { padding-top: 0.25rem; padding-bottom: 0.25rem; }\n.py-4 { padding-top: 1rem; padding-bottom: 1rem; }\n.py-20 { padding-top: 5rem; padding-bottom: 5rem; }\n\n/* Flex Classes */\n.flex { display: flex; }\n.flex-col { flex-direction: column; }\n.items-center { align-items: center; }\n.justify-center { justify-content: center; }\n.justify-between { justify-content: space-between; }\n\n/* Text Alignment */\n.text-center { text-align: center; }\n.text-left { text-align: left; }\n\n/* Border Classes */\n.border { border: 1px solid; }\n.border-t { border-top: 1px solid; }\n.rounded { border-radius: 0.25rem; }\n.rounded-xl { border-radius: 0.75rem; }\n.rounded-full { border-radius: 9999px; }\n\n/* Position Classes */\n.fixed { position: fixed; }\n.relative { position: relative; }\n.absolute { position: absolute; }\n\n/* Z-index */\n.z-50 { z-index: 50; }\n\n/* Width Classes */\n.w-full { width: 100%; }\n\n/* Transitions */\n.transition { transition: all 0.2s ease; }\n.transition-colors { transition: color 0.2s ease; }\n\n/* Hover Effects */\n.hover-lift:hover {\n  transform: translateY(-4px);\n}\n\n/* Animations */\n@keyframes fadeIn {\n  from { opacity: 0; transform: translateY(20px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n@keyframes slideIn {\n  from { opacity: 0; transform: translateX(20px); }\n  to { opacity: 1; transform: translateX(0); }\n}\n\n.animate-fadeIn {\n  animation: fadeIn 0.6s ease-out forwards;\n}\n\n.animate-slideIn {\n  animation: slideIn 0.6s ease-out forwards;\n}\n\n/* Gradient Classes */\n.gradient-gold {\n  background: linear-gradient(135deg, var(--primary-gold), var(--hover-gold));\n}\n\n/* Navigation Specific */\n.nav-link {\n  background: none;\n  border: none;\n  color: var(--text-secondary);\n  cursor: pointer;\n  transition: color 0.2s ease;\n}\n\n.nav-link:hover {\n  color: var(--primary-gold);\n}\n\n.mobile-nav-link:hover {\n  background-color: rgba(255, 215, 0, 0.1);\n  color: var(--primary-gold);\n}\n\n/* Hero Section */\n.hero-grid {\n  grid-template-columns: 1fr;\n  gap: 3rem;\n}\n\n.hero-title {\n  line-height: 1.1;\n}\n\n.hero-subtitle {\n  max-width: 600px;\n  margin: 0 auto 2rem;\n}\n\n.hero-buttons {\n  flex-direction: column;\n  align-items: center;\n}\n\n/* Benefits Grid */\n.benefits-grid {\n  grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));\n  gap: 2rem;\n}\n\n/* Package Grid */\n.package-grid {\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n  gap: 2rem;\n}\n\n/* Responsive Design */\n@media (min-width: 768px) {\n  .container {\n    padding: 0 2rem;\n  }\n  \n  .hero-grid {\n    grid-template-columns: 1fr 1fr;\n    align-items: center;\n  }\n  \n  .hero-buttons {\n    flex-direction: row;\n    justify-content: center;\n  }\n  \n  .desktop-nav {\n    display: flex !important;\n  }\n  \n  .mobile-menu-btn {\n    display: none;\n  }\n  \n  .auth-buttons {\n    display: flex !important;\n  }\n}\n\n@media (max-width: 767px) {\n  .desktop-nav {\n    display: none;\n  }\n  \n  .auth-buttons {\n    display: none;\n  }\n  \n  .mobile-menu-btn {\n    display: block;\n  }\n  \n  .text-5xl {\n    font-size: 2.5rem;\n  }\n  \n  .section {\n    padding: 2rem 0;\n  }\n}\n\n@media (min-width: 1024px) {\n  .benefits-grid {\n    grid-template-columns: repeat(3, 1fr);\n  }\n  \n  .package-grid {\n    grid-template-columns: repeat(2, 1fr);\n  }\n}\n\n/* Mobile Menu Styles */\n.mobile-menu {\n  background: var(--dark-card);\n  border-top: 1px solid var(--border-color);\n}\n\n/* Additional utility classes */\n.block { display: block; }\n.hidden { display: none; }\n.overflow-hidden { overflow: hidden; }\n\n/* Font weight */\n.font-inter { font-family: 'Inter', sans-serif; }\n\n/* Additional spacing */\n.pt-4 { padding-top: 1rem; }\n\n/* Additional grid classes */\n.md\\:grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); }\n.lg\\:grid-cols-3 { grid-template-columns: repeat(3, minmax(0, 1fr)); }\n\n/* Max width utilities */\n.max-w-4xl { max-width: 56rem; }\n.mx-auto { margin-left: auto; margin-right: auto; }\n\n/* Additional border utilities */\n.border-gold\\/10 { border-color: rgba(255, 215, 0, 0.1); }\n.border-gold\\/20 { border-color: rgba(255, 215, 0, 0.2); }\n.border-gold\\/30 { border-color: rgba(255, 215, 0, 0.3); }\n\n/* Color utilities */\n.text-gray-300 { color: #d1d5db; }\n.text-gray-400 { color: #9ca3af; }\n.text-gray-500 { color: #6b7280; }\n.text-gray-600 { color: #4b5563; }\n\n/* Additional background utilities */\n.bg-dark { background-color: var(--dark-bg); }\n\n/* Additional spacing utilities */\n.space-y-3 > * + * { margin-top: 0.75rem; }\n.space-y-4 > * + * { margin-top: 1rem; }\n.space-x-3 > * + * { margin-left: 0.75rem; }\n\n/* Additional layout utilities */\n.leading-relaxed { line-height: 1.625; }\n.leading-6 { line-height: 1.5rem; }\n\n/* Footer grid */\n.footer-grid {\n  grid-template-columns: 2fr 1fr 1fr;\n  gap: 3rem;\n}\n\n/* About intro section */\n.about-intro {\n  grid-template-columns: 1fr 1fr;\n  align-items: center;\n}\n\n/* Social link hover effects */\n.social-link:hover {\n  background-color: var(--primary-gold) !important;\n  color: var(--dark-bg) !important;\n}\n\n/* Additional image utilities */\n.object-cover { object-fit: cover; }\n.rounded-full { border-radius: 9999px; }\n.rounded-2xl { border-radius: 1rem; }\n.shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05); }\n\n/* Width and height utilities */\n.w-32 { width: 8rem; }\n.h-32 { height: 8rem; }\n.w-2 { width: 0.5rem; }\n.h-2 { height: 0.5rem; }\n.w-5 { width: 1.25rem; }\n.h-5 { height: 1.25rem; }\n\n/* Flex utilities */\n.flex-shrink-0 { flex-shrink: 0; }\n.items-start { align-items: flex-start; }\n\n/* Additional margin utilities */\n.mt-2 { margin-top: 0.5rem; }\n.mt-12 { margin-top: 3rem; }\n.pt-8 { padding-top: 2rem; }\n\n/* Color-specific utilities */\n.text-blue-custom { color: #3b82f6; }\n.border-blue-custom\\/20 { border-color: rgba(59, 130, 246, 0.2); }\n\n/* Additional responsive classes */\n@media (max-width: 767px) {\n  .footer-grid {\n    grid-template-columns: 1fr;\n    gap: 2rem;\n  }\n  \n  .about-intro {\n    grid-template-columns: 1fr;\n  }\n  \n  .lg\\:grid-cols-3 {\n    grid-template-columns: 1fr;\n  }\n}\n\n@media (min-width: 768px) {\n  .md\\:grid-cols-2 {\n    grid-template-columns: repeat(2, minmax(0, 1fr));\n  }\n}\n\n@media (min-width: 1024px) {\n  .lg\\:grid-cols-3 {\n    grid-template-columns: repeat(3, minmax(0, 1fr));\n  }\n}\n\n/* Additional missing utilities */\n.bg-gold { background-color: var(--primary-gold); }\n.rounded { border-radius: 0.25rem; }\n\n/* List utilities */\nul { list-style: none; padding: 0; margin: 0; }\n\n/* Button styles for footer links */\nbutton {\n  background: none;\n  border: none;\n  cursor: pointer;\n  font-family: inherit;\n  font-size: inherit;\n  color: inherit;\n}\n\n/* Additional missing classes */\n.mt-20 { margin-top: 5rem; }\n.mb-20 { margin-bottom: 5rem; }\n\n/* Fix for any missing border utilities */\n.border-gray-600 { border-color: #4b5563; }\n\n/* Icon sizing */\n.w-10 { width: 2.5rem; }\n.h-10 { height: 2.5rem; }","size_bytes":10069},"client/src/main.jsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport App from \"./App\";\nimport queryClient from \"./lib/queryClient\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")).render(\n  <QueryClientProvider client={queryClient}>\n    <App />\n  </QueryClientProvider>\n);\n","size_bytes":338},"client/src/components/AboutSection.jsx":{"content":"export default function AboutSection() {\n  const teamMembers = [\n    {\n      name: \"Michael Marcus\",\n      position: \"Founder & CEO\",\n      description: \"With over 10 years in the Forex trading and investment management industry, Michael brings deep expertise in high-frequency trading, portfolio structuring, and global financial compliance.\",\n      image: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=400&h=400\"\n    },\n    {\n      name: \"Lucy Baldwin\",\n      position: \"Chief Operations Officer\",\n      description: \"An operations specialist with extensive experience in financial services administration, KYC compliance, and client relations. She oversees daily business processes.\",\n      image: \"https://images.unsplash.com/photo-1573496359142-b8d87734a5a2?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=400&h=400\"\n    },\n    {\n      name: \"Richards Dennis\",\n      position: \"Head of Trading & Risk Management\",\n      description: \"Leads the trading team, specialising in market analytics, algorithmic strategy design, and risk control protocols, ensuring capital protection objectives.\",\n      image: \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=400&h=400\"\n    }\n  ];\n\n  const tradingApproach = [\n    \"Multi-strategy portfolios combining technical analysis, fundamental insights, and AI-driven algorithmic systems.\",\n    \"Strict capital preservation principles, limiting exposure per trade to a small percentage of total managed funds.\",\n    \"Diversified currency pair selection, reducing concentration risk and enhancing ROI potential.\",\n    \"Automated stop loss and take profit mechanisms to protect client capital in volatile market conditions.\",\n    \"Daily and weekly risk assessments conducted by our trading and compliance team to adapt strategies proactively.\"\n  ];\n\n  return (\n    <section id=\"about\" className=\"section bg-secondary\">\n      <div className=\"container\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-4xl font-bold mb-4\">About <span className=\"text-gold\">FXBOT</span></h2>\n          <p className=\"text-xl text-secondary\">Professional Forex Investment Solutions Provider</p>\n        </div>\n\n        {/* Company Introduction */}\n        <div className=\"grid grid-cols-1 gap-8 items-center mb-16 about-intro\">\n          <div className=\"animate-slideIn\">\n            <h3 className=\"text-3xl font-bold mb-6\">Company Introduction</h3>\n            <p className=\"text-secondary mb-6\" style={{ lineHeight: '1.6' }}>\n              FXBOT is a globally oriented Forex investment and trading solutions provider, dedicated to delivering consistent returns to clients through professionally managed strategies. We combine advanced market analytics, automated algorithmic systems, and experienced fund management to achieve superior risk-adjusted returns in the Forex markets.\n            </p>\n            <p className=\"text-secondary\" style={{ lineHeight: '1.6' }}>\n              Established with the vision to simplify Forex investing for individuals and institutions alike, we prioritise transparency, professional execution, and robust risk management in every trade and investment decision.\n            </p>\n          </div>\n          <div className=\"animate-fadeIn\">\n            <img \n              src=\"https://images.unsplash.com/photo-1497366216548-37526070297c?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=80\" \n              alt=\"Modern professional office environment\" \n              className=\"rounded shadow-lg w-full\"\n            />\n          </div>\n        </div>\n\n        {/* Mission & Vision */}\n        <div className=\"grid md:grid-cols-2 gap-8 mb-20\">\n          <div className=\"bg-dark-card p-8 rounded-2xl border border-gold/20 animate-fadeIn\">\n            <h3 className=\"text-2xl font-bold text-gold mb-4\">Our Mission</h3>\n            <p className=\"text-gray-300 leading-relaxed\">\n              To empower investors globally by providing secure, innovative, and performance-driven Forex investment solutions while upholding the highest standards of transparency and client trust.\n            </p>\n          </div>\n          <div className=\"bg-dark-card p-8 rounded-2xl border border-blue-custom/20 animate-fadeIn\" style={{ animationDelay: '0.2s' }}>\n            <h3 className=\"text-2xl font-bold text-blue-custom mb-4\">Our Vision</h3>\n            <p className=\"text-gray-300 leading-relaxed\">\n              To be recognised as a leading trusted Forex investment management company, known for consistent results, ethical practices, and technological excellence in global financial markets.\n            </p>\n          </div>\n        </div>\n\n        {/* Trading Approach */}\n        <div className=\"bg-dark-card p-8 rounded-2xl border border-gold/20 mb-20 animate-fadeIn\">\n          <h3 className=\"text-3xl font-bold text-gold mb-6\">Trading & Risk Management Approach</h3>\n          <div className=\"grid md:grid-cols-2 gap-8\">\n            <div className=\"space-y-4\">\n              {tradingApproach.slice(0, 3).map((approach, index) => (\n                <div key={index} className=\"flex items-start space-x-3\">\n                  <div className=\"w-2 h-2 bg-gold rounded-full mt-2 flex-shrink-0\"></div>\n                  <p className=\"text-gray-300\">{approach}</p>\n                </div>\n              ))}\n            </div>\n            <div className=\"space-y-4\">\n              {tradingApproach.slice(3).map((approach, index) => (\n                <div key={index} className=\"flex items-start space-x-3\">\n                  <div className=\"w-2 h-2 bg-gold rounded-full mt-2 flex-shrink-0\"></div>\n                  <p className=\"text-gray-300\">{approach}</p>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* Leadership Team */}\n        <div>\n          <h3 className=\"text-3xl font-bold text-center mb-12\">Leadership <span className=\"text-gold\">Team</span></h3>\n          <div className=\"grid lg:grid-cols-3 gap-8\">\n            {teamMembers.map((member, index) => (\n              <div \n                key={index}\n                className=\"bg-dark-card p-8 rounded-2xl border border-gold/10 hover:border-gold/30 transition-colors text-center animate-fadeIn\"\n                style={{ animationDelay: `${index * 0.2}s` }}\n              >\n                <img \n                  src={member.image} \n                  alt={`${member.name} - ${member.position}`} \n                  className=\"w-32 h-32 rounded-full mx-auto mb-6 object-cover\"\n                />\n                <h4 className=\"text-xl font-bold mb-2\">{member.name}</h4>\n                <p className=\"text-gold font-semibold mb-4\">{member.position}</p>\n                <p className=\"text-gray-300 text-sm leading-relaxed\">{member.description}</p>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Licensing */}\n        <div className=\"mt-20 bg-dark-card p-8 rounded-2xl border border-gold/20 text-center animate-fadeIn\">\n          <h3 className=\"text-2xl font-bold text-gold mb-4\">Licensing & Registration</h3>\n          <p className=\"text-gray-300 leading-relaxed\">\n            FXBOT is incorporated under St. Vincent & the Grenadines, with registration number HE-543752. We operate as an international investment solutions provider, complying with local and international business regulations, anti-money laundering standards, and KYC policies to maintain client security and operational integrity.\n          </p>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":7800},"client/src/components/AffiliateCalculator.jsx":{"content":"import { useState, useEffect } from 'react';\n\nexport default function AffiliateCalculator() {\n  const [referralCount, setReferralCount] = useState(10);\n  const [averageInvestment, setAverageInvestment] = useState(1000);\n  const [commissionType, setCommissionType] = useState('dri');\n  const [projectedCommission, setProjectedCommission] = useState(600);\n\n  const commissionTypes = {\n    dri: { name: \"DRI Income (6%)\", rate: 0.06 },\n    level1: { name: \"SmartLine Level 1 (1.5%)\", rate: 0.015 },\n    level2: { name: \"SmartLine Level 2 (1.0%)\", rate: 0.01 },\n    level3: { name: \"SmartLine Level 3 (0.75%)\", rate: 0.0075 },\n    level4: { name: \"SmartLine Level 4 (0.50%)\", rate: 0.005 },\n    level5: { name: \"SmartLine Level 5 (0.25%)\", rate: 0.0025 }\n  };\n\n  const calculateCommission = () => {\n    const selectedType = commissionTypes[commissionType];\n    if (selectedType) {\n      const commission = referralCount * averageInvestment * selectedType.rate;\n      setProjectedCommission(commission);\n    }\n  };\n\n  useEffect(() => {\n    calculateCommission();\n  }, [referralCount, averageInvestment, commissionType]);\n\n  return (\n    <div className=\"card p-8\" style={{ borderColor: 'rgba(255, 215, 0, 0.2)' }}>\n      <h3 className=\"text-2xl font-bold text-gold mb-6 text-center\">Affiliate Income Calculator</h3>\n      <div className=\"grid grid-cols-1 gap-8 affiliate-grid\">\n        <div className=\"form-section\" style={{ display: 'flex', flexDirection: 'column', gap: '1rem' }}>\n          <div>\n            <label className=\"form-label\">Number of Direct Referrals</label>\n            <input \n              type=\"number\" \n              value={referralCount}\n              onChange={(e) => setReferralCount(Number(e.target.value) || 0)}\n              className=\"form-input\"\n            />\n          </div>\n          <div>\n            <label className=\"form-label\">Average Investment Amount ($)</label>\n            <input \n              type=\"number\" \n              value={averageInvestment}\n              onChange={(e) => setAverageInvestment(Number(e.target.value) || 0)}\n              className=\"form-input\"\n            />\n          </div>\n          <div>\n            <label className=\"form-label\">Commission Type</label>\n            <select \n              value={commissionType}\n              onChange={(e) => setCommissionType(e.target.value)}\n              className=\"form-input\"\n            >\n              {Object.entries(commissionTypes).map(([key, type]) => (\n                <option key={key} value={key}>\n                  {type.name}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n        <div className=\"flex items-center justify-center\">\n          <div className=\"card p-6 text-center\" style={{ \n            backgroundColor: 'var(--card-secondary)',\n            borderColor: 'rgba(255, 215, 0, 0.2)'\n          }}>\n            <div className=\"text-sm text-secondary mb-2\">Projected Commission</div>\n            <div className=\"text-4xl font-bold text-gold mb-2\">\n              ${projectedCommission.toFixed(2)}\n            </div>\n            <div className=\"text-sm text-secondary mb-4\">\n              Based on {referralCount} referrals × ${averageInvestment} × {(commissionTypes[commissionType].rate * 100).toFixed(2)}%\n            </div>\n            <button \n              onClick={calculateCommission}\n              className=\"btn\"\n              style={{\n                padding: '0.5rem 1.5rem',\n                background: 'linear-gradient(135deg, var(--primary-gold), var(--hover-gold))',\n                color: 'var(--dark-bg)'\n              }}\n            >\n              Calculate\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3737},"client/src/components/BenefitsSection.jsx":{"content":"import { Shield, TrendingUp, Users } from 'lucide-react';\n\nexport default function BenefitsSection() {\n  const benefits = [\n    {\n      icon: Shield,\n      title: \"Safe & Transparent\",\n      description: \"All investments backed by professional trading strategies with full transparency and regular reporting.\"\n    },\n    {\n      icon: TrendingUp,\n      title: \"Daily Profit Tracking\",\n      description: \"Real-time monitoring of your investments with detailed analytics and performance metrics.\"\n    },\n    {\n      icon: Users,\n      title: \"Professional Team\",\n      description: \"Experienced trading professionals with over 10 years of forex market expertise.\"\n    }\n  ];\n\n  return (\n    <section className=\"section bg-secondary\">\n      <div className=\"container\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-4xl font-bold mb-4\">Why Choose <span className=\"text-gold\">FXBOT</span>?</h2>\n          <p className=\"text-xl text-secondary\">Professional trading solutions with complete transparency</p>\n        </div>\n        \n        <div className=\"grid grid-cols-1 gap-8 benefits-grid\">\n          {benefits.map((benefit, index) => {\n            const IconComponent = benefit.icon;\n            return (\n              <div \n                key={index}\n                className=\"card text-center p-8 animate-fadeIn hover-lift\"\n                style={{ animationDelay: `${index * 0.2}s` }}\n              >\n                <div className=\"benefit-icon\" style={{\n                  width: '4rem',\n                  height: '4rem',\n                  backgroundColor: 'rgba(255, 215, 0, 0.1)',\n                  borderRadius: '50%',\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  margin: '0 auto 1.5rem'\n                }}>\n                  <IconComponent style={{ width: '2rem', height: '2rem', color: 'var(--primary-gold)' }} />\n                </div>\n                <h3 className=\"text-xl font-bold mb-4\">{benefit.title}</h3>\n                <p className=\"text-secondary\">{benefit.description}</p>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2214},"client/src/components/ContactSection.jsx":{"content":"import { useState } from 'react';\nimport { Mail, Phone, Clock, MapPin } from 'lucide-react';\n\nexport default function ContactSection() {\n  const [formData, setFormData] = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    subject: 'General Inquiry',\n    message: ''\n  });\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // Handle form submission here\n    console.log('Form submitted:', formData);\n    alert('Thank you for your message! We will get back to you soon.');\n    setFormData({\n      firstName: '',\n      lastName: '',\n      email: '',\n      subject: 'General Inquiry',\n      message: ''\n    });\n  };\n\n  const contactInfo = [\n    {\n      icon: Mail,\n      title: \"Email\",\n      details: \"support@fxbot.co.in\"\n    },\n    //{\n     // icon: Phone,\n     // title: \"Phone\",\n     // details: \"+1 (555) 123-4567\"\n   // },\n    {\n      icon: Clock,\n      title: \"Business Hours\",\n      details: \"Mon - Fri: 9:00 AM - 6:00 PM IST\"\n    },\n    {\n      icon: MapPin,\n      title: \"Address\",\n      details: \"Bay View Tower, Business Bay, Dubai, UAE\"\n    }\n  ];\n\n  return (\n    <section id=\"contact\" className=\"section bg-secondary\">\n      <div className=\"container\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-4xl font-bold mb-4\">Contact <span className=\"text-gold\">Us</span></h2>\n          <p className=\"text-xl text-secondary\">Get in touch with our team for any inquiries</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 gap-8 contact-grid\">\n          <div className=\"animate-slideIn\">\n            <h3 className=\"text-2xl font-bold mb-8\">Get In Touch</h3>\n            <div className=\"contact-info\" style={{ display: 'flex', flexDirection: 'column', gap: '1.5rem' }}>\n              {contactInfo.map((info, index) => {\n                const IconComponent = info.icon;\n                return (\n                  <div key={index} className=\"flex items-center\" style={{ gap: '1rem' }}>\n                    <div className=\"contact-icon-wrapper\" style={{\n                      width: '3rem',\n                      height: '3rem',\n                      backgroundColor: 'rgba(255, 215, 0, 0.1)',\n                      borderRadius: 'var(--border-radius)',\n                      display: 'flex',\n                      alignItems: 'center',\n                      justifyContent: 'center'\n                    }}>\n                      <IconComponent style={{ width: '1.5rem', height: '1.5rem', color: 'var(--primary-gold)' }} />\n                    </div>\n                    <div>\n                      <h4 className=\"font-semibold\">{info.title}</h4>\n                      <p className=\"text-secondary\">{info.details}</p>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n\n          <div className=\"card p-8 animate-fadeIn\" style={{ borderColor: 'rgba(255, 215, 0, 0.2)' }}>\n            <form onSubmit={handleSubmit} className=\"contact-form\" style={{ display: 'flex', flexDirection: 'column', gap: '1.5rem' }}>\n              <div className=\"grid grid-cols-1 gap-6 form-row\">\n                <div>\n                  <label className=\"form-label\">First Name</label>\n                  <input \n                    type=\"text\" \n                    name=\"firstName\"\n                    value={formData.firstName}\n                    onChange={handleInputChange}\n                    required\n                    className=\"form-input\"\n                  />\n                </div>\n                <div>\n                  <label className=\"form-label\">Last Name</label>\n                  <input \n                    type=\"text\" \n                    name=\"lastName\"\n                    value={formData.lastName}\n                    onChange={handleInputChange}\n                    required\n                    className=\"form-input\"\n                  />\n                </div>\n              </div>\n              <div>\n                <label className=\"form-label\">Email</label>\n                <input \n                  type=\"email\" \n                  name=\"email\"\n                  value={formData.email}\n                  onChange={handleInputChange}\n                  required\n                  className=\"form-input\"\n                />\n              </div>\n              <div>\n                <label className=\"form-label\">Subject</label>\n                <select \n                  name=\"subject\"\n                  value={formData.subject}\n                  onChange={handleInputChange}\n                  className=\"form-input\"\n                >\n                  <option value=\"General Inquiry\">General Inquiry</option>\n                  <option value=\"Investment Support\">Investment Support</option>\n                  <option value=\"Technical Support\">Technical Support</option>\n                  <option value=\"Partnership\">Partnership</option>\n                </select>\n              </div>\n              <div>\n                <label className=\"form-label\">Message</label>\n                <textarea \n                  rows=\"4\" \n                  name=\"message\"\n                  value={formData.message}\n                  onChange={handleInputChange}\n                  required\n                  className=\"form-input\"\n                  style={{ resize: 'vertical' }}\n                ></textarea>\n              </div>\n              <button \n                type=\"submit\" \n                className=\"btn w-full font-semibold\"\n                style={{\n                  background: 'linear-gradient(135deg, var(--primary-gold), var(--hover-gold))',\n                  color: 'var(--dark-bg)'\n                }}\n              >\n                Send Message\n              </button>\n            </form>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":5947},"client/src/components/FAQSection.jsx":{"content":"import { useState } from 'react';\nimport { ChevronDown, ChevronUp } from 'lucide-react';\n\nexport default function FAQSection() {\n  const [openFAQ, setOpenFAQ] = useState(null);\n\n  const faqs = [\n    {\n      question: \"How are returns generated?\",\n      answer: \"Returns are generated through Forex trading activities managed by our professional trading team using a combination of technical analysis, market strategies, and algorithmic systems to achieve consistent performance.\"\n    },\n    {\n      question: \"Is my capital guaranteed?\",\n      answer: \"While certain plans offer fixed returns backed by company reserves and trading profits, all investments carry some level of market risk. Please read each plan's terms and disclaimers carefully before investing.\"\n    },\n    {\n      question: \"How do withdrawals work?\",\n      answer: \"Withdrawals can be requested directly through your dashboard. Depending on your chosen plan, profits are either paid out monthly or as a lumpsum at maturity. Processing time is generally within 24-48 business hours.\"\n    },\n    {\n      question: \"What are the risks involved?\",\n      answer: \"Forex trading involves market risks including partial or total loss of capital in high-risk plans. Even fixed-return plans carry operational and execution risks. We recommend investing amounts within your risk tolerance and understanding each plan's structure fully.\"\n    },\n    {\n      question: \"What is the re-top-up rule after 2x completion?\",\n      answer: \"When a user's investment package reaches 2x returns (full payout completed), they must re-top-up their account with a minimum of $250 to continue receiving future ROI payouts and stay eligible for referral rewards and level income.\"\n    },\n    {\n      question: \"Are packages locked for a minimum period?\",\n      answer: \"Yes, all investment packages are locked for a minimum period of 6 months to ensure optimal trading strategies and consistent returns for our investors.\"\n    }\n  ];\n\n  const toggleFAQ = (index) => {\n    setOpenFAQ(openFAQ === index ? null : index);\n  };\n\n  return (\n    <section id=\"faq\" className=\"section\">\n      <div className=\"container\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-4xl font-bold mb-4\">Frequently Asked <span className=\"text-gold\">Questions</span></h2>\n          <p className=\"text-xl text-secondary\">Get answers to common questions about FXBOT</p>\n        </div>\n\n        <div className=\"faq-container\" style={{ maxWidth: '64rem', margin: '0 auto', display: 'flex', flexDirection: 'column', gap: '1rem' }}>\n          {faqs.map((faq, index) => (\n            <div \n              key={index}\n              className=\"card border animate-fadeIn\"\n              style={{ \n                animationDelay: `${index * 0.1}s`,\n                borderColor: 'rgba(255, 215, 0, 0.1)' \n              }}\n            >\n              <button \n                className=\"faq-button w-full p-6 text-left flex justify-between items-center transition-colors\"\n                onClick={() => toggleFAQ(index)}\n                style={{\n                  background: 'none',\n                  border: 'none',\n                  color: 'inherit'\n                }}\n              >\n                <h3 className=\"text-lg font-semibold\">{faq.question}</h3>\n                {openFAQ === index ? (\n                  <ChevronUp style={{ width: '1.25rem', height: '1.25rem', color: 'var(--primary-gold)' }} />\n                ) : (\n                  <ChevronDown style={{ width: '1.25rem', height: '1.25rem', color: 'var(--primary-gold)' }} />\n                )}\n              </button>\n              {openFAQ === index && (\n                <div className=\"p-6 pt-0 border-t\" style={{ borderTopColor: '#555' }}>\n                  <p className=\"text-secondary\">{faq.answer}</p>\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3933},"client/src/components/Footer.jsx":{"content":"import { Facebook, Twitter, Linkedin, Send } from 'lucide-react';\n\nexport default function Footer() {\n  const scrollToSection = (sectionId) => {\n    const element = document.getElementById(sectionId);\n    if (element) {\n      element.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  const quickLinks = [\n    { name: \"Home\", section: \"home\" },\n    { name: \"About Us\", section: \"about\" },\n    { name: \"Investment Packages\", section: \"packages\" },\n    { name: \"How It Works\", section: \"how-it-works\" },\n    { name: \"FAQs\", section: \"faq\" },\n    { name: \"Contact\", section: \"contact\" }\n  ];\n\n  const legalLinks = [\n    { name: \"Terms & Conditions\", href: \"#terms\" },\n    { name: \"Privacy Policy\", href: \"#privacy\" },\n    { name: \"Risk Disclaimer\", href: \"#risk\" },\n    { name: \"AML & KYC Policy\", href: \"#aml\" },\n    { name: \"Refund Policy\", href: \"#refund\" }\n  ];\n\n  const socialLinks = [\n    { icon: Facebook, href: \"#\" },\n    { icon: Twitter, href: \"#\" },\n    { icon: Linkedin, href: \"#\" },\n    { icon: Send, href: \"#\" }\n  ];\n\n  return (\n    <footer className=\"bg-dark border-t py-16\" style={{ borderTopColor: 'rgba(255, 215, 0, 0.2)' }}>\n      <div className=\"container\">\n        <div className=\"grid grid-cols-1 gap-8 footer-grid\">\n          <div className=\"footer-main\">\n            <div className=\"flex items-center mb-6\">\n              <img src=\"/logo.png\" alt=\"FXBOT Logo\" style={{ height: '2rem', width: 'auto', marginRight: '0.75rem' }} />\n              <span className=\"text-2xl font-bold text-gold\">FXBOT</span>\n            </div>\n            <p className=\"text-secondary mb-6\" style={{ lineHeight: '1.6' }}>\n              Professional Forex investment solutions provider dedicated to delivering consistent returns through advanced market analytics and experienced fund management.\n            </p>\n            <div className=\"flex\" style={{ gap: '1rem' }}>\n              {socialLinks.map((social, index) => {\n                const IconComponent = social.icon;\n                return (\n                  <a \n                    key={index}\n                    href={social.href} \n                    className=\"social-link rounded transition-colors\"\n                    style={{\n                      width: '2.5rem',\n                      height: '2.5rem',\n                      backgroundColor: 'rgba(255, 215, 0, 0.1)',\n                      display: 'flex',\n                      alignItems: 'center',\n                      justifyContent: 'center',\n                      color: 'var(--primary-gold)'\n                    }}\n                  >\n                    <IconComponent className=\"w-5 h-5\" />\n                  </a>\n                );\n              })}\n            </div>\n          </div>\n\n          <div>\n            <h3 className=\"text-lg font-bold mb-6\">Quick Links</h3>\n            <ul className=\"space-y-3\">\n              {quickLinks.map((link, index) => (\n                <li key={index}>\n                  <button \n                    onClick={() => scrollToSection(link.section)}\n                    className=\"text-gray-300 hover:text-gold transition-colors\"\n                  >\n                    {link.name}\n                  </button>\n                </li>\n              ))}\n            </ul>\n          </div>\n\n          <div>\n            <h3 className=\"text-lg font-bold mb-6\">Legal</h3>\n            <ul className=\"space-y-3\">\n              {legalLinks.map((link, index) => (\n                <li key={index}>\n                  <a \n                    href={link.href} \n                    className=\"text-gray-300 hover:text-gold transition-colors\"\n                  >\n                    {link.name}\n                  </a>\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n\n        <div className=\"border-t border-gray-600 mt-12 pt-8 text-center\">\n          <p className=\"text-gray-400\">\n            © 2024 FXBOT. All rights reserved. | Registered in St. Vincent & the Grenadines (HE-543752)\n          </p>\n          <p className=\"text-sm text-gray-500 mt-2\">\n            Risk Warning: Trading Forex involves substantial risk and may not be suitable for all investors.\n          </p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":4216},"client/src/components/HeroSection.jsx":{"content":"import ROICalculator from './ROICalculator';\n\nexport default function HeroSection() {\n  const scrollToPackages = () => {\n    const element = document.getElementById('packages');\n    if (element) {\n      element.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  return (\n    <section id=\"home\" className=\"section min-h-screen flex items-center relative overflow-hidden\" style={{ paddingTop: '4rem' }}>\n      {/* Background Image */}\n      <div className=\"absolute\" style={{ \n        top: 0, left: 0, right: 0, bottom: 0, \n        opacity: 0.2, zIndex: 1 \n      }}>\n        <img \n          src=\"https://images.unsplash.com/photo-1611974789855-9c2a0a7236a3?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=80\" \n          alt=\"Financial charts and trading screens\" \n          className=\"w-full h-full\"\n          style={{ width: '100%', height: '100%', objectFit: 'cover' }}\n        />\n      </div>\n      \n      <div className=\"container relative\" style={{ zIndex: 10 }}>\n        <div className=\"grid grid-cols-1 gap-8 items-center hero-grid\">\n          <div className=\"text-center hero-text animate-fadeIn\">\n            <h1 className=\"text-5xl font-bold mb-6 hero-title\">\n              <span className=\"text-primary\">Grow Your</span>\n              <span className=\"text-gold block\">Wealth</span>\n              <span className=\"text-primary\">Not Just Your Hopes</span>\n            </h1>\n            <p className=\"text-xl text-secondary mb-8 hero-subtitle\">\n              Choose a Forex Package with <span className=\"text-gold font-semibold\">FXBOT</span> That Works While You Sleep — With Full Transparency & Weekly Profits.\n            </p>\n            <div className=\"hero-buttons flex flex-col gap-4 justify-center\">\n              <button \n                onClick={scrollToPackages}\n                className=\"btn btn-primary btn-lg gradient-gold font-semibold\"\n              >\n                Start Investing\n              </button>\n              <button \n                onClick={scrollToPackages}\n                className=\"btn btn-secondary btn-lg font-semibold\"\n                style={{ borderColor: 'var(--primary-gold)', color: 'var(--primary-gold)' }}\n              >\n                View Plans\n              </button>\n            </div>\n          </div>\n          \n          <div className=\"flex justify-center animate-slideIn\">\n            <ROICalculator />\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2492},"client/src/components/HowItWorks.jsx":{"content":"export default function HowItWorks() {\n  const steps = [\n    {\n      number: 1,\n      title: \"Register & KYC\",\n      description: \"Sign up on our platform and complete your KYC verification to activate your account securely.\"\n    },\n    {\n      number: 2,\n      title: \"Choose Plan\",\n      description: \"Select from our range of tailored Forex investment packages based on your goals and risk profile.\"\n    },\n    {\n      number: 3,\n      title: \"Fund Account\",\n      description: \"Deposit your investment amount using our secure payment gateways with multiple options.\"\n    },\n    {\n      number: 4,\n      title: \"Receive ROI\",\n      description: \"Start earning returns as per your chosen plan with fixed ROI or profit sharing distributions.\"\n    },\n    {\n      number: 5,\n      title: \"Withdraw\",\n      description: \"Withdraw your profits or matured funds directly to your bank account as per your plan's policy.\"\n    }\n  ];\n\n  return (\n    <section id=\"how-it-works\" className=\"section\">\n      <div className=\"container\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-4xl font-bold mb-4\">How It <span className=\"text-gold\">Works</span></h2>\n          <p className=\"text-xl text-secondary\">Simple steps to start your Forex investment journey</p>\n        </div>\n        \n        <div className=\"grid grid-cols-1 gap-8 how-it-works-grid\">\n          {steps.map((step, index) => (\n            <div \n              key={index}\n              className=\"text-center relative animate-fadeIn step-card\"\n              style={{ animationDelay: `${index * 0.2}s` }}\n            >\n              <div className=\"step-number gradient-gold rounded-full flex items-center justify-center mx-auto mb-6 text-2xl font-bold\" style={{\n                width: '5rem',\n                height: '5rem',\n                color: 'var(--dark-bg)'\n              }}>\n                {step.number}\n              </div>\n              <h3 className=\"text-xl font-bold mb-4\">{step.title}</h3>\n              <p className=\"text-secondary\">{step.description}</p>\n              \n              {/* Connector line (hidden on mobile, shown on desktop except for last step) */}\n              {index < steps.length - 1 && (\n                <div className=\"step-connector\" style={{\n                  display: 'none',\n                  position: 'absolute',\n                  top: '2.5rem',\n                  right: '-1rem',\n                  width: '2rem',\n                  height: '2px',\n                  backgroundColor: 'var(--primary-gold)',\n                  transform: 'translateX(100%)'\n                }}></div>\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2703},"client/src/components/InvestmentPackages.jsx":{"content":"import AffiliateCalculator from './AffiliateCalculator';\n\nexport default function InvestmentPackages() {\n  const packages = [\n    {\n      name: \"FS Income (FixSix)\",\n      badge: \"6% Monthly\",\n      color: \"gold\",\n      details: {\n        minimum: \"$250\",\n        return: \"6% Monthly until 2x\",\n        duration: \"~17 months\",\n        payout: \"Monthly\"\n      },\n      description: \"Earn a fixed 6% monthly return on your invested capital until your investment doubles (2x). Backed by company reserves and trading profits.\",\n      buttonClass: \"bg-gradient-to-r from-gold to-gold-dark text-dark-bg\"\n    },\n    {\n      name: \"SmartLine Income\",\n      badge: \"5 Levels\",\n      color: \"blue-custom\",\n      levels: [\n        { level: 1, percentage: \"1.5%\" },\n        { level: 2, percentage: \"1.0%\" },\n        { level: 3, percentage: \"0.75%\" },\n        { level: 4, percentage: \"0.50%\" },\n        { level: 5, percentage: \"0.25%\" }\n      ],\n      description: \"Multi-level affiliate income distribution plan to reward partners for expanding our investor community across 5 levels.\",\n      buttonClass: \"bg-gradient-to-r from-blue-custom to-blue-dark text-white\"\n    },\n    {\n      name: \"DRI Income\",\n      badge: \"6% Direct\",\n      color: \"green-400\",\n      details: {\n        commission: \"6% Direct Referral\",\n        frequency: \"Every Investment\",\n        cap: \"Unlimited\"\n      },\n      example: \"$1,000 referral = $60 commission\",\n      description: \"Earn 6% commission on every investment made by your direct referrals. Commission credited for each new investment, no limit on referrals.\",\n      buttonClass: \"bg-gradient-to-r from-green-400 to-green-500 text-white\"\n    },\n    {\n      name: \"DAS Income\",\n      badge: \"Monthly Salary\",\n      color: \"purple-400\",\n      tiers: [\n        { name: \"Tier 1\", amount: \"$100/month\", requirements: \"5 referrals, $10K volume, 30 days\" },\n        { name: \"Tier 2\", amount: \"$300/month\", requirements: \"10 referrals, $20K volume, 60 days\" },\n        { name: \"Tier 3\", amount: \"$1000/month\", requirements: \"15 referrals, $50K volume, 90 days\" }\n      ],\n      description: \"Monthly salary income based on direct referral performance and business generation. Fixed rewards for committed promoters.\",\n      buttonClass: \"bg-gradient-to-r from-purple-400 to-purple-500 text-white\"\n    }\n  ];\n\n  return (\n    <section id=\"packages\" className=\"section\">\n      <div className=\"container\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-4xl font-bold mb-4\">Investment <span className=\"text-gold\">Packages</span></h2>\n          <p className=\"text-xl text-secondary\">Diversified Forex investment plans tailored to different risk profiles</p>\n        </div>\n        \n        {/* Package Grid */}\n        <div className=\"grid grid-cols-1 gap-8 mb-16 package-grid\">\n          {packages.map((pkg, index) => (\n            <div \n              key={index}\n              className=\"package-card animate-fadeIn\"\n              style={{ \n                animationDelay: `${index * 0.1}s`,\n                borderColor: pkg.color === 'gold' ? 'rgba(255, 215, 0, 0.2)' : \n                            pkg.color === 'blue-custom' ? 'rgba(59, 130, 246, 0.2)' :\n                            pkg.color === 'green-400' ? 'rgba(34, 197, 94, 0.2)' :\n                            'rgba(168, 85, 247, 0.2)'\n              }}\n            >\n              <div className=\"flex items-center justify-between mb-6\">\n                <h3 className=\"text-2xl font-bold\" style={{\n                  color: pkg.color === 'gold' ? 'var(--primary-gold)' : \n                        pkg.color === 'blue-custom' ? '#3b82f6' :\n                        pkg.color === 'green-400' ? '#22c55e' :\n                        '#a855f7'\n                }}>{pkg.name}</h3>\n                <span className=\"px-3 py-1 rounded-full text-sm font-semibold\" style={{\n                  backgroundColor: pkg.color === 'gold' ? 'rgba(255, 215, 0, 0.1)' : \n                                  pkg.color === 'blue-custom' ? 'rgba(59, 130, 246, 0.1)' :\n                                  pkg.color === 'green-400' ? 'rgba(34, 197, 94, 0.1)' :\n                                  'rgba(168, 85, 247, 0.1)',\n                  color: pkg.color === 'gold' ? 'var(--primary-gold)' : \n                        pkg.color === 'blue-custom' ? '#3b82f6' :\n                        pkg.color === 'green-400' ? '#22c55e' :\n                        '#a855f7'\n                }}>\n                  {pkg.badge}\n                </span>\n              </div>\n              \n              <div className=\"package-details mb-6\" style={{ display: 'flex', flexDirection: 'column', gap: '1rem' }}>\n                {pkg.details && Object.entries(pkg.details).map(([key, value]) => (\n                  <div key={key} className=\"flex justify-between\">\n                    <span className=\"text-secondary capitalize\">{key.replace(/([A-Z])/g, ' $1')}:</span>\n                    <span className=\"font-semibold\" style={{\n                      color: key === 'return' && pkg.color === 'gold' ? 'var(--primary-gold)' : 'inherit'\n                    }}>{value}</span>\n                  </div>\n                ))}\n                \n                {pkg.levels && pkg.levels.map((level) => (\n                  <div key={level.level} className=\"flex justify-between\">\n                    <span className=\"text-secondary\">Level {level.level}:</span>\n                    <span className=\"font-semibold\" style={{\n                      color: level.level === 1 && pkg.color === 'blue-custom' ? '#3b82f6' : 'inherit'\n                    }}>\n                      {level.percentage}\n                    </span>\n                  </div>\n                ))}\n                \n                {pkg.tiers && pkg.tiers.map((tier, tierIndex) => (\n                  <div key={tierIndex} className=\"p-3 rounded\" style={{\n                    backgroundColor: pkg.color === 'purple-400' ? 'rgba(168, 85, 247, 0.1)' : 'rgba(255, 255, 255, 0.05)'\n                  }}>\n                    <div className=\"font-semibold\" style={{\n                      color: pkg.color === 'purple-400' ? '#a855f7' : 'var(--primary-gold)'\n                    }}>{tier.name}: {tier.amount}</div>\n                    <div className=\"text-sm text-secondary\">{tier.requirements}</div>\n                  </div>\n                ))}\n                \n                {pkg.example && (\n                  <div className=\"p-3 rounded\" style={{\n                    backgroundColor: pkg.color === 'green-400' ? 'rgba(34, 197, 94, 0.1)' : 'rgba(255, 255, 255, 0.05)'\n                  }}>\n                    <div className=\"text-sm text-secondary\">Example:</div>\n                    <div className=\"font-semibold\" style={{\n                      color: pkg.color === 'green-400' ? '#22c55e' : 'var(--primary-gold)'\n                    }}>{pkg.example}</div>\n                  </div>\n                )}\n              </div>\n              \n              <p className=\"text-secondary mb-6\">{pkg.description}</p>\n              \n              <button className=\"btn w-full font-semibold\" style={{\n                background: pkg.color === 'gold' ? 'linear-gradient(135deg, var(--primary-gold), var(--hover-gold))' :\n                           pkg.color === 'blue-custom' ? 'linear-gradient(135deg, #3b82f6, #1d4ed8)' :\n                           pkg.color === 'green-400' ? 'linear-gradient(135deg, #22c55e, #16a34a)' :\n                           'linear-gradient(135deg, #a855f7, #7c3aed)',\n                color: pkg.color === 'gold' ? 'var(--dark-bg)' : 'white'\n              }}>\n                Choose Plan\n              </button>\n            </div>\n          ))}\n        </div>\n\n        {/* Re-Top-Up Rule Note */}\n        <div className=\"card p-6 mb-8\" style={{ borderColor: 'rgba(255, 215, 0, 0.2)' }}>\n          <h3 className=\"text-xl font-bold text-gold mb-4\">Important Notice</h3>\n          <div className=\"notice-content text-secondary\" style={{ display: 'flex', flexDirection: 'column', gap: '0.5rem' }}>\n            <p><strong>Re-Top-Up Rule:</strong> When a user's investment package reaches 2x returns (full payout completed), they must re-top-up their account with a minimum of $250 to continue receiving future ROI payouts and stay eligible for referral rewards.</p>\n            <p><strong>Lock Period:</strong> All packages are locked for a minimum of 6 months to ensure optimal trading strategies.</p>\n          </div>\n        </div>\n\n        {/* Affiliate Income Calculator */}\n        <AffiliateCalculator />\n      </div>\n    </section>\n  );\n}\n","size_bytes":8550},"client/src/components/LegalSection.jsx":{"content":"import { FileText, Shield, AlertTriangle, UserCheck, CreditCard, Scale } from 'lucide-react';\n\nexport default function LegalSection() {\n  const legalPages = [\n    {\n      icon: FileText,\n      title: \"Terms & Conditions\",\n      description: \"Complete terms of service\",\n      href: \"#terms\"\n    },\n    {\n      icon: Shield,\n      title: \"Privacy Policy\",\n      description: \"How we protect your data\",\n      href: \"#privacy\"\n    },\n    {\n      icon: AlertTriangle,\n      title: \"Risk Disclaimer\",\n      description: \"Investment risk information\",\n      href: \"#risk\"\n    },\n    {\n      icon: UserCheck,\n      title: \"AML & KYC Policy\",\n      description: \"Compliance procedures\",\n      href: \"#aml\"\n    },\n    {\n      icon: CreditCard,\n      title: \"Refund Policy\",\n      description: \"Withdrawal procedures\",\n      href: \"#refund\"\n    },\n    {\n      icon: Scale,\n      title: \"Compliance\",\n      description: \"Regulatory information\",\n      href: \"#compliance\"\n    }\n  ];\n\n  return (\n    <section className=\"section\">\n      <div className=\"container\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-4xl font-bold mb-4\">Legal <span className=\"text-gold\">Information</span></h2>\n          <p className=\"text-xl text-secondary\">Important legal documents and policies</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 gap-6 legal-grid\" style={{ maxWidth: '64rem', margin: '0 auto' }}>\n          {legalPages.map((page, index) => {\n            const IconComponent = page.icon;\n            return (\n              <a \n                key={index}\n                href={page.href} \n                className=\"card p-6 text-center legal-link animate-fadeIn\"\n                style={{ \n                  animationDelay: `${index * 0.1}s`,\n                  border: '1px solid rgba(255, 215, 0, 0.1)',\n                  textDecoration: 'none',\n                  color: 'inherit',\n                  display: 'block',\n                  transition: 'all 0.3s ease'\n                }}\n              >\n                <IconComponent \n                  className=\"legal-icon mb-4 mx-auto text-gold transition-transform\" \n                  style={{ width: '3rem', height: '3rem' }}\n                />\n                <h3 className=\"text-lg font-semibold mb-2 transition-colors\">{page.title}</h3>\n                <p className=\"text-secondary text-sm\">{page.description}</p>\n              </a>\n            );\n          })}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2489},"client/src/components/Navigation.jsx":{"content":"import { useState, useEffect } from 'react';\nimport { Menu, X } from 'lucide-react';\nimport { Link } from 'wouter';\n\nexport default function Navigation() {\n  const [isScrolled, setIsScrolled] = useState(false);\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      setIsScrolled(window.scrollY > 100);\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  const scrollToSection = (sectionId) => {\n    const element = document.getElementById(sectionId);\n    if (element) {\n      element.scrollIntoView({ behavior: 'smooth' });\n    }\n    setIsMobileMenuOpen(false);\n  };\n\n  return (\n    <nav className={`fixed z-50 w-full transition ${\n      isScrolled ? 'bg-dark border-b' : 'bg-dark border-b'\n    }`} style={{\n      top: 0,\n      borderBottomColor: 'rgba(255, 215, 0, 0.2)'\n    }}>\n      <div className=\"container\">\n        <div className=\"flex items-center justify-between\" style={{ height: '4rem' }}>\n          <div className=\"flex items-center\">\n            <img src=\"/logo.png\" alt=\"FXBOT Logo\" style={{ height: '2.5rem', width: 'auto' }} />\n            <span className=\"text-xl font-bold text-gold\" style={{ marginLeft: '0.75rem' }}>FXBOT</span>\n          </div>\n          \n          {/* Desktop Navigation */}\n          <div className=\"desktop-nav\" style={{ display: 'flex', gap: '2rem' }}>\n            <button onClick={() => scrollToSection('home')} className=\"nav-link text-secondary transition-colors\">Home</button>\n            <button onClick={() => scrollToSection('about')} className=\"nav-link text-secondary transition-colors\">About Us</button>\n            <button onClick={() => scrollToSection('packages')} className=\"nav-link text-secondary transition-colors\">Investment Packages</button>\n            <button onClick={() => scrollToSection('how-it-works')} className=\"nav-link text-secondary transition-colors\">How It Works</button>\n            <button onClick={() => scrollToSection('faq')} className=\"nav-link text-secondary transition-colors\">FAQs</button>\n            <button onClick={() => scrollToSection('contact')} className=\"nav-link text-secondary transition-colors\">Contact</button>\n          </div>\n          \n          {/* Desktop Auth Buttons */}\n          <div className=\"auth-buttons\" style={{ display: 'flex', gap: '1rem' }}>\n            <Link href=\"/login\" className=\"btn btn-secondary\">\n              Login\n            </Link>\n            <Link href=\"/register\" className=\"btn btn-primary\">\n              Register\n            </Link>\n          </div>\n          \n          {/* Mobile Menu Button */}\n          <div className=\"mobile-menu-btn\">\n            <button \n              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n              className=\"text-primary\"\n              style={{ background: 'none', border: 'none', padding: '0.5rem' }}\n            >\n              {isMobileMenuOpen ? <X style={{ width: '1.5rem', height: '1.5rem' }} /> : <Menu style={{ width: '1.5rem', height: '1.5rem' }} />}\n            </button>\n          </div>\n        </div>\n        \n        {/* Mobile Menu */}\n        {isMobileMenuOpen && (\n          <div className=\"mobile-menu bg-card border-t\" style={{ borderTopColor: 'rgba(255, 215, 0, 0.2)' }}>\n            <div className=\"px-2 py-4\" style={{ display: 'flex', flexDirection: 'column', gap: '0.25rem' }}>\n              <button onClick={() => scrollToSection('home')} className=\"mobile-nav-link block w-full text-left px-4 py-2 text-secondary transition-colors\">Home</button>\n              <button onClick={() => scrollToSection('about')} className=\"mobile-nav-link block w-full text-left px-4 py-2 text-secondary transition-colors\">About Us</button>\n              <button onClick={() => scrollToSection('packages')} className=\"mobile-nav-link block w-full text-left px-4 py-2 text-secondary transition-colors\">Investment Packages</button>\n              <button onClick={() => scrollToSection('how-it-works')} className=\"mobile-nav-link block w-full text-left px-4 py-2 text-secondary transition-colors\">How It Works</button>\n              <button onClick={() => scrollToSection('faq')} className=\"mobile-nav-link block w-full text-left px-4 py-2 text-secondary transition-colors\">FAQs</button>\n              <button onClick={() => scrollToSection('contact')} className=\"mobile-nav-link block w-full text-left px-4 py-2 text-secondary transition-colors\">Contact</button>\n              <div className=\"pt-4\" style={{ display: 'flex', flexDirection: 'column', gap: '0.5rem' }}>\n                <Link href=\"/login\" className=\"btn btn-secondary w-full\">\n                  Login\n                </Link>\n                <Link href=\"/register\" className=\"btn btn-primary w-full\">\n                  Register\n                </Link>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":4965},"client/src/components/ROICalculator.jsx":{"content":"import { useState, useEffect } from 'react';\n\nexport default function ROICalculator() {\n  const [amount, setAmount] = useState(1000);\n  const [plan, setPlan] = useState('fs');\n  const [returns, setReturns] = useState(60);\n\n  const plans = {\n    fs: { name: \"FS Income (6% Monthly)\", rate: 0.06 },\n    smart: { name: \"SmartLine Income\", rate: 0.015 },\n    dri: { name: \"Direct Referral Income\", rate: 0.06 }\n    //das: { name: \"Direct Achiever Salary\", rate: 0.0 }\n  };\n\n  useEffect(() => {\n    const selectedPlan = plans[plan];\n    if (selectedPlan) {\n      const calculatedReturns = amount * selectedPlan.rate;\n      setReturns(calculatedReturns);\n    }\n  }, [amount, plan]);\n\n  return (\n    <div className=\"calc-container bg-card p-8 rounded-lg border w-full\" style={{ \n      maxWidth: '28rem',\n      backgroundColor: 'rgba(26, 26, 26, 0.8)',\n      backdropFilter: 'blur(4px)',\n      borderColor: 'rgba(255, 215, 0, 0.2)'\n    }}>\n      <h3 className=\"text-2xl font-bold text-gold mb-6 text-center\">Live ROI Calculator</h3>\n      <div className=\"calc-form\" style={{ display: 'flex', flexDirection: 'column', gap: '1rem' }}>\n        <div>\n          <label className=\"block text-sm font-medium mb-2\">Investment Amount ($)</label>\n          <input \n            type=\"number\" \n            value={amount}\n            onChange={(e) => setAmount(Number(e.target.value) || 0)}\n            className=\"form-input\"\n          />\n        </div>\n        <div>\n          <label className=\"block text-sm font-medium mb-2\">Plan</label>\n          <select \n            value={plan}\n            onChange={(e) => setPlan(e.target.value)}\n            className=\"form-input\"\n          >\n            {Object.entries(plans).map(([key, planData]) => (\n              <option key={key} value={key}>\n                {planData.name}\n              </option>\n            ))}\n          </select>\n        </div>\n        <div className=\"calc-results bg-secondary p-4 rounded border\" style={{ \n          borderColor: 'rgba(255, 215, 0, 0.2)' \n        }}>\n          <div className=\"text-center\">\n            <div className=\"text-sm text-muted\">Monthly Returns</div>\n            <div className=\"text-2xl font-bold text-gold\">\n              ${returns.toFixed(2)}\n            </div>\n            <div className=\"text-sm text-gray-400 mt-1\">\n              Based on {plans[plan].name}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2425},"client/src/components/TestimonialsSection.jsx":{"content":"import { Star } from 'lucide-react';\n\nexport default function TestimonialsSection() {\n  const testimonials = [\n    {\n      name: \"John Smith\",\n      review: \"FXBOT has been delivering consistent returns for over 8 months. Their transparency and professional approach gives me complete confidence in my investments.\",\n      image: \"https://images.unsplash.com/photo-1633332755192-727a05c4013d?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=100&h=100\"\n    },\n    {\n      name: \"Sarah Johnson\",\n      review: \"The FS Income plan is exactly what I needed - reliable 6% monthly returns. The team's expertise in forex trading really shows in the results.\",\n      image: \"https://images.unsplash.com/photo-1494790108755-2616c5e94cfa?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=100&h=100\"\n    },\n    {\n      name: \"Michael Brown\",\n      review: \"I've tried many investment platforms, but FXBOT stands out with their professional approach and consistent performance. Highly recommended!\",\n      image: \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=100&h=100\"\n    }\n  ];\n\n  return (\n    <section className=\"section bg-secondary\">\n      <div className=\"container\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-4xl font-bold mb-4\">What Our <span className=\"text-gold\">Investors</span> Say</h2>\n          <p className=\"text-xl text-secondary\">Real experiences from our satisfied clients</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 gap-8 testimonials-grid\">\n          {testimonials.map((testimonial, index) => (\n            <div \n              key={index}\n              className=\"card p-8 border animate-fadeIn\"\n              style={{ \n                animationDelay: `${index * 0.2}s`,\n                borderColor: 'rgba(255, 215, 0, 0.1)' \n              }}\n            >\n              <div className=\"flex items-center mb-6\" style={{ gap: '1rem' }}>\n                <img \n                  src={testimonial.image} \n                  alt={`${testimonial.name} testimonial`} \n                  className=\"rounded-full\"\n                  style={{ \n                    width: '4rem', \n                    height: '4rem', \n                    objectFit: 'cover' \n                  }}\n                />\n                <div>\n                  <h4 className=\"font-bold\">{testimonial.name}</h4>\n                  <div className=\"flex text-gold\">\n                    {[...Array(5)].map((_, i) => (\n                      <Star key={i} style={{ width: '1rem', height: '1rem', fill: 'currentColor' }} />\n                    ))}\n                  </div>\n                </div>\n              </div>\n              <p className=\"text-secondary\" style={{ fontStyle: 'italic' }}>\"{testimonial.review}\"</p>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3020},"client/src/hooks/use-mobile.js":{"content":"import React from \"react\";\n\nconst MOBILE_BREAKPOINT = 768;\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState(undefined);\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`);\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);\n    };\n    mql.addEventListener(\"change\", onChange);\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);\n    return () => mql.removeEventListener(\"change\", onChange);\n  }, []);\n\n  return !!isMobile;\n}","size_bytes":549},"client/src/hooks/use-toast.js":{"content":"import React from \"react\";\n\nconst TOAST_LIMIT = 1;\nconst TOAST_REMOVE_DELAY = 1000000;\n\nlet count = 0;\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_VALUE;\n  return count.toString();\n}\n\nconst toastTimeouts = new Map();\n\nconst addToRemoveQueue = (toastId) => {\n  if (toastTimeouts.has(toastId)) {\n    return;\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId);\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    });\n  }, TOAST_REMOVE_DELAY);\n\n  toastTimeouts.set(toastId, timeout);\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      };\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      };\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action;\n\n      if (toastId) {\n        addToRemoveQueue(toastId);\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id);\n        });\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      };\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        };\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      };\n  }\n};\n\nconst listeners = [];\n\nlet memoryState = { toasts: [] };\n\nfunction dispatch(action) {\n  memoryState = reducer(memoryState, action);\n  listeners.forEach((listener) => {\n    listener(memoryState);\n  });\n}\n\nfunction toast({ ...props }) {\n  const id = genId();\n\n  const update = (props) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    });\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id });\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss();\n      },\n    },\n  });\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  };\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState(memoryState);\n\n  React.useEffect(() => {\n    listeners.push(setState);\n    return () => {\n      const index = listeners.indexOf(setState);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    };\n  }, [state]);\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  };\n}\n\nexport { useToast, toast };","size_bytes":2787},"client/src/lib/queryClient.js":{"content":"import { QueryClient } from \"@tanstack/react-query\";\n\n// Create a client\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: async ({ queryKey }) => {\n        const token = localStorage.getItem('token');\n        const headers = {\n          'Content-Type': 'application/json',\n        };\n        \n        if (token) {\n          headers['Authorization'] = `Bearer ${token}`;\n        }\n        \n        const res = await fetch(queryKey[0], {\n          headers,\n          credentials: 'include'\n        });\n        \n        if (!res.ok) {\n          const error = await res.text();\n          throw new Error(`${res.status}: ${error || \"An error occurred\"}`);\n        }\n        return res.json();\n      },\n      retry: false,\n      refetchOnWindowFocus: false,\n    },\n  },\n});\n\nexport default queryClient;\n\n// Helper function for API requests\nexport const apiRequest = async (url, options = {}) => {\n  const response = await fetch(url, {\n    headers: {\n      'Content-Type': 'application/json',\n      ...options.headers,\n    },\n    ...options,\n  });\n\n  if (!response.ok) {\n    const error = await response.text();\n    throw new Error(error || 'Request failed');\n  }\n\n  return response.json();\n};","size_bytes":1225},"client/src/lib/utils.js":{"content":"import { clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs) {\n  return twMerge(clsx(inputs));\n}","size_bytes":137},"client/src/pages/Home.jsx":{"content":"import Navigation from \"@/components/Navigation\";\nimport HeroSection from \"@/components/HeroSection\";\nimport BenefitsSection from \"@/components/BenefitsSection\";\nimport InvestmentPackages from \"@/components/InvestmentPackages\";\nimport AboutSection from \"@/components/AboutSection\";\nimport HowItWorks from \"@/components/HowItWorks\";\nimport TestimonialsSection from \"@/components/TestimonialsSection\";\nimport FAQSection from \"@/components/FAQSection\";\nimport ContactSection from \"@/components/ContactSection\";\nimport Footer from \"@/components/Footer\";\n\nexport default function Home() {\n  return (\n    <div className=\"min-h-screen bg-dark-bg text-white font-inter\">\n      <Navigation />\n      <HeroSection />\n      <BenefitsSection />\n      <InvestmentPackages />\n      <AboutSection />\n      <HowItWorks />\n      <TestimonialsSection />\n      <FAQSection />\n      <ContactSection />\n      \n      {/* Legal Pages Section */}\n      <section className=\"py-20\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold mb-4\">Legal <span className=\"text-gold\">Information</span></h2>\n            <p className=\"text-xl text-gray-300\">Important legal documents and policies</p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6 max-w-4xl mx-auto\">\n            <a href=\"#terms\" className=\"bg-dark-card p-6 rounded-xl border border-gold/10 hover:border-gold/30 transition-colors text-center\">\n              <i className=\"fas fa-file-contract text-3xl text-gold mb-4\"></i>\n              <h3 className=\"text-lg font-semibold mb-2\">Terms & Conditions</h3>\n              <p className=\"text-gray-300 text-sm\">Complete terms of service</p>\n            </a>\n            <a href=\"#privacy\" className=\"bg-dark-card p-6 rounded-xl border border-gold/10 hover:border-gold/30 transition-colors text-center\">\n              <i className=\"fas fa-shield-alt text-3xl text-gold mb-4\"></i>\n              <h3 className=\"text-lg font-semibold mb-2\">Privacy Policy</h3>\n              <p className=\"text-gray-300 text-sm\">How we protect your data</p>\n            </a>\n            <a href=\"#risk\" className=\"bg-dark-card p-6 rounded-xl border border-gold/10 hover:border-gold/30 transition-colors text-center\">\n              <i className=\"fas fa-exclamation-triangle text-3xl text-gold mb-4\"></i>\n              <h3 className=\"text-lg font-semibold mb-2\">Risk Disclaimer</h3>\n              <p className=\"text-gray-300 text-sm\">Investment risk information</p>\n            </a>\n            <a href=\"#aml\" className=\"bg-dark-card p-6 rounded-xl border border-gold/10 hover:border-gold/30 transition-colors text-center\">\n              <i className=\"fas fa-user-shield text-3xl text-gold mb-4\"></i>\n              <h3 className=\"text-lg font-semibold mb-2\">AML & KYC Policy</h3>\n              <p className=\"text-gray-300 text-sm\">Compliance procedures</p>\n            </a>\n            <a href=\"#refund\" className=\"bg-dark-card p-6 rounded-xl border border-gold/10 hover:border-gold/30 transition-colors text-center\">\n              <i className=\"fas fa-money-bill-wave text-3xl text-gold mb-4\"></i>\n              <h3 className=\"text-lg font-semibold mb-2\">Refund Policy</h3>\n              <p className=\"text-gray-300 text-sm\">Withdrawal procedures</p>\n            </a>\n            <a href=\"#compliance\" className=\"bg-dark-card p-6 rounded-xl border border-gold/10 hover:border-gold/30 transition-colors text-center\">\n              <i className=\"fas fa-balance-scale text-3xl text-gold mb-4\"></i>\n              <h3 className=\"text-lg font-semibold mb-2\">Compliance</h3>\n              <p className=\"text-gray-300 text-sm\">Regulatory information</p>\n            </a>\n          </div>\n        </div>\n      </section>\n      \n      <Footer />\n    </div>\n  );\n}\n","size_bytes":3832},"server/auth.js":{"content":"import jwt from 'jsonwebtoken';\n\n// Generate JWT token\nexport const generateToken = (userId) => {\n  return jwt.sign({ userId }, process.env.JWT_SECRET, {\n    expiresIn: '7d', // Token expires in 7 days\n  });\n};\n\n// Verify JWT token\nexport const verifyToken = (token) => {\n  try {\n    return jwt.verify(token, process.env.JWT_SECRET);\n  } catch (error) {\n    return null;\n  }\n};\n\n// Authentication middleware\nexport const authenticateToken = async (req, res, next) => {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN\n\n  if (!token) {\n    return res.status(401).json({ error: 'Access token is required' });\n  }\n\n  const decoded = verifyToken(token);\n  if (!decoded) {\n    return res.status(403).json({ error: 'Invalid or expired token' });\n  }\n\n  req.userId = decoded.userId;\n  next();\n};\n\n// Admin middleware\nexport const requireAdmin = async (req, res, next) => {\n  try {\n    const { getStorage } = await import('./storage.js');\n    const storage = getStorage();\n    \n    const user = await storage.getUserById(req.userId);\n    if (!user || !user.isAdmin) {\n      return res.status(403).json({ error: 'Admin access required' });\n    }\n    \n    req.adminUser = user;\n    next();\n  } catch (error) {\n    res.status(500).json({ error: 'Authorization check failed' });\n  }\n};","size_bytes":1347},"server/database.js":{"content":"import mongoose from 'mongoose';\n\nconst connectDB = async () => {\n  try {\n    const conn = await mongoose.connect(process.env.MONGODB_URI);\n    console.log(`MongoDB Connected: ${conn.connection.host}`);\n  } catch (error) {\n    console.error('Database connection error:', error);\n    process.exit(1);\n  }\n};\n\n// User Schema\nconst userSchema = new mongoose.Schema({\n  sponsorId: {\n    type: String,\n    required: true\n  },\n  ownSponsorId: {\n    type: String,\n    unique: true,\n    required: true\n  },\n  firstName: {\n    type: String,\n    required: true\n  },\n  lastName: {\n    type: String,\n    required: true\n  },\n  mobile: {\n    type: String,\n    required: true,\n    validate: {\n      validator: function(v) {\n        return /^\\d{10}$/.test(v);\n      },\n      message: 'Mobile number must be exactly 10 digits'\n    }\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n    lowercase: true\n  },\n  password: {\n    type: String,\n    required: true\n  },\n  role: {\n    type: String,\n    enum: ['user', 'admin'],\n    default: 'user'\n  },\n  isActive: {\n    type: Boolean,\n    default: true\n  },\n  referralCount: {\n    type: Number,\n    default: 0\n  },\n  parent: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    default: null\n  },\n  children: [{\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User'\n  }],\n  level1Count: { type: Number, default: 0 },\n  level2Count: { type: Number, default: 0 },\n  level3Count: { type: Number, default: 0 },\n  level4Count: { type: Number, default: 0 },\n  level5Count: { type: Number, default: 0 },\n  totalEarnings: { type: Number, default: 0 },\n  level1Earnings: { type: Number, default: 0 },\n  level2Earnings: { type: Number, default: 0 },\n  level3Earnings: { type: Number, default: 0 },\n  level4Earnings: { type: Number, default: 0 },\n  level5Earnings: { type: Number, default: 0 },\n  \n  // Password Reset\n  resetToken: { type: String, default: null },\n  resetTokenExpiry: { type: Date, default: null },\n  \n  // DAS program fields\n  dasEnrollmentDate: { type: Date, default: null },\n  dasCountdownStartDate: { type: Date, default: null },\n  isEnrolledInDas: { type: Boolean, default: false },\n  totalInvestmentVolume: { type: Number, default: 0 },\n  dasTask1Completed: { type: Boolean, default: false },\n  dasTask2Completed: { type: Boolean, default: false },\n  dasTask3Completed: { type: Boolean, default: false },\n  dasTask1CompletedAt: { type: Date, default: null },\n  dasTask2CompletedAt: { type: Date, default: null },\n  dasTask3CompletedAt: { type: Date, default: null },\n  dasMonthlyEarnings: { type: Number, default: 0 }\n}, {\n  timestamps: true\n});\n\n// Contact Schema\nconst contactSchema = new mongoose.Schema({\n  firstName: {\n    type: String,\n    required: true\n  },\n  lastName: {\n    type: String,\n    required: true\n  },\n  email: {\n    type: String,\n    required: true\n  },\n  subject: {\n    type: String,\n    required: true\n  },\n  message: {\n    type: String,\n    required: true\n  }\n}, {\n  timestamps: true\n});\n\n// Newsletter Schema\nconst newsletterSchema = new mongoose.Schema({\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n    lowercase: true\n  }\n}, {\n  timestamps: true\n});\n\n// Investment Schema for tracking volume\nconst investmentSchema = new mongoose.Schema({\n  userId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true\n  },\n  amount: {\n    type: Number,\n    required: true\n  },\n  packageType: {\n    type: String,\n    default: 'standard'\n  },\n  status: {\n    type: String,\n    enum: ['active', 'completed', 'cancelled'],\n    default: 'active'\n  }\n}, {\n  timestamps: true\n});\n\n// Deposit Schema\nconst depositSchema = new mongoose.Schema({\n  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },\n  amount: { type: Number, required: true, min: 250 },\n  walletType: { type: String, required: true },\n  walletAddress: { type: String, required: true },\n  paymentMethod: { type: String, required: true },\n  status: { \n    type: String, \n    enum: ['pending', 'confirmed', 'rejected'], \n    default: 'pending' \n  },\n  createdAt: { type: Date, default: Date.now },\n  updatedAt: { type: Date, default: Date.now },\n  adminNotes: { type: String }\n});\n\nexport const User = mongoose.model('User', userSchema);\nexport const Contact = mongoose.model('Contact', contactSchema);\nexport const Newsletter = mongoose.model('Newsletter', newsletterSchema);\nexport const Investment = mongoose.model('Investment', investmentSchema);\nexport const Deposit = mongoose.model('Deposit', depositSchema);\n\nexport default connectDB;","size_bytes":4561},"server/referralService.js":{"content":"import { User } from './database.js';\n\n// Reward percentages for each level\nconst REWARD_RATES = {\n  1: 0.015, // 1.5%\n  2: 0.010, // 1.0%\n  3: 0.0075, // 0.75%\n  4: 0.005, // 0.50%\n  5: 0.0025 // 0.25%\n};\n\nclass ReferralService {\n  \n  // Update referral counts when a new user is registered\n  async updateReferralCounts(newUserId) {\n    try {\n      const newUser = await User.findById(newUserId).populate('parent');\n      if (!newUser || !newUser.parent) return;\n\n      let currentParent = newUser.parent;\n      let level = 1;\n\n      // Traverse up the referral chain for 5 levels\n      while (currentParent && level <= 5) {\n        const updateField = `level${level}Count`;\n        \n        await User.findByIdAndUpdate(currentParent._id, {\n          $inc: { \n            [updateField]: 1,\n            referralCount: level === 1 ? 1 : 0 // Only count direct referrals in referralCount\n          }\n        });\n\n        // Get the next parent\n        const parentUser = await User.findById(currentParent._id).populate('parent');\n        currentParent = parentUser?.parent;\n        level++;\n      }\n    } catch (error) {\n      console.error('Error updating referral counts:', error);\n    }\n  }\n\n  // Calculate and distribute rewards when an investment is made\n  async distributeRewards(investorId, investmentAmount) {\n    try {\n      const investor = await User.findById(investorId).populate('parent');\n      if (!investor || !investor.parent) return;\n\n      let currentParent = investor.parent;\n      let level = 1;\n      const rewards = [];\n\n      // Traverse up the referral chain for 5 levels\n      while (currentParent && level <= 5) {\n        const rewardRate = REWARD_RATES[level];\n        const rewardAmount = investmentAmount * rewardRate;\n        \n        const levelEarningsField = `level${level}Earnings`;\n        \n        // Update parent's earnings\n        await User.findByIdAndUpdate(currentParent._id, {\n          $inc: {\n            [levelEarningsField]: rewardAmount,\n            totalEarnings: rewardAmount\n          }\n        });\n\n        rewards.push({\n          userId: currentParent._id,\n          level: level,\n          amount: rewardAmount,\n          rate: rewardRate\n        });\n\n        // Get the next parent\n        const parentUser = await User.findById(currentParent._id).populate('parent');\n        currentParent = parentUser?.parent;\n        level++;\n      }\n\n      return rewards;\n    } catch (error) {\n      console.error('Error distributing rewards:', error);\n      return [];\n    }\n  }\n\n  // Get detailed referral statistics for a user\n  async getReferralStats(userId) {\n    try {\n      const user = await User.findById(userId);\n      if (!user) {\n        return {\n          level1Count: 0, level2Count: 0, level3Count: 0, level4Count: 0, level5Count: 0,\n          totalReferrals: 0, totalEarnings: 0,\n          level1Earnings: 0, level2Earnings: 0, level3Earnings: 0, level4Earnings: 0, level5Earnings: 0\n        };\n      }\n\n      const stats = {\n        level1Count: user.level1Count || 0,\n        level2Count: user.level2Count || 0,\n        level3Count: user.level3Count || 0,\n        level4Count: user.level4Count || 0,\n        level5Count: user.level5Count || 0,\n        totalReferrals: (user.level1Count || 0) + (user.level2Count || 0) + \n                       (user.level3Count || 0) + (user.level4Count || 0) + (user.level5Count || 0),\n        totalEarnings: user.totalEarnings || 0,\n        level1Earnings: user.level1Earnings || 0,\n        level2Earnings: user.level2Earnings || 0,\n        level3Earnings: user.level3Earnings || 0,\n        level4Earnings: user.level4Earnings || 0,\n        level5Earnings: user.level5Earnings || 0\n      };\n\n      return stats;\n    } catch (error) {\n      console.error('Error getting referral stats:', error);\n      return {\n        level1Count: 0, level2Count: 0, level3Count: 0, level4Count: 0, level5Count: 0,\n        totalReferrals: 0, totalEarnings: 0,\n        level1Earnings: 0, level2Earnings: 0, level3Earnings: 0, level4Earnings: 0, level5Earnings: 0\n      };\n    }\n  }\n\n  // Get referral tree for a user (limited depth for performance)\n  async getReferralTree(userId, maxDepth = 3) {\n    try {\n      const buildTree = async (parentId, currentDepth) => {\n        if (currentDepth > maxDepth) return [];\n        \n        const children = await User.find({ parent: parentId })\n          .select('firstName lastName email ownSponsorId createdAt level1Count level2Count level3Count level4Count level5Count')\n          .lean();\n\n        const tree = [];\n        for (const child of children) {\n          const childTree = await buildTree(child._id, currentDepth + 1);\n          tree.push({\n            ...child,\n            children: childTree,\n            level: currentDepth\n          });\n        }\n        \n        return tree;\n      };\n\n      return await buildTree(userId, 1);\n    } catch (error) {\n      console.error('Error getting referral tree:', error);\n      return [];\n    }\n  }\n}\n\nexport const referralService = new ReferralService();","size_bytes":5034},"client/src/components/ModernSidebar.jsx":{"content":"import React from 'react';\nimport { useLocation } from 'wouter';\nimport { \n  LayoutDashboard, \n  User, \n  CreditCard, \n  GitBranch, \n  ArrowDownToLine, \n  ArrowUpFromLine, \n  LogOut,\n  ChevronRight\n} from 'lucide-react';\n\nconst ModernSidebar = ({ user, onLogout }) => {\n  const [location, navigate] = useLocation();\n\n  const menuItems = [\n    {\n      id: 'dashboard',\n      label: 'Dashboard',\n      icon: LayoutDashboard,\n      path: '/dashboard',\n      active: location === '/dashboard'\n    },\n    {\n      id: 'profile',\n      label: 'Profile',\n      icon: User,\n      path: '/profile',\n      active: location === '/profile'\n    },\n    {\n      id: 'fund',\n      label: 'Fund',\n      icon: CreditCard,\n      path: '/fund',\n      active: location === '/fund'\n    },\n    {\n      id: 'referral-tree',\n      label: 'Referral Tree',\n      icon: GitBranch,\n      path: '/referral-tree',\n      active: location === '/referral-tree'\n    },\n    {\n      id: 'deposit',\n      label: 'Deposit',\n      icon: ArrowDownToLine,\n      path: '/deposit',\n      active: location === '/deposit'\n    },\n    {\n      id: 'withdrawal',\n      label: 'Withdrawal',\n      icon: ArrowUpFromLine,\n      path: '/withdrawal',\n      active: location === '/withdrawal'\n    }\n  ];\n\n  const handleNavigation = (path) => {\n    navigate(path);\n  };\n\n  return (\n    <div style={{\n      width: '256px',\n      background: 'linear-gradient(180deg, #1e293b 0%, #0f172a 100%)',\n      color: 'white',\n      display: 'flex',\n      flexDirection: 'column',\n      height: '100vh',\n      boxShadow: '4px 0 20px rgba(0, 0, 0, 0.15)'\n    }}>\n      {/* Logo Section */}\n      <div style={{\n        padding: '1.5rem',\n        borderBottom: '1px solid rgba(55, 65, 81, 0.5)',\n        background: 'rgba(59, 130, 246, 0.05)'\n      }}>\n        <div style={{ display: 'flex', alignItems: 'center' }}>\n          <div style={{\n            width: '2rem',\n            height: '2rem',\n            background: 'linear-gradient(135deg, #3b82f6, #8b5cf6)',\n            borderRadius: '0.5rem',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            marginRight: '0.75rem',\n            boxShadow: '0 4px 12px rgba(59, 130, 246, 0.4)'\n          }}>\n            <span style={{ color: 'white', fontWeight: 'bold', fontSize: '0.875rem' }}>FX</span>\n          </div>\n          <span style={{ fontSize: '1.25rem', fontWeight: 'bold', letterSpacing: '0.05em' }}>FXBOT</span>\n        </div>\n      </div>\n\n      {/* Navigation Menu */}\n      <nav style={{ flex: 1, padding: '1.5rem 1rem', display: 'flex', flexDirection: 'column', gap: '0.5rem' }}>\n        {menuItems.map((item) => {\n          const IconComponent = item.icon;\n          return (\n            <button\n              key={item.id}\n              onClick={() => handleNavigation(item.path)}\n              style={{\n                width: '100%',\n                display: 'flex',\n                alignItems: 'center',\n                padding: '0.75rem 1rem',\n                borderRadius: '0.75rem',\n                textAlign: 'left',\n                transition: 'all 0.2s ease',\n                border: 'none',\n                cursor: 'pointer',\n                background: item.active \n                  ? 'linear-gradient(135deg, #3b82f6, #8b5cf6)' \n                  : 'transparent',\n                color: item.active ? 'white' : '#d1d5db',\n                boxShadow: item.active ? '0 4px 12px rgba(59, 130, 246, 0.4)' : 'none',\n                transform: item.active ? 'translateX(4px)' : 'none'\n              }}\n              onMouseEnter={(e) => {\n                if (!item.active) {\n                  e.target.style.background = 'rgba(55, 65, 81, 0.6)';\n                  e.target.style.color = 'white';\n                  e.target.style.transform = 'translateX(2px)';\n                }\n              }}\n              onMouseLeave={(e) => {\n                if (!item.active) {\n                  e.target.style.background = 'transparent';\n                  e.target.style.color = '#d1d5db';\n                  e.target.style.transform = 'none';\n                }\n              }}\n            >\n              <IconComponent style={{\n                width: '1.25rem',\n                height: '1.25rem',\n                marginRight: '0.75rem',\n                color: item.active ? 'white' : '#9ca3af'\n              }} />\n              <span style={{ fontWeight: '500', fontSize: '0.875rem' }}>{item.label}</span>\n              {item.active && (\n                <ChevronRight style={{ width: '1rem', height: '1rem', marginLeft: 'auto', color: 'white' }} />\n              )}\n            </button>\n          );\n        })}\n      </nav>\n\n      {/* User Profile Section */}\n      <div style={{\n        padding: '1rem',\n        borderTop: '1px solid rgba(55, 65, 81, 0.5)',\n        background: 'rgba(0, 0, 0, 0.2)'\n      }}>\n        <div style={{ display: 'flex', alignItems: 'center', marginBottom: '0.75rem' }}>\n          <div style={{\n            width: '2.5rem',\n            height: '2.5rem',\n            background: 'linear-gradient(135deg, #3b82f6, #8b5cf6)',\n            borderRadius: '50%',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            marginRight: '0.75rem',\n            boxShadow: '0 2px 8px rgba(59, 130, 246, 0.4)'\n          }}>\n            <span style={{ color: 'white', fontWeight: '600', fontSize: '0.875rem' }}>\n              {user?.firstName?.[0]}{user?.lastName?.[0]}\n            </span>\n          </div>\n          <div style={{ flex: 1, minWidth: 0 }}>\n            <p style={{ fontSize: '0.875rem', fontWeight: '500', color: 'white', margin: 0, overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}>\n              {user?.firstName} {user?.lastName}\n            </p>\n            <p style={{ fontSize: '0.75rem', color: '#9ca3af', margin: 0, overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}>\n              {user?.email}\n            </p>\n          </div>\n        </div>\n        \n        <button\n          onClick={onLogout}\n          style={{\n            width: '100%',\n            display: 'flex',\n            alignItems: 'center',\n            padding: '0.5rem 1rem',\n            color: '#d1d5db',\n            background: 'transparent',\n            border: 'none',\n            borderRadius: '0.5rem',\n            transition: 'all 0.2s ease',\n            cursor: 'pointer',\n            fontSize: '0.875rem'\n          }}\n          onMouseEnter={(e) => {\n            e.target.style.background = '#dc2626';\n            e.target.style.color = 'white';\n          }}\n          onMouseLeave={(e) => {\n            e.target.style.background = 'transparent';\n            e.target.style.color = '#d1d5db';\n          }}\n        >\n          <LogOut style={{ width: '1rem', height: '1rem', marginRight: '0.75rem' }} />\n          <span style={{ fontWeight: '500' }}>Logout</span>\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ModernSidebar;","size_bytes":7004},"client/src/components/Sidebar.jsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { \n  LayoutDashboard, \n  User, \n  Wallet, \n  Users, \n  DollarSign, \n  CreditCard, \n  LogOut,\n  ChevronLeft,\n  ChevronRight,\n  Target\n} from 'lucide-react';\n\nconst Sidebar = ({ user, onLogout }) => {\n  const [location, setLocation] = useLocation();\n  const [isCollapsed, setIsCollapsed] = useState(false);\n\n  const getMenuItems = () => {\n    const baseItems = [\n      { id: 'dashboard', label: 'Dashboard', icon: LayoutDashboard, path: '/dashboard' },\n      { id: 'profile', label: 'Profile', icon: User, path: '/profile' },\n      { id: 'fund', label: 'Fund', icon: Wallet, path: '/fund' },\n      { id: 'referral-tree', label: 'Referral Tree', icon: Users, path: '/referral-tree' },\n      { id: 'deposit', label: 'Deposit', icon: DollarSign, path: '/deposit' },\n      { id: 'withdrawal', label: 'Withdrawal', icon: CreditCard, path: '/withdrawal' }\n    ];\n\n    // Add admin menu for admin users\n    if (user?.isAdmin) {\n      baseItems.push({ id: 'admin', label: 'Admin Panel', icon: Target, path: '/admin' });\n    }\n\n    return baseItems;\n  };\n\n  const menuItems = getMenuItems();\n\n  const handleNavigation = (path) => {\n    setLocation(path);\n  };\n\n  const toggleSidebar = () => {\n    setIsCollapsed(!isCollapsed);\n  };\n\n  return (\n    <div style={{\n      width: isCollapsed ? '4rem' : '16rem',\n      height: '100vh',\n      background: 'linear-gradient(135deg, #1e293b 0%, #0f172a 100%)',\n      borderRight: '1px solid rgba(255, 255, 255, 0.1)',\n      display: 'flex',\n      flexDirection: 'column',\n      transition: 'width 0.3s ease',\n      position: 'relative'\n    }}>\n      {/* Logo Section */}\n      <div style={{\n        padding: isCollapsed ? '1rem 0.5rem' : '1.5rem',\n        borderBottom: '1px solid rgba(255, 255, 255, 0.1)',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: isCollapsed ? 'center' : 'flex-start',\n        minHeight: '4rem'\n      }}>\n        <div style={{\n          display: 'flex',\n          alignItems: 'center',\n          gap: '0.75rem'\n        }}>\n          <div style={{\n            width: '2rem',\n            height: '2rem',\n            background: 'linear-gradient(135deg, #f59e0b, #d97706)',\n            borderRadius: '0.5rem',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            boxShadow: '0 4px 12px rgba(245, 158, 11, 0.3)'\n          }}>\n            <Target style={{ width: '1.25rem', height: '1.25rem', color: 'white' }} />\n          </div>\n          {!isCollapsed && (\n            <div>\n              <h1 style={{\n                fontSize: '1.25rem',\n                fontWeight: 'bold',\n                color: 'white',\n                margin: 0,\n                letterSpacing: '0.02em'\n              }}>\n                FXBOT\n              </h1>\n              <p style={{\n                fontSize: '0.75rem',\n                color: '#94a3b8',\n                margin: 0,\n                fontWeight: '500'\n              }}>\n                Trading Platform\n              </p>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Collapse Button */}\n      <button\n        onClick={toggleSidebar}\n        style={{\n          position: 'absolute',\n          top: '1.25rem',\n          right: '-0.75rem',\n          width: '1.5rem',\n          height: '1.5rem',\n          backgroundColor: '#f59e0b',\n          border: 'none',\n          borderRadius: '50%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          cursor: 'pointer',\n          boxShadow: '0 2px 8px rgba(0, 0, 0, 0.2)',\n          zIndex: 10,\n          transition: 'all 0.2s ease'\n        }}\n        onMouseEnter={(e) => {\n          e.target.style.backgroundColor = '#d97706';\n          e.target.style.transform = 'scale(1.1)';\n        }}\n        onMouseLeave={(e) => {\n          e.target.style.backgroundColor = '#f59e0b';\n          e.target.style.transform = 'scale(1)';\n        }}\n      >\n        {isCollapsed ? (\n          <ChevronRight style={{ width: '0.75rem', height: '0.75rem', color: 'white' }} />\n        ) : (\n          <ChevronLeft style={{ width: '0.75rem', height: '0.75rem', color: 'white' }} />\n        )}\n      </button>\n\n      {/* User Profile */}\n      {user && (\n        <div style={{\n          padding: isCollapsed ? '1rem 0.5rem' : '1.5rem',\n          borderBottom: '1px solid rgba(255, 255, 255, 0.1)',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: isCollapsed ? 'center' : 'flex-start',\n          gap: '0.75rem'\n        }}>\n          <div style={{\n            width: '2.5rem',\n            height: '2.5rem',\n            background: 'linear-gradient(135deg, #3b82f6, #1d4ed8)',\n            borderRadius: '50%',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            fontSize: '1rem',\n            fontWeight: 'bold',\n            color: 'white',\n            boxShadow: '0 4px 12px rgba(59, 130, 246, 0.3)'\n          }}>\n            {user.firstName?.[0]}{user.lastName?.[0]}\n          </div>\n          {!isCollapsed && (\n            <div style={{ flex: 1, minWidth: 0 }}>\n              <p style={{\n                fontSize: '0.875rem',\n                fontWeight: '600',\n                color: 'white',\n                margin: 0,\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n                whiteSpace: 'nowrap'\n              }}>\n                {user.firstName} {user.lastName}\n              </p>\n              <p style={{\n                fontSize: '0.75rem',\n                color: '#94a3b8',\n                margin: 0,\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n                whiteSpace: 'nowrap'\n              }}>\n                {user.email}\n              </p>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Navigation Menu */}\n      <nav style={{\n        flex: 1,\n        padding: '1rem 0',\n        overflowY: 'auto'\n      }}>\n        <ul style={{\n          listStyle: 'none',\n          padding: 0,\n          margin: 0,\n          display: 'flex',\n          flexDirection: 'column',\n          gap: '0.25rem'\n        }}>\n          {menuItems.map((item) => {\n            const isActive = location === item.path;\n            const Icon = item.icon;\n            \n            return (\n              <li key={item.id}>\n                <button\n                  onClick={() => handleNavigation(item.path)}\n                  style={{\n                    width: '100%',\n                    padding: isCollapsed ? '0.75rem' : '0.75rem 1.5rem',\n                    backgroundColor: isActive ? 'rgba(245, 158, 11, 0.1)' : 'transparent',\n                    border: 'none',\n                    borderLeft: isActive ? '3px solid #f59e0b' : '3px solid transparent',\n                    color: isActive ? '#f59e0b' : '#94a3b8',\n                    fontSize: '0.875rem',\n                    fontWeight: isActive ? '600' : '500',\n                    cursor: 'pointer',\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: isCollapsed ? 'center' : 'flex-start',\n                    gap: '0.75rem',\n                    transition: 'all 0.2s ease',\n                    textAlign: 'left'\n                  }}\n                  onMouseEnter={(e) => {\n                    if (!isActive) {\n                      e.target.style.backgroundColor = 'rgba(255, 255, 255, 0.05)';\n                      e.target.style.color = 'white';\n                    }\n                  }}\n                  onMouseLeave={(e) => {\n                    if (!isActive) {\n                      e.target.style.backgroundColor = 'transparent';\n                      e.target.style.color = '#94a3b8';\n                    }\n                  }}\n                  title={isCollapsed ? item.label : undefined}\n                >\n                  <Icon style={{\n                    width: '1.25rem',\n                    height: '1.25rem',\n                    flexShrink: 0\n                  }} />\n                  {!isCollapsed && (\n                    <span style={{ overflow: 'hidden', textOverflow: 'ellipsis' }}>\n                      {item.label}\n                    </span>\n                  )}\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n      </nav>\n\n      {/* Logout Button */}\n      <div style={{\n        padding: isCollapsed ? '1rem 0.5rem' : '1rem 1.5rem',\n        borderTop: '1px solid rgba(255, 255, 255, 0.1)'\n      }}>\n        <button\n          onClick={onLogout}\n          style={{\n            width: '100%',\n            padding: isCollapsed ? '0.75rem' : '0.75rem 1rem',\n            backgroundColor: 'rgba(239, 68, 68, 0.1)',\n            border: '1px solid rgba(239, 68, 68, 0.3)',\n            borderRadius: '0.5rem',\n            color: '#ef4444',\n            fontSize: '0.875rem',\n            fontWeight: '500',\n            cursor: 'pointer',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            gap: '0.5rem',\n            transition: 'all 0.2s ease'\n          }}\n          onMouseEnter={(e) => {\n            e.target.style.backgroundColor = 'rgba(239, 68, 68, 0.2)';\n            e.target.style.borderColor = 'rgba(239, 68, 68, 0.5)';\n          }}\n          onMouseLeave={(e) => {\n            e.target.style.backgroundColor = 'rgba(239, 68, 68, 0.1)';\n            e.target.style.borderColor = 'rgba(239, 68, 68, 0.3)';\n          }}\n          title={isCollapsed ? 'Logout' : undefined}\n        >\n          <LogOut style={{\n            width: '1rem',\n            height: '1rem'\n          }} />\n          {!isCollapsed && <span>Logout</span>}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Sidebar;","size_bytes":9890},"client/src/pages/Dashboard.jsx":{"content":"// This file redirects to ModernDashboard to ensure proper routing\nimport ModernDashboard from './ModernDashboard';\n\nexport default ModernDashboard;","size_bytes":148},"client/src/pages/Deposit.jsx":{"content":"import { useState, useEffect } from 'react';\nimport { Copy, Upload, CheckCircle, DollarSign, Wallet, QrCode } from 'lucide-react';\nimport axios from 'axios';\nimport Sidebar from '../components/Sidebar';\nimport qrCodeImage from '@assets/QR_1755581675343.jpeg';\n\nexport default function Deposit() {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [depositAmount, setDepositAmount] = useState(250);\n  const [uploadedFile, setUploadedFile] = useState(null);\n  const [copied, setCopied] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const walletAddress = \"TDdjYG9Jhz1G68AzgZqWFL75iEbsRD1FSH\";\n  const walletType = \"TRC\";\n\n  useEffect(() => {\n    const fetchUserData = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        if (!token) {\n          window.location.href = '/login';\n          return;\n        }\n\n        const userResponse = await axios.get('/api/auth/me', {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n        setUser(userResponse.data);\n      } catch (error) {\n        if (error.response?.status === 401) {\n          localStorage.removeItem('token');\n          window.location.href = '/login';\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchUserData();\n  }, []);\n\n  const handleLogout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/';\n  };\n\n  const copyToClipboard = () => {\n    navigator.clipboard.writeText(walletAddress).then(() => {\n      setCopied(true);\n      setTimeout(() => setCopied(false), 2000);\n    });\n  };\n\n  const handleFileUpload = (event) => {\n    const file = event.target.files[0];\n    if (file) {\n      setUploadedFile(file);\n    }\n  };\n\n  const handleAmountChange = (event) => {\n    const value = parseInt(event.target.value);\n    if (value >= 250 && value % 250 === 0) {\n      setDepositAmount(value);\n    }\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    setIsSubmitting(true);\n\n    const formData = new FormData();\n    formData.append('amount', depositAmount);\n    formData.append('walletType', walletType);\n    formData.append('walletAddress', walletAddress);\n    if (uploadedFile) {\n      formData.append('screenshot', uploadedFile);\n    }\n\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch('/api/deposit', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        },\n        body: formData\n      });\n\n      if (response.ok) {\n        alert('Deposit request submitted successfully! Our admin will review and confirm your transaction.');\n        setUploadedFile(null);\n        setDepositAmount(250);\n        document.getElementById('file-upload').value = '';\n      } else {\n        alert('Failed to submit deposit request. Please try again.');\n      }\n    } catch (error) {\n      console.error('Deposit submission error:', error);\n      alert('Error submitting deposit request. Please try again.');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const generateAmountOptions = () => {\n    const options = [];\n    for (let i = 250; i <= 2500; i += 250) {\n      options.push(\n        <option key={i} value={i}>\n          ${i}\n        </option>\n      );\n    }\n    return options;\n  };\n\n  if (loading) {\n    return (\n      <div style={{ display: 'flex', height: '100vh', backgroundColor: '#f3f4f6' }}>\n        <div style={{ width: '16rem', backgroundColor: '#1f2937' }}></div>\n        <div style={{ flex: 1, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n          <div style={{\n            width: '3rem',\n            height: '3rem',\n            border: '2px solid #e5e7eb',\n            borderTop: '2px solid #3b82f6',\n            borderRadius: '50%',\n            animation: 'spin 1s linear infinite'\n          }}></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ display: 'flex', height: '100vh', backgroundColor: '#f3f4f6' }}>\n      <Sidebar user={user} onLogout={handleLogout} />\n      \n      <div style={{ flex: 1, display: 'flex', flexDirection: 'column', overflow: 'hidden' }}>\n        <header style={{\n          backgroundColor: '#ffffff',\n          boxShadow: '0 1px 3px 0 rgba(0, 0, 0, 0.1)',\n          borderBottom: '1px solid #e5e7eb',\n          padding: '1rem 1.5rem'\n        }}>\n          <h1 style={{\n            fontSize: '1.5rem',\n            fontWeight: 'bold',\n            color: '#111827',\n            margin: 0,\n            display: 'flex',\n            alignItems: 'center',\n            gap: '0.5rem'\n          }}>\n            <DollarSign style={{ width: '1.5rem', height: '1.5rem', color: '#f59e0b' }} />\n            Deposit\n          </h1>\n        </header>\n\n        <main style={{\n          flex: 1,\n          overflowY: 'auto',\n          backgroundColor: '#f9fafb',\n          padding: '1.5rem'\n        }}>\n          <div style={{ \n            maxWidth: '900px',\n            margin: '0 auto'\n          }}>\n            {/* Header */}\n            <div style={{ marginBottom: '2rem' }}>\n              <h2 style={{ \n                fontSize: '1.5rem', \n                fontWeight: 'bold', \n                color: '#111827',\n                marginBottom: '0.5rem'\n              }}>\n                Make a Deposit\n              </h2>\n              <p style={{ \n                color: '#6b7280',\n                fontSize: '1rem',\n                marginBottom: '1rem'\n              }}>\n                Add funds to your FXBOT trading account using USDT TRC-20\n              </p>\n              \n              {/* Remark */}\n              <div style={{\n                backgroundColor: '#fef3c7',\n                border: '1px solid #f59e0b',\n                borderRadius: '0.5rem',\n                padding: '0.75rem',\n                fontSize: '0.875rem',\n                color: '#92400e'\n              }}>\n                <strong>Remark:</strong> Please ensure you only transfer the same selected type of digital asset.\n              </div>\n            </div>\n\n      <form onSubmit={handleSubmit}>\n        <div style={{ \n          display: 'grid', \n          gridTemplateColumns: '1fr 1fr', \n          gap: '2rem',\n          alignItems: 'start'\n        }}>\n          {/* Left Column - Form */}\n          <div style={{ \n            backgroundColor: '#ffffff',\n            borderRadius: '1rem',\n            padding: '2rem',\n            boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',\n            border: '1px solid #e5e7eb'\n          }}>\n            {/* Payment Method */}\n            <div style={{ marginBottom: '1.5rem' }}>\n              <label style={{ \n                display: 'block',\n                fontSize: '0.875rem',\n                fontWeight: '600',\n                color: '#374151',\n                marginBottom: '0.5rem'\n              }}>\n                Payment Method\n              </label>\n              <div style={{\n                backgroundColor: '#f3f4f6',\n                border: '2px solid #e5e7eb',\n                borderRadius: '0.5rem',\n                padding: '0.75rem 1rem',\n                fontSize: '1rem',\n                fontWeight: '600',\n                color: '#111827',\n                display: 'flex',\n                alignItems: 'center',\n                gap: '0.5rem'\n              }}>\n                <Wallet style={{ width: '1.25rem', height: '1.25rem', color: '#f59e0b' }} />\n                USDT TRC-20\n              </div>\n            </div>\n\n            {/* Deposit Amount */}\n            <div style={{ marginBottom: '1.5rem' }}>\n              <label style={{ \n                display: 'block',\n                fontSize: '0.875rem',\n                fontWeight: '600',\n                color: '#374151',\n                marginBottom: '0.5rem'\n              }}>\n                Deposit Amount (USD)\n              </label>\n              <select\n                value={depositAmount}\n                onChange={handleAmountChange}\n                style={{\n                  width: '100%',\n                  padding: '0.75rem',\n                  border: '2px solid #e5e7eb',\n                  borderRadius: '0.5rem',\n                  fontSize: '1rem',\n                  backgroundColor: '#ffffff',\n                  color: '#111827',\n                  cursor: 'pointer'\n                }}\n              >\n                {generateAmountOptions()}\n              </select>\n              <p style={{ \n                fontSize: '0.75rem',\n                color: '#6b7280',\n                marginTop: '0.25rem'\n              }}>\n                Minimum $250. Deposits must be in multiples of $250\n              </p>\n            </div>\n\n            {/* Wallet Type */}\n            <div style={{ marginBottom: '1.5rem' }}>\n              <label style={{ \n                display: 'block',\n                fontSize: '0.875rem',\n                fontWeight: '600',\n                color: '#374151',\n                marginBottom: '0.5rem'\n              }}>\n                Wallet Type\n              </label>\n              <div style={{\n                backgroundColor: '#f3f4f6',\n                border: '2px solid #e5e7eb',\n                borderRadius: '0.5rem',\n                padding: '0.75rem 1rem',\n                fontSize: '1rem',\n                fontWeight: '600',\n                color: '#111827'\n              }}>\n                {walletType}\n              </div>\n            </div>\n\n            {/* Wallet Address */}\n            <div style={{ marginBottom: '1.5rem' }}>\n              <label style={{ \n                display: 'block',\n                fontSize: '0.875rem',\n                fontWeight: '600',\n                color: '#374151',\n                marginBottom: '0.5rem'\n              }}>\n                Wallet Address\n              </label>\n              <div style={{\n                display: 'flex',\n                alignItems: 'center',\n                gap: '0.5rem'\n              }}>\n                <input\n                  type=\"text\"\n                  value={walletAddress}\n                  readOnly\n                  style={{\n                    flex: 1,\n                    padding: '0.75rem',\n                    border: '2px solid #e5e7eb',\n                    borderRadius: '0.5rem',\n                    fontSize: '0.875rem',\n                    backgroundColor: '#f9fafb',\n                    color: '#111827'\n                  }}\n                />\n                <button\n                  type=\"button\"\n                  onClick={copyToClipboard}\n                  style={{\n                    padding: '0.75rem',\n                    backgroundColor: copied ? '#22c55e' : '#f59e0b',\n                    color: 'white',\n                    border: 'none',\n                    borderRadius: '0.5rem',\n                    cursor: 'pointer',\n                    display: 'flex',\n                    alignItems: 'center',\n                    gap: '0.25rem',\n                    fontSize: '0.875rem',\n                    fontWeight: '600',\n                    transition: 'all 0.2s ease'\n                  }}\n                >\n                  {copied ? (\n                    <>\n                      <CheckCircle style={{ width: '1rem', height: '1rem' }} />\n                      Copied\n                    </>\n                  ) : (\n                    <>\n                      <Copy style={{ width: '1rem', height: '1rem' }} />\n                      Copy\n                    </>\n                  )}\n                </button>\n              </div>\n            </div>\n\n            {/* File Upload */}\n            <div style={{ marginBottom: '2rem' }}>\n              <label style={{ \n                display: 'block',\n                fontSize: '0.875rem',\n                fontWeight: '600',\n                color: '#374151',\n                marginBottom: '0.5rem'\n              }}>\n                Upload Payment Screenshot\n              </label>\n              <div style={{\n                border: '2px dashed #e5e7eb',\n                borderRadius: '0.5rem',\n                padding: '2rem',\n                textAlign: 'center',\n                backgroundColor: '#f9fafb'\n              }}>\n                <input\n                  id=\"file-upload\"\n                  type=\"file\"\n                  accept=\"image/*\"\n                  onChange={handleFileUpload}\n                  style={{ display: 'none' }}\n                />\n                <label\n                  htmlFor=\"file-upload\"\n                  style={{\n                    cursor: 'pointer',\n                    display: 'inline-flex',\n                    flexDirection: 'column',\n                    alignItems: 'center',\n                    gap: '0.5rem'\n                  }}\n                >\n                  <Upload style={{ width: '2rem', height: '2rem', color: '#6b7280' }} />\n                  <span style={{ fontSize: '0.875rem', color: '#6b7280' }}>\n                    Click to upload screenshot\n                  </span>\n                </label>\n                {uploadedFile && (\n                  <p style={{ \n                    fontSize: '0.875rem',\n                    color: '#22c55e',\n                    marginTop: '0.5rem',\n                    fontWeight: '600'\n                  }}>\n                    ✓ {uploadedFile.name}\n                  </p>\n                )}\n              </div>\n              <p style={{ \n                fontSize: '0.75rem',\n                color: '#6b7280',\n                marginTop: '0.25rem'\n              }}>\n                Upload a screenshot of your payment for admin review\n              </p>\n            </div>\n\n            {/* Submit Button */}\n            <button\n              type=\"submit\"\n              disabled={isSubmitting || !uploadedFile}\n              style={{\n                width: '100%',\n                padding: '1rem',\n                backgroundColor: (!uploadedFile || isSubmitting) ? '#9ca3af' : '#f59e0b',\n                color: 'white',\n                border: 'none',\n                borderRadius: '0.5rem',\n                fontSize: '1rem',\n                fontWeight: '600',\n                cursor: (!uploadedFile || isSubmitting) ? 'not-allowed' : 'pointer',\n                transition: 'all 0.2s ease'\n              }}\n              onMouseEnter={(e) => {\n                if (!isSubmitting && uploadedFile) {\n                  e.target.style.backgroundColor = '#d97706';\n                }\n              }}\n              onMouseLeave={(e) => {\n                if (!isSubmitting && uploadedFile) {\n                  e.target.style.backgroundColor = '#f59e0b';\n                }\n              }}\n            >\n              {isSubmitting ? 'Submitting...' : 'Submit Deposit Request'}\n            </button>\n          </div>\n\n          {/* Right Column - QR Code */}\n          <div style={{ \n            backgroundColor: '#ffffff',\n            borderRadius: '1rem',\n            padding: '2rem',\n            boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',\n            border: '1px solid #e5e7eb',\n            textAlign: 'center'\n          }}>\n            <div style={{ \n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              gap: '0.5rem',\n              marginBottom: '1.5rem'\n            }}>\n              <QrCode style={{ width: '1.5rem', height: '1.5rem', color: '#f59e0b' }} />\n              <h3 style={{ \n                fontSize: '1.25rem',\n                fontWeight: 'bold',\n                color: '#111827',\n                margin: 0\n              }}>\n                Wallet QR Code\n              </h3>\n            </div>\n            \n            <div style={{\n              backgroundColor: '#f9fafb',\n              border: '2px solid #e5e7eb',\n              borderRadius: '1rem',\n              padding: '1.5rem',\n              marginBottom: '1rem'\n            }}>\n              <img\n                src={qrCodeImage}\n                alt=\"Wallet QR Code\"\n                style={{\n                  width: '200px',\n                  height: '200px',\n                  objectFit: 'contain',\n                  borderRadius: '0.5rem'\n                }}\n              />\n            </div>\n\n            <p style={{ \n              fontSize: '0.875rem',\n              color: '#6b7280',\n              marginBottom: '1rem'\n            }}>\n              Scan this QR code to send USDT TRC-20 to our wallet\n            </p>\n\n            <div style={{\n              backgroundColor: '#fef3c7',\n              border: '1px solid #f59e0b',\n              borderRadius: '0.5rem',\n              padding: '1rem',\n              fontSize: '0.875rem',\n              color: '#92400e'\n            }}>\n              <strong>Important:</strong>\n              <ul style={{ margin: '0.5rem 0', paddingLeft: '1.25rem' }}>\n                <li>Only send USDT TRC-20 to this address</li>\n                <li>Minimum deposit: $250</li>\n                <li>Upload payment screenshot for verification</li>\n                <li>Processing time: 1-24 hours</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </form>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":17297},"client/src/pages/ForgotPassword.jsx":{"content":"import React, { useState } from 'react';\nimport { Link } from 'wouter';\n\nfunction ForgotPassword() {\n  const [email, setEmail] = useState('');\n  const [message, setMessage] = useState('');\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n    setMessage('');\n\n    if (!email || !email.includes('@')) {\n      setError('Please enter a valid email address');\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const response = await fetch('/api/auth/forgot-password', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email }),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        setMessage(data.message);\n        setIsSubmitted(true);\n      } else {\n        setError(data.error || 'Failed to send reset email');\n      }\n    } catch (error) {\n      setError('Network error. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (isSubmitted) {\n    return (\n      <div style={{ \n        minHeight: '100vh', \n        background: 'linear-gradient(135deg, #f59e0b, #d97706)',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        padding: '1rem'\n      }}>\n        <div style={{\n          backgroundColor: 'white',\n          borderRadius: '1rem',\n          padding: '2rem',\n          maxWidth: '400px',\n          width: '100%',\n          textAlign: 'center',\n          boxShadow: '0 25px 50px -12px rgba(0, 0, 0, 0.25)'\n        }}>\n          <div style={{\n            width: '4rem',\n            height: '4rem',\n            backgroundColor: '#10b981',\n            borderRadius: '50%',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            margin: '0 auto 1.5rem auto'\n          }}>\n            <span style={{ color: 'white', fontSize: '2rem' }}>✓</span>\n          </div>\n          \n          <h2 style={{\n            fontSize: '1.5rem',\n            fontWeight: 'bold',\n            color: '#111827',\n            marginBottom: '1rem'\n          }}>\n            Check Your Email\n          </h2>\n          \n          <p style={{\n            color: '#6b7280',\n            marginBottom: '1.5rem',\n            lineHeight: '1.5'\n          }}>\n            {message}\n          </p>\n          \n          <p style={{\n            color: '#6b7280',\n            fontSize: '0.875rem',\n            marginBottom: '1.5rem'\n          }}>\n            Didn't receive the email? Check your spam folder or try again.\n          </p>\n          \n          <div style={{ display: 'flex', gap: '1rem', flexDirection: 'column' }}>\n            <button\n              onClick={() => {\n                setIsSubmitted(false);\n                setEmail('');\n                setMessage('');\n              }}\n              style={{\n                backgroundColor: '#f59e0b',\n                color: 'white',\n                padding: '0.75rem 1.5rem',\n                border: 'none',\n                borderRadius: '0.5rem',\n                fontSize: '1rem',\n                fontWeight: '600',\n                cursor: 'pointer',\n                transition: 'all 0.2s ease'\n              }}\n              onMouseEnter={(e) => e.target.style.backgroundColor = '#d97706'}\n              onMouseLeave={(e) => e.target.style.backgroundColor = '#f59e0b'}\n            >\n              Try Again\n            </button>\n            \n            <Link href=\"/login\" style={{ textDecoration: 'none' }}>\n              <button style={{\n                backgroundColor: 'transparent',\n                color: '#6b7280',\n                padding: '0.75rem 1.5rem',\n                border: '1px solid #d1d5db',\n                borderRadius: '0.5rem',\n                fontSize: '1rem',\n                fontWeight: '600',\n                cursor: 'pointer',\n                width: '100%',\n                transition: 'all 0.2s ease'\n              }}\n              onMouseEnter={(e) => {\n                e.target.style.backgroundColor = '#f9fafb';\n                e.target.style.borderColor = '#9ca3af';\n              }}\n              onMouseLeave={(e) => {\n                e.target.style.backgroundColor = 'transparent';\n                e.target.style.borderColor = '#d1d5db';\n              }}>\n                Back to Login\n              </button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ \n      minHeight: '100vh', \n      background: 'linear-gradient(135deg, #f59e0b, #d97706)',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      padding: '1rem'\n    }}>\n      <div style={{\n        backgroundColor: 'white',\n        borderRadius: '1rem',\n        padding: '2rem',\n        maxWidth: '400px',\n        width: '100%',\n        boxShadow: '0 25px 50px -12px rgba(0, 0, 0, 0.25)'\n      }}>\n        {/* Header */}\n        <div style={{ textAlign: 'center', marginBottom: '2rem' }}>\n          <h1 style={{\n            fontSize: '2rem',\n            fontWeight: 'bold',\n            color: '#f59e0b',\n            marginBottom: '0.5rem'\n          }}>\n            FXBOT\n          </h1>\n          <p style={{ color: '#6b7280', fontSize: '0.875rem' }}>\n            Professional Forex Investment Platform\n          </p>\n        </div>\n\n        {/* Form Header */}\n        <div style={{ textAlign: 'center', marginBottom: '1.5rem' }}>\n          <h2 style={{\n            fontSize: '1.5rem',\n            fontWeight: 'bold',\n            color: '#111827',\n            marginBottom: '0.5rem'\n          }}>\n            Forgot Password?\n          </h2>\n          <p style={{ color: '#6b7280', fontSize: '0.875rem' }}>\n            Enter your email address and we'll send you a link to reset your password.\n          </p>\n        </div>\n\n        {/* Error/Success Message */}\n        {error && (\n          <div style={{\n            backgroundColor: '#fef2f2',\n            border: '1px solid #fecaca',\n            color: '#dc2626',\n            padding: '0.75rem',\n            borderRadius: '0.5rem',\n            marginBottom: '1rem',\n            fontSize: '0.875rem'\n          }}>\n            {error}\n          </div>\n        )}\n\n        {/* Form */}\n        <form onSubmit={handleSubmit}>\n          <div style={{ marginBottom: '1.5rem' }}>\n            <label style={{\n              display: 'block',\n              fontSize: '0.875rem',\n              fontWeight: '600',\n              color: '#374151',\n              marginBottom: '0.5rem'\n            }}>\n              Email Address\n            </label>\n            <input\n              type=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              required\n              style={{\n                width: '100%',\n                padding: '0.75rem',\n                border: '1px solid #d1d5db',\n                borderRadius: '0.5rem',\n                fontSize: '1rem',\n                outline: 'none',\n                transition: 'border-color 0.2s ease',\n                boxSizing: 'border-box'\n              }}\n              onFocus={(e) => e.target.style.borderColor = '#f59e0b'}\n              onBlur={(e) => e.target.style.borderColor = '#d1d5db'}\n              placeholder=\"Enter your email address\"\n            />\n          </div>\n\n          <button\n            type=\"submit\"\n            disabled={loading}\n            style={{\n              width: '100%',\n              backgroundColor: loading ? '#9ca3af' : '#f59e0b',\n              color: 'white',\n              padding: '0.875rem',\n              border: 'none',\n              borderRadius: '0.5rem',\n              fontSize: '1rem',\n              fontWeight: '600',\n              cursor: loading ? 'not-allowed' : 'pointer',\n              transition: 'all 0.2s ease',\n              marginBottom: '1.5rem'\n            }}\n            onMouseEnter={(e) => {\n              if (!loading) e.target.style.backgroundColor = '#d97706';\n            }}\n            onMouseLeave={(e) => {\n              if (!loading) e.target.style.backgroundColor = '#f59e0b';\n            }}\n          >\n            {loading ? 'Sending...' : 'Send Reset Link'}\n          </button>\n        </form>\n\n        {/* Footer Links */}\n        <div style={{ textAlign: 'center' }}>\n          <p style={{ color: '#6b7280', fontSize: '0.875rem' }}>\n            Remember your password?{' '}\n            <Link href=\"/login\" style={{ color: '#f59e0b', textDecoration: 'none', fontWeight: '600' }}>\n              Back to Login\n            </Link>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ForgotPassword;","size_bytes":8813},"client/src/pages/Fund.jsx":{"content":"import { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Sidebar from '../components/Sidebar';\n\nexport default function Fund() {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchUserData = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        if (!token) {\n          window.location.href = '/login';\n          return;\n        }\n\n        const userResponse = await axios.get('/api/auth/me', {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n        setUser(userResponse.data);\n      } catch (error) {\n        if (error.response?.status === 401) {\n          localStorage.removeItem('token');\n          window.location.href = '/login';\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchUserData();\n  }, []);\n\n  const handleLogout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/';\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex h-screen bg-gray-100\">\n        <div className=\"w-64 bg-gray-900\"></div>\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen bg-gray-100\">\n      <Sidebar user={user} onLogout={handleLogout} />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <header className=\"bg-white shadow-sm border-b border-gray-200 px-6 py-4\">\n          <h1 className=\"text-2xl font-bold text-gray-900\">Fund</h1>\n        </header>\n\n        <main className=\"flex-1 overflow-y-auto bg-gray-50 p-6\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"bg-white rounded-2xl p-6 shadow-sm border border-gray-200\">\n              <h2 className=\"text-xl font-semibold text-gray-900 mb-6\">Fund Management</h2>\n              <div className=\"text-center py-12\">\n                <div className=\"w-16 h-16 bg-gray-200 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <span className=\"text-2xl\">💰</span>\n                </div>\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Fund Management Coming Soon</h3>\n                <p className=\"text-gray-500\">This feature will allow you to manage your investment funds.</p>\n              </div>\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":2569},"client/src/pages/Login.jsx":{"content":"import React, { useState } from 'react';\nimport { Link } from 'wouter';\nimport axios from 'axios';\nimport '../styles/login.css';\n\nexport default function Login() {\n  const [formData, setFormData] = useState({\n    email: '',\n    password: ''\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const handleChange = (e) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n\n    try {\n      const response = await axios.post('/api/auth/login', formData);\n      \n      if (response.data.success) {\n        localStorage.setItem('token', response.data.token);\n        localStorage.setItem('user', JSON.stringify(response.data.user));\n        \n        if (response.data.user.isAdmin) {\n          window.location.href = '/admin';\n        } else {\n          window.location.href = '/dashboard';\n        }\n      }\n    } catch (error) {\n      setError(error.response?.data?.error || 'Login failed. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"login-container\">\n      <div className=\"login-card\">\n        <div className=\"login-logo\">\n          <img src=\"/logo.png\" alt=\"FXBOT\" />\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"login-form\">\n          <h2>Sign In</h2>\n          \n          {error && (\n            <div className=\"error-message\">\n              {error}\n            </div>\n          )}\n\n          <div className=\"form-group\">\n            <label htmlFor=\"email\">Email Address</label>\n            <input\n              type=\"email\"\n              id=\"email\"\n              name=\"email\"\n              value={formData.email}\n              onChange={handleChange}\n              placeholder=\"Enter your email\"\n              required\n              data-testid=\"input-email\"\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"password\">Password</label>\n            <input\n              type=\"password\"\n              id=\"password\"\n              name=\"password\"\n              value={formData.password}\n              onChange={handleChange}\n              placeholder=\"Enter your password\"\n              required\n              data-testid=\"input-password\"\n            />\n          </div>\n\n          <div className=\"form-actions\">\n            <Link href=\"/forgot-password\" className=\"forgot-password-link\" data-testid=\"link-forgot-password\">\n              Forgot your password?\n            </Link>\n          </div>\n\n          <button \n            type=\"submit\" \n            className=\"login-button\"\n            disabled={loading}\n            data-testid=\"button-login\"\n          >\n            {loading ? 'Signing In...' : 'Sign In'}\n          </button>\n        </form>\n\n        <div className=\"login-footer\">\n          <p>\n            Don't have an account?{' '}\n            <Link href=\"/register\" className=\"link\" data-testid=\"link-register\">\n              Create account here\n            </Link>\n          </p>\n        </div>\n        \n        <div className=\"back-to-home\">\n          <Link href=\"/\" data-testid=\"link-home\">\n            ← Back to Home\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":3320},"client/src/pages/ModernDashboard.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport ModernSidebar from '../components/ModernSidebar';\nimport DasCountdown from '../components/DasCountdown';\nimport { \n  DollarSign, \n  Wallet, \n  TrendingUp, \n  Users,\n  Copy,\n  ChevronRight\n} from 'lucide-react';\n\nfunction ModernDashboard() {\n  const [user, setUser] = useState(null);\n  const [referralData, setReferralData] = useState(null);\n\n  // Fetch user data\n  const { data: userData, isLoading: userLoading, error: userError } = useQuery({\n    queryKey: ['/api/auth/me'],\n    retry: false,\n  });\n\n  // Fetch referral data\n  const { data: referrals, isLoading: referralsLoading, error: referralsError } = useQuery({\n    queryKey: ['/api/user/referrals'],\n    retry: false,\n    enabled: !!userData\n  });\n\n  useEffect(() => {\n    if (userData) {\n      setUser(userData);\n    }\n  }, [userData]);\n\n  useEffect(() => {\n    if (referrals) {\n      setReferralData(referrals);\n    }\n  }, [referrals]);\n\n  const handleLogout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  };\n\n  const copyToClipboard = (text) => {\n    navigator.clipboard.writeText(text);\n    alert('Sponsor ID copied to clipboard!');\n  };\n\n  // Handle authentication errors\n  if (userError) {\n    if (userError.message.includes('401')) {\n      window.location.href = '/login';\n      return null;\n    }\n  }\n\n  // Show loading state\n  if (userLoading || (!user && !userError)) {\n    return (\n      <div style={{ \n        display: 'flex', \n        alignItems: 'center', \n        justifyContent: 'center', \n        minHeight: '100vh', \n        backgroundColor: '#f8fafc' \n      }}>\n        <div style={{ textAlign: 'center' }}>\n          <div style={{\n            width: '3rem',\n            height: '3rem',\n            border: '2px solid #e5e7eb',\n            borderTop: '2px solid #3b82f6',\n            borderRadius: '50%',\n            animation: 'spin 1s linear infinite',\n            margin: '0 auto 1rem'\n          }}></div>\n          <div style={{ fontSize: '1.125rem', color: '#374151' }}>Loading dashboard...</div>\n        </div>\n      </div>\n    );\n  }\n\n  const stats = [\n    {\n      title: 'Total Investment',\n      value: '$0.00',\n      icon: DollarSign,\n      color: 'from-blue-500 to-blue-600',\n      bgColor: 'rgba(59, 130, 246, 0.1)'\n    },\n    {\n      title: 'Total Earnings',\n      value: `$${(referralData?.stats?.totalEarnings || 0).toFixed(2)}`,\n      icon: Wallet,\n      color: 'from-green-500 to-green-600',\n      bgColor: 'rgba(34, 197, 94, 0.1)'\n    },\n    {\n      title: 'Active Referrals',\n      value: referralData?.stats?.totalReferrals || 0,\n      icon: Users,\n      color: 'from-purple-500 to-purple-600',\n      bgColor: 'rgba(139, 92, 246, 0.1)'\n    },\n    {\n      title: 'Monthly ROI',\n      value: '6.00%',\n      icon: TrendingUp,\n      color: 'from-orange-500 to-orange-600',\n      bgColor: 'rgba(249, 115, 22, 0.1)'\n    }\n  ];\n\n  const referralTiers = [\n    { level: 1, rate: '1.5%', count: referralData?.stats?.level1Count || 0 },\n    { level: 2, rate: '1.0%', count: referralData?.stats?.level2Count || 0 },\n    { level: 3, rate: '0.75%', count: referralData?.stats?.level3Count || 0 },\n    { level: 4, rate: '0.50%', count: referralData?.stats?.level4Count || 0 },\n    { level: 5, rate: '0.25%', count: referralData?.stats?.level5Count || 0 }\n  ];\n\n  return (\n    <div style={{ display: 'flex', minHeight: '100vh', backgroundColor: '#f8fafc' }}>\n      <ModernSidebar user={user} onLogout={handleLogout} />\n      \n      <main style={{ flex: 1, padding: '2rem' }}>\n        {/* Header */}\n        <div style={{ marginBottom: '2rem' }}>\n          <h1 style={{ \n            fontSize: '1.875rem', \n            fontWeight: 'bold', \n            color: '#111827', \n            margin: '0 0 0.5rem 0' \n          }}>\n            Welcome back, {user?.firstName}!\n          </h1>\n          <p style={{ color: '#6b7280', margin: 0 }}>\n            Track your FXBOT investments and referral earnings\n          </p>\n        </div>\n\n        {/* Stats Cards */}\n        <div style={{ \n          display: 'grid', \n          gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))', \n          gap: '1.5rem', \n          marginBottom: '2rem' \n        }}>\n          {stats.map((stat, index) => {\n            const IconComponent = stat.icon;\n            return (\n              <div\n                key={index}\n                style={{\n                  backgroundColor: 'white',\n                  borderRadius: '0.75rem',\n                  padding: '1.5rem',\n                  boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',\n                  border: '1px solid rgba(229, 231, 235, 0.5)',\n                  transition: 'all 0.2s ease'\n                }}\n                onMouseEnter={(e) => {\n                  e.target.style.boxShadow = '0 4px 12px rgba(0, 0, 0, 0.15)';\n                  e.target.style.transform = 'translateY(-2px)';\n                }}\n                onMouseLeave={(e) => {\n                  e.target.style.boxShadow = '0 1px 3px rgba(0, 0, 0, 0.1)';\n                  e.target.style.transform = 'none';\n                }}\n              >\n                <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                  <div>\n                    <p style={{ \n                      color: '#6b7280', \n                      fontSize: '0.875rem', \n                      margin: '0 0 0.5rem 0',\n                      fontWeight: '500'\n                    }}>\n                      {stat.title}\n                    </p>\n                    <p style={{ \n                      fontSize: '1.875rem', \n                      fontWeight: 'bold', \n                      color: '#111827',\n                      margin: 0\n                    }}>\n                      {stat.value}\n                    </p>\n                  </div>\n                  <div style={{\n                    width: '3rem',\n                    height: '3rem',\n                    background: stat.bgColor,\n                    borderRadius: '0.75rem',\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center'\n                  }}>\n                    <IconComponent style={{ width: '1.5rem', height: '1.5rem', color: '#3b82f6' }} />\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n\n        {/* DAS Countdown Section */}\n        <div style={{\n          backgroundColor: 'white',\n          borderRadius: '0.75rem',\n          padding: '2rem',\n          boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',\n          border: '1px solid rgba(229, 231, 235, 0.5)',\n          marginBottom: '2rem'\n        }}>\n          <DasCountdown userId={user?._id} />\n        </div>\n\n        {/* Main Content Grid */}\n        <div style={{ \n          display: 'grid', \n          gridTemplateColumns: '1fr 400px', \n          gap: '2rem',\n          '@media (max-width: 1024px)': {\n            gridTemplateColumns: '1fr'\n          }\n        }}>\n          {/* Referral Program Card */}\n          <div style={{\n            backgroundColor: 'white',\n            borderRadius: '0.75rem',\n            padding: '2rem',\n            boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',\n            border: '1px solid rgba(229, 231, 235, 0.5)'\n          }}>\n            {/* Header */}\n            <div style={{ \n              display: 'flex', \n              alignItems: 'center', \n              justifyContent: 'space-between', \n              marginBottom: '2rem' \n            }}>\n              <div style={{ display: 'flex', alignItems: 'center' }}>\n                <div style={{\n                  width: '2.5rem',\n                  height: '2.5rem',\n                  background: 'linear-gradient(135deg, #3b82f6, #8b5cf6)',\n                  borderRadius: '0.5rem',\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  marginRight: '0.75rem'\n                }}>\n                  <Users style={{ width: '1.25rem', height: '1.25rem', color: 'white' }} />\n                </div>\n                <div>\n                  <h3 style={{ \n                    fontSize: '1.25rem', \n                    fontWeight: 'bold', \n                    color: '#111827', \n                    margin: 0 \n                  }}>\n                    Referral Program\n                  </h3>\n                  <p style={{ color: '#6b7280', fontSize: '0.875rem', margin: 0 }}>\n                    SmartLine Income - 5 Level Commission\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            {/* Sponsor ID Section */}\n            <div style={{\n              background: 'linear-gradient(135deg, #3b82f6, #8b5cf6)',\n              borderRadius: '0.75rem',\n              padding: '1.5rem',\n              marginBottom: '2rem',\n              color: 'white'\n            }}>\n              <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <div>\n                  <p style={{ \n                    color: 'rgba(255, 255, 255, 0.8)', \n                    fontSize: '0.875rem', \n                    margin: '0 0 0.5rem 0',\n                    fontWeight: '500'\n                  }}>\n                    Your Sponsor ID\n                  </p>\n                  <p style={{ \n                    fontSize: '1.5rem', \n                    fontWeight: 'bold', \n                    margin: '0 0 0.25rem 0' \n                  }}>\n                    {user?.ownSponsorId}\n                  </p>\n                  <p style={{ \n                    color: 'rgba(255, 255, 255, 0.7)', \n                    fontSize: '0.75rem',\n                    margin: 0\n                  }}>\n                    Share this ID to earn commissions\n                  </p>\n                </div>\n                <button\n                  onClick={() => copyToClipboard(user?.ownSponsorId)}\n                  style={{\n                    background: 'rgba(255, 255, 255, 0.2)',\n                    border: '1px solid rgba(255, 255, 255, 0.3)',\n                    color: 'white',\n                    padding: '0.75rem 1rem',\n                    borderRadius: '0.5rem',\n                    display: 'flex',\n                    alignItems: 'center',\n                    fontSize: '0.875rem',\n                    fontWeight: '500',\n                    cursor: 'pointer',\n                    transition: 'all 0.2s ease'\n                  }}\n                  onMouseEnter={(e) => {\n                    e.target.style.background = 'rgba(255, 255, 255, 0.3)';\n                  }}\n                  onMouseLeave={(e) => {\n                    e.target.style.background = 'rgba(255, 255, 255, 0.2)';\n                  }}\n                >\n                  <Copy style={{ width: '1rem', height: '1rem', marginRight: '0.5rem' }} />\n                  Copy ID\n                </button>\n              </div>\n            </div>\n\n            {/* Commission Structure */}\n            <div>\n              <h4 style={{ \n                fontSize: '1.125rem', \n                fontWeight: 'bold', \n                color: '#111827', \n                margin: '0 0 1rem 0' \n              }}>\n                Commission Structure\n              </h4>\n              <div style={{ display: 'flex', flexDirection: 'column', gap: '0.75rem' }}>\n                {referralTiers.map((tier, index) => {\n                  const colors = [\n                    '#ef4444', '#f97316', '#eab308', '#22c55e', '#3b82f6'\n                  ];\n                  \n                  return (\n                    <div\n                      key={tier.level}\n                      style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                        justifyContent: 'space-between',\n                        padding: '1rem',\n                        backgroundColor: '#f8fafc',\n                        borderRadius: '0.5rem',\n                        border: `2px solid ${colors[index]}20`,\n                        borderLeft: `4px solid ${colors[index]}`\n                      }}\n                    >\n                      <div style={{ display: 'flex', alignItems: 'center' }}>\n                        <div style={{\n                          width: '2rem',\n                          height: '2rem',\n                          backgroundColor: colors[index],\n                          color: 'white',\n                          borderRadius: '0.375rem',\n                          display: 'flex',\n                          alignItems: 'center',\n                          justifyContent: 'center',\n                          marginRight: '0.75rem',\n                          fontSize: '0.875rem',\n                          fontWeight: 'bold'\n                        }}>\n                          {tier.level}\n                        </div>\n                        <div>\n                          <span style={{ fontWeight: '600', color: '#111827' }}>\n                            Level {tier.level}\n                          </span>\n                          <p style={{ \n                            color: '#6b7280', \n                            fontSize: '0.75rem', \n                            margin: 0 \n                          }}>\n                            {tier.rate} commission\n                          </p>\n                        </div>\n                      </div>\n                      <div style={{ textAlign: 'right' }}>\n                        <div style={{ \n                          fontSize: '1.25rem', \n                          fontWeight: 'bold', \n                          color: '#111827' \n                        }}>\n                          {tier.count}\n                        </div>\n                        <div style={{ \n                          fontSize: '0.75rem', \n                          color: '#6b7280' \n                        }}>\n                          referrals\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n\n          {/* Quick Actions Card */}\n          <div style={{\n            backgroundColor: 'white',\n            borderRadius: '0.75rem',\n            padding: '2rem',\n            boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',\n            border: '1px solid rgba(229, 231, 235, 0.5)',\n            height: 'fit-content'\n          }}>\n            <h3 style={{ \n              fontSize: '1.25rem', \n              fontWeight: 'bold', \n              color: '#111827', \n              margin: '0 0 1.5rem 0' \n            }}>\n              Quick Actions\n            </h3>\n            \n            <div style={{ display: 'flex', flexDirection: 'column', gap: '0.75rem' }}>\n              <button style={{\n                width: '100%',\n                background: 'linear-gradient(135deg, #22c55e, #16a34a)',\n                color: 'white',\n                fontWeight: '600',\n                padding: '0.875rem 1rem',\n                borderRadius: '0.5rem',\n                border: 'none',\n                cursor: 'pointer',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                transition: 'all 0.2s ease'\n              }}\n              onMouseEnter={(e) => {\n                e.target.style.transform = 'translateY(-1px)';\n                e.target.style.boxShadow = '0 4px 12px rgba(34, 197, 94, 0.4)';\n              }}\n              onMouseLeave={(e) => {\n                e.target.style.transform = 'none';\n                e.target.style.boxShadow = 'none';\n              }}\n              >\n                <DollarSign style={{ width: '1.25rem', height: '1.25rem', marginRight: '0.5rem' }} />\n                Invest Now\n              </button>\n              \n              <button style={{\n                width: '100%',\n                background: 'linear-gradient(135deg, #3b82f6, #2563eb)',\n                color: 'white',\n                fontWeight: '600',\n                padding: '0.875rem 1rem',\n                borderRadius: '0.5rem',\n                border: 'none',\n                cursor: 'pointer',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                transition: 'all 0.2s ease'\n              }}\n              onMouseEnter={(e) => {\n                e.target.style.transform = 'translateY(-1px)';\n                e.target.style.boxShadow = '0 4px 12px rgba(59, 130, 246, 0.4)';\n              }}\n              onMouseLeave={(e) => {\n                e.target.style.transform = 'none';\n                e.target.style.boxShadow = 'none';\n              }}\n              >\n                <Wallet style={{ width: '1.25rem', height: '1.25rem', marginRight: '0.5rem' }} />\n                View Portfolio\n              </button>\n              \n              <button style={{\n                width: '100%',\n                background: 'linear-gradient(135deg, #8b5cf6, #7c3aed)',\n                color: 'white',\n                fontWeight: '600',\n                padding: '0.875rem 1rem',\n                borderRadius: '0.5rem',\n                border: 'none',\n                cursor: 'pointer',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                transition: 'all 0.2s ease'\n              }}\n              onMouseEnter={(e) => {\n                e.target.style.transform = 'translateY(-1px)';\n                e.target.style.boxShadow = '0 4px 12px rgba(139, 92, 246, 0.4)';\n              }}\n              onMouseLeave={(e) => {\n                e.target.style.transform = 'none';\n                e.target.style.boxShadow = 'none';\n              }}\n              >\n                <Users style={{ width: '1.25rem', height: '1.25rem', marginRight: '0.5rem' }} />\n                Referral Tree\n              </button>\n            </div>\n\n            {/* Package Info */}\n            <div style={{\n              marginTop: '2rem',\n              padding: '1rem',\n              backgroundColor: '#f8fafc',\n              borderRadius: '0.5rem',\n              border: '1px solid #e5e7eb'\n            }}>\n              <h4 style={{ \n                fontSize: '0.875rem', \n                fontWeight: '600', \n                color: '#111827', \n                margin: '0 0 0.5rem 0' \n              }}>\n                FS Income Package\n              </h4>\n              <p style={{ \n                fontSize: '0.75rem', \n                color: '#6b7280', \n                margin: '0 0 0.5rem 0' \n              }}>\n                6% Monthly ROI until 2x returns\n              </p>\n              <div style={{ \n                fontSize: '0.75rem', \n                color: '#059669',\n                fontWeight: '600'\n              }}>\n                Minimum: $250 • Duration: ~17 months\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default ModernDashboard;","size_bytes":19193},"client/src/pages/Profile.jsx":{"content":"import { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Sidebar from '../components/Sidebar';\n\nexport default function Profile() {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchUserData = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        if (!token) {\n          window.location.href = '/login';\n          return;\n        }\n\n        const userResponse = await axios.get('/api/auth/me', {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n        setUser(userResponse.data);\n      } catch (error) {\n        if (error.response?.status === 401) {\n          localStorage.removeItem('token');\n          window.location.href = '/login';\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchUserData();\n  }, []);\n\n  const handleLogout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/';\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex h-screen bg-gray-100\">\n        <div className=\"w-64 bg-gray-900\"></div>\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen bg-gray-100\">\n      <Sidebar user={user} onLogout={handleLogout} />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <header className=\"bg-white shadow-sm border-b border-gray-200 px-6 py-4\">\n          <h1 className=\"text-2xl font-bold text-gray-900\">Profile</h1>\n        </header>\n\n        <main className=\"flex-1 overflow-y-auto bg-gray-50 p-6\">\n          <div className=\"max-w-2xl mx-auto\">\n            <div className=\"bg-white rounded-2xl p-6 shadow-sm border border-gray-200\">\n              <h2 className=\"text-xl font-semibold text-gray-900 mb-6\">User Information</h2>\n              \n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">First Name</label>\n                  <input\n                    type=\"text\"\n                    value={user?.firstName || ''}\n                    disabled\n                    className=\"w-full border border-gray-300 rounded-lg px-3 py-2 bg-gray-50\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Last Name</label>\n                  <input\n                    type=\"text\"\n                    value={user?.lastName || ''}\n                    disabled\n                    className=\"w-full border border-gray-300 rounded-lg px-3 py-2 bg-gray-50\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Email</label>\n                  <input\n                    type=\"email\"\n                    value={user?.email || ''}\n                    disabled\n                    className=\"w-full border border-gray-300 rounded-lg px-3 py-2 bg-gray-50\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Mobile</label>\n                  <input\n                    type=\"text\"\n                    value={user?.mobile || ''}\n                    disabled\n                    className=\"w-full border border-gray-300 rounded-lg px-3 py-2 bg-gray-50\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Your Sponsor ID</label>\n                  <input\n                    type=\"text\"\n                    value={user?.ownSponsorId || ''}\n                    disabled\n                    className=\"w-full border border-gray-300 rounded-lg px-3 py-2 bg-gray-50 font-mono font-bold\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Member Since</label>\n                  <input\n                    type=\"text\"\n                    value={user?.createdAt ? new Date(user.createdAt).toLocaleDateString() : ''}\n                    disabled\n                    className=\"w-full border border-gray-300 rounded-lg px-3 py-2 bg-gray-50\"\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":4701},"client/src/pages/ReferralTree.jsx":{"content":"import { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Sidebar from '../components/Sidebar';\n\nexport default function ReferralTree() {\n  const [user, setUser] = useState(null);\n  const [referralData, setReferralData] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        if (!token) {\n          window.location.href = '/login';\n          return;\n        }\n\n        const [userResponse, referralResponse] = await Promise.all([\n          axios.get('/api/auth/me', { headers: { Authorization: `Bearer ${token}` } }),\n          axios.get('/api/user/referrals', { headers: { Authorization: `Bearer ${token}` } })\n        ]);\n\n        setUser(userResponse.data);\n        setReferralData(referralResponse.data);\n      } catch (error) {\n        if (error.response?.status === 401) {\n          localStorage.removeItem('token');\n          window.location.href = '/login';\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const handleLogout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/';\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex h-screen bg-gray-100\">\n        <div className=\"w-64 bg-gray-900\"></div>\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen bg-gray-100\">\n      <Sidebar user={user} onLogout={handleLogout} />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <header className=\"bg-white shadow-sm border-b border-gray-200 px-6 py-4\">\n          <h1 className=\"text-2xl font-bold text-gray-900\">Referral Tree</h1>\n        </header>\n\n        <main className=\"flex-1 overflow-y-auto bg-gray-50 p-6\">\n          <div className=\"max-w-6xl mx-auto space-y-6\">\n            \n            {/* Multi-Level Stats */}\n            <div className=\"bg-white rounded-2xl p-6 shadow-sm border border-gray-200\">\n              <h2 className=\"text-xl font-semibold text-gray-900 mb-6\">Multi-Level Referral Overview</h2>\n              <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n                {[1, 2, 3, 4, 5].map(level => (\n                  <div key={level} className=\"text-center p-4 bg-gray-50 rounded-lg border\">\n                    <div className=\"w-12 h-12 bg-blue-500 rounded-full flex items-center justify-center mx-auto mb-3\">\n                      <span className=\"text-white font-bold\">{level}</span>\n                    </div>\n                    <div className=\"text-2xl font-bold text-gray-900 mb-1\">\n                      {referralData?.stats?.[`level${level}Count`] || 0}\n                    </div>\n                    <div className=\"text-sm text-gray-500 mb-2\">Level {level} Users</div>\n                    <div className=\"text-xs text-green-600 font-medium\">\n                      ${(referralData?.stats?.[`level${level}Earnings`] || 0).toFixed(2)} earned\n                    </div>\n                    <div className=\"text-xs text-blue-600\">\n                      {level === 1 && '1.5%'} {level === 2 && '1.0%'} {level === 3 && '0.75%'} {level === 4 && '0.5%'} {level === 5 && '0.25%'} commission\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Direct Referrals */}\n            {referralData?.children && referralData.children.length > 0 && (\n              <div className=\"bg-white rounded-2xl p-6 shadow-sm border border-gray-200\">\n                <h2 className=\"text-xl font-semibold text-gray-900 mb-6\">Your Direct Referrals (Level 1)</h2>\n                <div className=\"space-y-4\">\n                  {referralData.children.map((child, index) => (\n                    <div key={child.id} className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg border\">\n                      <div className=\"flex items-center\">\n                        <div className=\"w-12 h-12 bg-blue-500 rounded-full flex items-center justify-center text-white font-bold mr-4\">\n                          {child.name.split(' ').map(n => n[0]).join('')}\n                        </div>\n                        <div>\n                          <div className=\"font-medium text-gray-900\">{child.name}</div>\n                          <div className=\"text-sm text-gray-500\">{child.email}</div>\n                          <div className=\"text-xs text-blue-600\">Level 1 - 1.5% commission</div>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"text-sm text-gray-500\">\n                          Joined {new Date(child.registeredAt).toLocaleDateString()}\n                        </div>\n                        <div className=\"text-xs text-green-600 font-medium\">\n                          Active Member\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Empty State */}\n            {(!referralData?.children || referralData.children.length === 0) && (\n              <div className=\"bg-white rounded-2xl p-6 shadow-sm border border-gray-200 text-center\">\n                <div className=\"w-16 h-16 bg-gray-200 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <span className=\"text-2xl\">🌳</span>\n                </div>\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Referral Tree Yet</h3>\n                <p className=\"text-gray-500 mb-4\">\n                  Start building your referral network by sharing your sponsor ID: <strong>{referralData?.ownSponsorId || user?.ownSponsorId}</strong>\n                </p>\n                <button\n                  onClick={() => {\n                    navigator.clipboard.writeText(referralData?.ownSponsorId || user?.ownSponsorId);\n                    alert('Sponsor ID copied to clipboard!');\n                  }}\n                  className=\"bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg\"\n                >\n                  Copy Sponsor ID\n                </button>\n              </div>\n            )}\n\n            {/* Referral Program Info */}\n            <div className=\"bg-gradient-to-r from-blue-500 to-blue-600 rounded-2xl p-6 text-white\">\n              <h3 className=\"text-xl font-semibold mb-4\">How Our Referral Program Works</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4 text-sm\">\n                <div className=\"text-center\">\n                  <div className=\"font-bold text-lg mb-1\">Level 1</div>\n                  <div className=\"opacity-90\">1.5% Commission</div>\n                  <div className=\"text-xs opacity-75\">Direct referrals</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"font-bold text-lg mb-1\">Level 2</div>\n                  <div className=\"opacity-90\">1.0% Commission</div>\n                  <div className=\"text-xs opacity-75\">Referrals of referrals</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"font-bold text-lg mb-1\">Level 3</div>\n                  <div className=\"opacity-90\">0.75% Commission</div>\n                  <div className=\"text-xs opacity-75\">Third level down</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"font-bold text-lg mb-1\">Level 4</div>\n                  <div className=\"opacity-90\">0.5% Commission</div>\n                  <div className=\"text-xs opacity-75\">Fourth level down</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"font-bold text-lg mb-1\">Level 5</div>\n                  <div className=\"opacity-90\">0.25% Commission</div>\n                  <div className=\"text-xs opacity-75\">Fifth level down</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":8309},"client/src/pages/Register.jsx":{"content":"import { useState } from 'react';\nimport { Link } from 'wouter';\nimport axios from 'axios';\nimport '../styles/login.css';\n\nexport default function Register() {\n  const [formData, setFormData] = useState({\n    sponsorId: '',\n    firstName: '',\n    lastName: '',\n    mobile: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n    acceptTerms: false\n  });\n  const [errors, setErrors] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [success, setSuccess] = useState('');\n\n  const handleInputChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: type === 'checkbox' ? checked : value\n    }));\n    \n    // Clear error when user starts typing\n    if (errors[name]) {\n      setErrors(prev => ({ ...prev, [name]: '' }));\n    }\n  };\n\n  const validateForm = () => {\n    const newErrors = {};\n\n    if (!formData.sponsorId.trim()) {\n      newErrors.sponsorId = 'Sponsor ID is required';\n    }\n\n    if (!formData.firstName.trim()) {\n      newErrors.firstName = 'First name is required';\n    }\n\n    if (!formData.lastName.trim()) {\n      newErrors.lastName = 'Last name is required';\n    }\n\n    if (!formData.mobile.trim()) {\n      newErrors.mobile = 'Mobile number is required';\n    } else if (!/^\\d{10}$/.test(formData.mobile)) {\n      newErrors.mobile = 'Mobile number must be exactly 10 digits';\n    }\n\n    if (!formData.email.trim()) {\n      newErrors.email = 'Email is required';\n    } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(formData.email)) {\n      newErrors.email = 'Please enter a valid email address';\n    }\n\n    if (!formData.password) {\n      newErrors.password = 'Password is required';\n    } else if (formData.password.length < 8) {\n      newErrors.password = 'Password must be at least 8 characters';\n    }\n\n    if (!formData.confirmPassword) {\n      newErrors.confirmPassword = 'Please confirm your password';\n    } else if (formData.password !== formData.confirmPassword) {\n      newErrors.confirmPassword = 'Passwords do not match';\n    }\n\n    if (!formData.acceptTerms) {\n      newErrors.acceptTerms = 'You must accept the terms and conditions';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    if (!validateForm()) {\n      return;\n    }\n\n    setLoading(true);\n    setErrors({});\n    setSuccess('');\n\n    try {\n      const { confirmPassword, acceptTerms, ...submitData } = formData;\n      const response = await axios.post('/api/auth/register', submitData);\n      \n      if (response.data.success) {\n        setSuccess('Account created successfully! Redirecting to login...');\n        // Redirect to login page after 2 seconds\n        setTimeout(() => {\n          window.location.href = '/login';\n        }, 2000);\n      }\n    } catch (error) {\n      const errorMessage = error.response?.data?.error || 'Registration failed. Please try again.';\n      setErrors({ general: errorMessage });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"login-container\">\n      <div className=\"login-card\">\n        <div className=\"login-header\">\n          <img src=\"/logo.png\" alt=\"FXBOT\" className=\"login-logo\" />\n          <h1 className=\"login-title\">Create Account</h1>\n          <p className=\"login-subtitle\">Join FXBOT and start your trading journey</p>\n        </div>\n\n        {success && (\n          <div className=\"success-message\" data-testid=\"success-message\">\n            {success}\n          </div>\n        )}\n\n        {errors.general && (\n          <div className=\"error-message\" data-testid=\"error-message\">\n            {errors.general}\n          </div>\n        )}\n\n        <form onSubmit={handleSubmit} className=\"login-form\">\n          <div className=\"form-group\">\n            <label htmlFor=\"sponsorId\" className=\"form-label\">\n              Sponsor ID <span className=\"required\">*</span>\n            </label>\n            <input\n              type=\"text\"\n              id=\"sponsorId\"\n              name=\"sponsorId\"\n              value={formData.sponsorId}\n              onChange={handleInputChange}\n              className={`form-input ${errors.sponsorId ? 'error' : ''}`}\n              placeholder=\"Enter sponsor ID (e.g., FX123456)\"\n              data-testid=\"input-sponsor-id\"\n            />\n            {errors.sponsorId && <span className=\"error-message\">{errors.sponsorId}</span>}\n            <small style={{ color: '#718096', fontSize: '12px', marginTop: '4px', display: 'block' }}>\n              Ask your referrer for their sponsor ID. For testing: <strong style={{ color: '#667eea' }}>FX123456</strong>\n            </small>\n          </div>\n\n          <div className=\"form-row\">\n            <div className=\"form-group\">\n              <label htmlFor=\"firstName\" className=\"form-label\">\n                First Name <span className=\"required\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                id=\"firstName\"\n                name=\"firstName\"\n                value={formData.firstName}\n                onChange={handleInputChange}\n                className={`form-input ${errors.firstName ? 'error' : ''}`}\n                placeholder=\"Enter first name\"\n                data-testid=\"input-first-name\"\n              />\n              {errors.firstName && <span className=\"error-message\">{errors.firstName}</span>}\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"lastName\" className=\"form-label\">\n                Last Name <span className=\"required\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                id=\"lastName\"\n                name=\"lastName\"\n                value={formData.lastName}\n                onChange={handleInputChange}\n                className={`form-input ${errors.lastName ? 'error' : ''}`}\n                placeholder=\"Enter last name\"\n                data-testid=\"input-last-name\"\n              />\n              {errors.lastName && <span className=\"error-message\">{errors.lastName}</span>}\n            </div>\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"mobile\" className=\"form-label\">\n              Mobile Number <span className=\"required\">*</span>\n            </label>\n            <input\n              type=\"tel\"\n              id=\"mobile\"\n              name=\"mobile\"\n              value={formData.mobile}\n              onChange={handleInputChange}\n              className={`form-input ${errors.mobile ? 'error' : ''}`}\n              placeholder=\"Enter 10-digit mobile number\"\n              maxLength=\"10\"\n              data-testid=\"input-mobile\"\n            />\n            {errors.mobile && <span className=\"error-message\">{errors.mobile}</span>}\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"email\" className=\"form-label\">\n              Email Address <span className=\"required\">*</span>\n            </label>\n            <input\n              type=\"email\"\n              id=\"email\"\n              name=\"email\"\n              value={formData.email}\n              onChange={handleInputChange}\n              className={`form-input ${errors.email ? 'error' : ''}`}\n              placeholder=\"Enter your email\"\n              data-testid=\"input-email\"\n            />\n            {errors.email && <span className=\"error-message\">{errors.email}</span>}\n          </div>\n\n          <div className=\"form-row\">\n            <div className=\"form-group\">\n              <label htmlFor=\"password\" className=\"form-label\">\n                Password <span className=\"required\">*</span>\n              </label>\n              <input\n                type=\"password\"\n                id=\"password\"\n                name=\"password\"\n                value={formData.password}\n                onChange={handleInputChange}\n                className={`form-input ${errors.password ? 'error' : ''}`}\n                placeholder=\"Enter password\"\n                data-testid=\"input-password\"\n              />\n              {errors.password && <span className=\"error-message\">{errors.password}</span>}\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"confirmPassword\" className=\"form-label\">\n                Confirm Password <span className=\"required\">*</span>\n              </label>\n              <input\n                type=\"password\"\n                id=\"confirmPassword\"\n                name=\"confirmPassword\"\n                value={formData.confirmPassword}\n                onChange={handleInputChange}\n                className={`form-input ${errors.confirmPassword ? 'error' : ''}`}\n                placeholder=\"Confirm password\"\n                data-testid=\"input-confirm-password\"\n              />\n              {errors.confirmPassword && <span className=\"error-message\">{errors.confirmPassword}</span>}\n            </div>\n          </div>\n\n          <div className=\"form-group\">\n            <div className=\"checkbox-container\">\n              <input\n                type=\"checkbox\"\n                id=\"acceptTerms\"\n                name=\"acceptTerms\"\n                checked={formData.acceptTerms}\n                onChange={handleInputChange}\n                className={`form-checkbox ${errors.acceptTerms ? 'error' : ''}`}\n                data-testid=\"checkbox-terms\"\n              />\n              <label htmlFor=\"acceptTerms\" className=\"checkbox-label\">\n                I accept the <Link href=\"/terms\" className=\"link\">Terms and Conditions</Link> and{' '}\n                <Link href=\"/privacy\" className=\"link\">Privacy Policy</Link>\n              </label>\n            </div>\n            {errors.acceptTerms && <span className=\"error-message\">{errors.acceptTerms}</span>}\n          </div>\n\n          <button\n            type=\"submit\"\n            disabled={loading}\n            className=\"login-button\"\n            data-testid=\"button-register\"\n          >\n            {loading ? 'Creating Account...' : 'Create Account'}\n          </button>\n        </form>\n\n        <div className=\"login-footer\">\n          <p>\n            Already have an account?{' '}\n            <Link href=\"/login\" className=\"link\" data-testid=\"link-login\">\n              Sign in here\n            </Link>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":10344},"client/src/pages/Withdrawal.jsx":{"content":"import { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Sidebar from '../components/Sidebar';\n\nexport default function Withdrawal() {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [amount, setAmount] = useState('');\n  const [method, setMethod] = useState('crypto');\n\n  useEffect(() => {\n    const fetchUserData = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        if (!token) {\n          window.location.href = '/login';\n          return;\n        }\n\n        const userResponse = await axios.get('/api/auth/me', {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n        setUser(userResponse.data);\n      } catch (error) {\n        if (error.response?.status === 401) {\n          localStorage.removeItem('token');\n          window.location.href = '/login';\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchUserData();\n  }, []);\n\n  const handleLogout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/';\n  };\n\n  const handleWithdrawal = (e) => {\n    e.preventDefault();\n    alert(`Withdrawal of $${amount} via ${method} requested. This is a demo - no actual transaction will occur.`);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex h-screen bg-gray-100\">\n        <div className=\"w-64 bg-gray-900\"></div>\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen bg-gray-100\">\n      <Sidebar user={user} onLogout={handleLogout} />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <header className=\"bg-white shadow-sm border-b border-gray-200 px-6 py-4\">\n          <h1 className=\"text-2xl font-bold text-gray-900\">Withdrawal</h1>\n        </header>\n\n        <main className=\"flex-1 overflow-y-auto bg-gray-50 p-6\">\n          <div className=\"max-w-2xl mx-auto\">\n            {/* Balance Card */}\n            <div className=\"bg-white rounded-2xl p-6 shadow-sm border border-gray-200 mb-6\">\n              <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">Available Balance</h2>\n              <div className=\"text-3xl font-bold text-green-600\">$0.00</div>\n              <p className=\"text-sm text-gray-500 mt-1\">Available for withdrawal</p>\n            </div>\n\n            <div className=\"bg-white rounded-2xl p-6 shadow-sm border border-gray-200\">\n              <h2 className=\"text-xl font-semibold text-gray-900 mb-6\">Request Withdrawal</h2>\n              \n              <form onSubmit={handleWithdrawal} className=\"space-y-6\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Withdrawal Amount</label>\n                  <div className=\"relative\">\n                    <span className=\"absolute left-3 top-2 text-gray-500 text-lg\">$</span>\n                    <input\n                      type=\"number\"\n                      value={amount}\n                      onChange={(e) => setAmount(e.target.value)}\n                      className=\"w-full border border-gray-300 rounded-lg pl-8 pr-3 py-2\"\n                      placeholder=\"0.00\"\n                      min=\"50\"\n                      step=\"0.01\"\n                      required\n                    />\n                  </div>\n                  <p className=\"text-sm text-gray-500 mt-1\">Minimum withdrawal: $50</p>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Withdrawal Method</label>\n                  <select\n                    value={method}\n                    onChange={(e) => setMethod(e.target.value)}\n                    className=\"w-full border border-gray-300 rounded-lg px-3 py-2\"\n                    required\n                  >\n                    <option value=\"crypto\">Cryptocurrency</option>\n                    <option value=\"bank\">Bank Transfer</option>\n                    <option value=\"paypal\">PayPal</option>\n                  </select>\n                </div>\n\n                <div className=\"bg-yellow-50 p-4 rounded-lg\">\n                  <h3 className=\"font-medium text-yellow-900 mb-2\">Withdrawal Information</h3>\n                  <ul className=\"text-sm text-yellow-800 space-y-1\">\n                    <li>• Withdrawals are processed within 1-3 business days</li>\n                    <li>• $5 processing fee for all withdrawals</li>\n                    <li>• Minimum withdrawal amount: $50</li>\n                    <li>• Identity verification may be required for large amounts</li>\n                  </ul>\n                </div>\n\n                <button\n                  type=\"submit\"\n                  className=\"w-full bg-red-600 hover:bg-red-700 text-white py-3 rounded-lg font-medium transition-colors\"\n                  data-testid=\"button-submit-withdrawal\"\n                >\n                  Request Withdrawal\n                </button>\n              </form>\n            </div>\n\n            {/* Recent Withdrawals */}\n            <div className=\"bg-white rounded-2xl p-6 shadow-sm border border-gray-200 mt-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Recent Withdrawals</h3>\n              <div className=\"text-center py-8 text-gray-500\">\n                <div className=\"w-12 h-12 bg-gray-200 rounded-full flex items-center justify-center mx-auto mb-3\">\n                  <span className=\"text-xl\">📄</span>\n                </div>\n                <p>No withdrawals yet</p>\n              </div>\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":5802},"client/src/styles/login.css":{"content":".login-container {\n  min-height: 100vh;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 20px;\n  font-family: 'Inter', sans-serif;\n}\n\n.login-card {\n  background: white;\n  border-radius: 20px;\n  padding: 50px 40px;\n  max-width: 450px;\n  width: 100%;\n  box-shadow: 0 25px 50px rgba(0, 0, 0, 0.15);\n  text-align: center;\n}\n\n.login-logo {\n  margin-bottom: 40px;\n}\n\n.login-logo img {\n  width: 80px;\n  height: 80px;\n  margin-bottom: 15px;\n  border-radius: 50%;\n  object-fit: cover;\n}\n\n.login-logo h1 {\n  font-size: 32px;\n  font-weight: 700;\n  color: #2d3748;\n  margin: 0;\n  letter-spacing: -0.5px;\n}\n\n.login-form h2 {\n  font-size: 24px;\n  font-weight: 600;\n  color: #2d3748;\n  margin-bottom: 30px;\n}\n\n.form-group {\n  margin-bottom: 25px;\n  text-align: left;\n}\n\n.form-group label {\n  display: block;\n  margin-bottom: 8px;\n  font-weight: 500;\n  color: #4a5568;\n  font-size: 14px;\n}\n\n.form-group input {\n  width: 100%;\n  padding: 12px 16px;\n  border: 2px solid #e2e8f0;\n  border-radius: 10px;\n  font-size: 16px;\n  transition: all 0.3s ease;\n  background: #f8fafc;\n  box-sizing: border-box;\n  color: #2d3748;\n}\n\n.form-group input:focus {\n  outline: none;\n  border-color: #667eea;\n  background: white;\n  box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);\n  color: #2d3748;\n}\n\n.form-actions {\n  text-align: right;\n  margin-bottom: 30px;\n}\n\n.forgot-password-link {\n  color: #667eea;\n  text-decoration: none;\n  font-size: 14px;\n  font-weight: 500;\n  transition: color 0.3s ease;\n}\n\n.forgot-password-link:hover {\n  color: #5a67d8;\n  text-decoration: underline;\n}\n\n.login-button, .submit-button {\n  width: 100%;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  color: white;\n  border: none;\n  padding: 14px;\n  border-radius: 10px;\n  font-size: 16px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  margin-bottom: 30px;\n}\n\n.login-button:hover:not(:disabled), .submit-button:hover:not(:disabled) {\n  transform: translateY(-2px);\n  box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);\n}\n\n.login-button:disabled, .submit-button:disabled {\n  opacity: 0.7;\n  cursor: not-allowed;\n}\n\n.error-message {\n  background: #fed7d7;\n  color: #c53030;\n  padding: 12px 16px;\n  border-radius: 8px;\n  margin-bottom: 20px;\n  font-size: 14px;\n  border: 1px solid #feb2b2;\n}\n\n.success-message {\n  background: #c6f6d5;\n  color: #22543d;\n  padding: 12px 16px;\n  border-radius: 8px;\n  margin-bottom: 20px;\n  font-size: 14px;\n  border: 1px solid #9ae6b4;\n}\n\n.back-to-home, .back-to-login {\n  border-top: 1px solid #e2e8f0;\n  padding-top: 20px;\n}\n\n.back-to-home a, .back-to-login a {\n  color: #718096;\n  text-decoration: none;\n  font-size: 14px;\n  font-weight: 500;\n  transition: color 0.3s ease;\n}\n\n.back-to-home a:hover, .back-to-login a:hover {\n  color: #4a5568;\n}\n\n/* Forgot Password Specific Styles */\n.forgot-password-container {\n  min-height: 100vh;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 20px;\n  font-family: 'Inter', sans-serif;\n}\n\n.forgot-password-card {\n  background: white;\n  border-radius: 20px;\n  padding: 50px 40px;\n  max-width: 450px;\n  width: 100%;\n  box-shadow: 0 25px 50px rgba(0, 0, 0, 0.15);\n  text-align: center;\n}\n\n.logo {\n  margin-bottom: 40px;\n}\n\n.logo img {\n  width: 80px;\n  height: 80px;\n  margin-bottom: 15px;\n  border-radius: 50%;\n  object-fit: cover;\n}\n\n.logo h1 {\n  font-size: 32px;\n  font-weight: 700;\n  color: #2d3748;\n  margin: 0;\n  letter-spacing: -0.5px;\n}\n\n.forgot-password-form h2 {\n  font-size: 24px;\n  font-weight: 600;\n  color: #2d3748;\n  margin-bottom: 15px;\n}\n\n.description {\n  color: #718096;\n  margin-bottom: 30px;\n  font-size: 14px;\n  line-height: 1.5;\n}\n\n/* Registration form specific styles */\n.form-row {\n  display: flex;\n  gap: 1rem;\n}\n\n.form-row .form-group {\n  flex: 1;\n}\n\n/* Required field indicator */\n.required {\n  color: #ef4444;\n}\n\n/* Form labels */\n.form-label {\n  display: block;\n  margin-bottom: 8px;\n  font-weight: 500;\n  color: #4a5568;\n  font-size: 14px;\n}\n\n/* Form inputs */\n.form-input {\n  width: 100%;\n  padding: 12px 16px;\n  border: 2px solid #e2e8f0;\n  border-radius: 10px;\n  font-size: 16px;\n  transition: all 0.3s ease;\n  background: #f8fafc;\n  box-sizing: border-box;\n  color: #2d3748;\n}\n\n.form-input:focus {\n  outline: none;\n  border-color: #667eea;\n  background: white;\n  box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);\n  color: #2d3748;\n}\n\n.form-input.error {\n  border-color: #ef4444;\n  background: #fef2f2;\n}\n\n/* Error messages */\n.error-message {\n  display: block;\n  color: #ef4444;\n  font-size: 12px;\n  margin-top: 4px;\n  font-weight: 500;\n}\n\n/* Checkbox styling */\n.checkbox-container {\n  display: flex;\n  align-items: flex-start;\n  gap: 0.5rem;\n  margin-top: 8px;\n}\n\n.form-checkbox {\n  width: 18px;\n  height: 18px;\n  margin: 0;\n  cursor: pointer;\n  accent-color: #667eea;\n  margin-top: 2px;\n}\n\n.checkbox-label {\n  font-size: 14px;\n  color: #374151;\n  line-height: 1.4;\n  cursor: pointer;\n  margin: 0;\n}\n\n.checkbox-label .link {\n  color: #667eea;\n  text-decoration: none;\n  font-weight: 500;\n}\n\n.checkbox-label .link:hover {\n  text-decoration: underline;\n}\n\n/* Login/register page headers */\n.login-header {\n  text-align: center;\n  margin-bottom: 40px;\n}\n\n.login-logo {\n  width: 80px;\n  height: 80px;\n  margin: 0 auto 20px;\n  border-radius: 50%;\n  object-fit: cover;\n}\n\n.login-title {\n  font-size: 32px;\n  font-weight: 700;\n  color: #2d3748;\n  margin: 0 0 10px 0;\n  letter-spacing: -0.5px;\n}\n\n.login-subtitle {\n  color: #718096;\n  margin: 0;\n  font-size: 16px;\n}\n\n.login-footer {\n  border-top: 1px solid #e2e8f0;\n  padding-top: 20px;\n  text-align: center;\n}\n\n.login-footer .link {\n  color: #667eea;\n  text-decoration: none;\n  font-weight: 500;\n}\n\n.login-footer .link:hover {\n  text-decoration: underline;\n}\n\n@media (max-width: 768px) {\n  .login-container, .forgot-password-container {\n    padding: 10px;\n  }\n  \n  .login-card, .forgot-password-card {\n    padding: 40px 30px;\n    max-width: 500px;\n  }\n\n  .login-logo h1, .logo h1, .login-title {\n    font-size: 28px;\n  }\n\n  .login-form h2, .forgot-password-form h2 {\n    font-size: 22px;\n  }\n  \n  .form-row {\n    flex-direction: column;\n    gap: 0;\n  }\n  \n  .checkbox-container {\n    align-items: flex-start;\n  }\n  \n  .checkbox-label {\n    font-size: 13px;\n  }\n}","size_bytes":6376}}}